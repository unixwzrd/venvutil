#!/bin/bash
# Wrapper script for ld to replace --version with -v in all arguments
# This is necessary because the macOS linker `ld` uses different 
# conventions for version flag representation. Using -v instead of 
# --version ensures compatibility with those tools. This helps maintain 
# consistent behavior when passing arguments, especially in scripts that 
# may need to work with various executables that follow different syntax.
# 
# Note: This script is specifically designed for the `ld` linker and does not 
# handle `c++` or `g++` commands. It modifies the `--version` flag to `-v` 
# for the Apple linker only.

# Directory to store logs
LOG_DIR="${HOME}/.venvutil"
mkdir -p "$LOG_DIR"

LOG_FILE="$LOG_DIR/$(basename "${BASH_SOURCE[0]}").log"

# Function to filter PATH and remove the script directory
filter_path() {
    local script_dir
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
    local filtered_path=""
    local IFS=':'
    for dir in $PATH; do
        if [[ "$dir" != "$script_dir" ]]; then
            if [[ -z "$filtered_path" ]]; then
                filtered_path="$dir"
            else
                filtered_path="$filtered_path:$dir"
            fi
        fi
    done
    echo "$filtered_path"
}

# Function to find the real executable
find_executable() {
    local exec_name="$1"
    PATH=$(filter_path) which "$exec_name" 2>/dev/null
}

# Log the invocation
echo "[$(date)] Invoked: $(basename "${BASH_SOURCE[0]}") $*" >> "$LOG_FILE"

# Remove --version or -Wl,--version from arguments and modify them
modified_args=()

found_linker_flag=0
# Iterate over all arguments and perform substitution
for arg in "$@"; do
    # Replace all instances of --version with -v in the current argument
    if [[ "$(basename "${BASH_SOURCE[0]}")" == "ld" ]]; then
        modified_arg="${arg//--version/-v}"
        found_linker_flag=1
    else
        modified_arg="${arg//-Wl,--version/-Wl,-v}"
        found_linker_flag=1
    fi
    modified_args+=("$modified_arg")
done
if [[ $found_linker_flag -eq 1 ]]; then
    echo "@(#)PROGRAM:ld PROJECT:ld-1015.7.3"
fi

# Log modified arguments
echo "[$(date)] Modified arguments: ${modified_args[*]}" >> "$LOG_FILE"

# Find and execute the real binary
real_exec=$(find_executable "$(basename "${BASH_SOURCE[0]}")")
if [[ -x "$real_exec" ]]; then
    # Log the execution of the real binary
    echo "[$(date)] Executing: $real_exec ${modified_args[*]}" >> "$LOG_FILE"
    PATH=$(filter_path) exec "$real_exec" "${modified_args[@]}"
else
    echo "Error: Unable to locate real executable for $(basename "${BASH_SOURCE[0]}")" >&2
    echo "[$(date)] Error: Unable to locate real executable" >> "$LOG_FILE"
    exit 1
fi