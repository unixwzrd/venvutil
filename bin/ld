#!/bin/bash
# Wrapper script for c++, g++, and ld to replace --version with -v in all arguments
# This is necessary because  the macOS linker `ld` uses different 
# conventions for version flag representation. Using -v instead of 
# --version ensures compatibility with those tools. This helps maintain 
# consistent behavior when passing arguments, especially in scripts that 
# may need to work with various executables that follow different syntax.

# Function to find the real executable
find_executable() {
    local exec_name="$1"
    local script_dir=$(dirname "${BASH_SOURCE[0]}")

    # Remove the script's directory from PATH
    local path_dirs=(${PATH//:/ })
    local filtered_path=()
    for dir in "${path_dirs[@]}"; do
        if [[ "$dir" != "$script_dir" ]]; then
            filtered_path+=("$dir")
        fi
    done

    # Search for the executable in the filtered PATH
    for path in "${filtered_path[@]}"; do
        if [[ -x "$path/$exec_name" ]]; then
            echo "$path/$exec_name"
            return
        fi
    done
    echo "$0 not found in PATH" >&2
    return 2
}

# Initialize an array to hold modified arguments
modified_args=()

# Iterate over all arguments and perform substitution
for arg in "$@"; do
    # Replace all instances of --version with -v in the current argument
    if [[ "$(basename "${BASH_SOURCE[0]}")" == "ld" ]]; then
        modified_arg="${arg//--version/-v}"
    else
        modified_arg="${arg//-Wl,--version/-Wl,-v}"
    fi
    modified_args+=("$modified_arg")
done

# Find and execute the real executable with modified arguments
real_exec=$(find_executable "$(basename "${BASH_SOURCE[0]}")")
exec "$real_exec" "${modified_args[@]}"
