#!/usr/bin/env python
import argparse
import os
import sys
import time
from io import StringIO
from datetime import datetime

import numpy as np

OUTPUT_FILE = None  # Will be assigned if --output is provided

def timestamped_print(message: str, file=None) -> None:
    """
    Print a message with a timestamp.
    Optionally writes to a file if provided.

    Args:
        message (str): The message to print
        file (file-like object, optional): File object to write output
    """
    out = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} {message}"
    print(out)
    if file:
        file.write(out + "\n")


def run_numpy_tests(size: int, iterations: int, file=None) -> None:
    """
    Execute basic NumPy operations multiple times for performance measurements.

    Args:
        size (int): Dimension for square matrices
        iterations (int): Number of repeats for each test
        file (file-like, optional): Where to write log output
    """
    timestamped_print(f"Creating random matrices of size {size}x{size}", file=file)
    mat_a = np.random.rand(size, size)
    mat_b = np.random.rand(size, size)

    # Tests to perform
    tests = [
        ("Matrix multiplication", lambda: np.dot(mat_a, mat_b)),
        ("Matrix transposition", lambda: np.transpose(mat_a)),
        ("Eigenvalue computation", lambda: np.linalg.eigvals(mat_a)),
        ("Fourier transformation", lambda: np.fft.fft(mat_a)),
        ("Summation", lambda: np.sum(mat_a)),
    ]

    # Run each test 'iterations' times
    for test_name, func in tests:
        timestamped_print(f"BEGIN TEST: {test_name}", file=file)
        start_time = time.time()

        for _ in range(iterations):
            _ = func()  # Even if we ignore the result, it forces execution

        elapsed = time.time() - start_time
        timestamped_print(
            f"Time for {test_name.lower()}: {elapsed:.4f} seconds",
            file=file
        )
        timestamped_print("END TEST / BEGIN NEXT TEST", file=file)


def show_numpy_config(file=None) -> None:
    """
    Capture and print NumPy configuration info with timestamps.

    Args:
        file (file-like, optional): Where to write output
    """
    old_stdout = sys.stdout
    capture_stdout = StringIO()
    sys.stdout = capture_stdout

    np.show_config()

    sys.stdout = old_stdout
    lines = capture_stdout.getvalue().strip().split("\n")
    for line in lines:
        timestamped_print(line, file=file)


def main() -> None:
    """
    Main entry point to run the NumPy torture tests.
    Allows specifying matrix size, iteration count,
    skip-tests option, and output file.
    """
    parser = argparse.ArgumentParser(description="NumPy torture test.")
    parser.add_argument(
        "--size",
        type=int,
        default=2500,
        help="Matrix dimension (square); default=2500"
    )
    parser.add_argument(
        "--count",
        type=int,
        default=1,
        help="Number of iterations per test; default=1"
    )
    parser.add_argument(
        "--skip-tests",
        action="store_true",
        help="Skip the performance checks entirely"
    )
    parser.add_argument(
        "--output",
        type=str,
        help="Path to output log file"
    )

    args = parser.parse_args()

    global OUTPUT_FILE
    if args.output:
        OUTPUT_FILE = open(args.output, "w", encoding="utf-8")

    # Show environment info
    venv = os.getenv("CONDA_DEFAULT_ENV", "Unknown environment")
    timestamped_print(f"Using environment: {venv}", file=OUTPUT_FILE)
    timestamped_print("NumPy configuration:", file=OUTPUT_FILE)
    show_numpy_config(file=OUTPUT_FILE)

    if args.skip_tests:
        timestamped_print("SKIPPING PERFORMANCE CHECKS", file=OUTPUT_FILE)
    else:
        run_numpy_tests(size=args.size, iterations=args.count, file=OUTPUT_FILE)

    if OUTPUT_FILE:
        OUTPUT_FILE.close()


if __name__ == "__main__":
    main()

