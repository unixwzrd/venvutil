#!/usr/bin/env python3
"""
NumPy Benchmark Utility

This script performs a series of matrix operations to benchmark NumPy performance,
particularly useful for testing GPU and Neural Engine acceleration on Apple Silicon.
When NumPy is properly compiled and linked against the Accelerate Framework,
you can expect to see an 8-9x improvement in performance over pre-compiled binaries.

The benchmark includes:
- Matrix multiplication
- Matrix transposition
- Eigenvalue computation
- Fourier transformation
- Matrix summation

Each operation is performed on 2500x2500 matrices.
"""
import os
import sys
import time
from argparse import ArgumentParser
from datetime import datetime
from io import StringIO
import numpy as np

# Initialize argparse
parser = ArgumentParser(description="Run NumPy benchmarks and output results.")
parser.add_argument(
    "-o",
    "--output",
    type=str,
    help="Optional file to write detailed results to.",
)
parser.add_argument(
    "-s", "--skip-tests", action="store_true", help="Skip time-consuming tests."
)
parser.add_argument(
    "-c",
    "--count",
    type=int,
    default=1,
    help="Number of iterations for each test (default: 1).",
)

# Parse the arguments
args = parser.parse_args()

# Open output file if specified
output_file = None
if args.output:
    output_file = open(args.output, "w", encoding="utf-8")


def print_with_timestamp(message, file=None):
    """Print messages with a timestamp.

    Args:
        message: The message to print
        file: Optional file object to write to
    """
    output = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} {message}"
    print(output)
    if file:
        file.write(output + "\n")


def do_tests():
    """Perform matrix operation benchmarks.

    Tests include:
    - Matrix multiplication (np.dot)
    - Matrix transposition (np.transpose)
    - Eigenvalue computation (np.linalg.eigvals)
    - Fourier transformation (np.fft.fft)
    - Matrix summation (np.sum)
    """
    size = 2500
    A = np.random.rand(size, size)
    B = np.random.rand(size, size)

    # Number of iterations
    iterations = args.count

    tests = [
        ("Matrix multiplication", lambda: np.dot(A, B)),
        ("Matrix transposition", lambda: np.transpose(A)),
        ("Eigenvalue computation", lambda: np.linalg.eigvals(A)),
        ("Fourier transformation", lambda: np.fft.fft(A)),
        ("Summation", lambda: np.sum(A)),
    ]

    for name, test_func in tests:
        print_with_timestamp(f"BEGIN TEST: {name}", file=output_file)
        start = time.time()
        for _ in range(iterations):
            test_func()
        end = time.time()
        print_with_timestamp(
            f"Time for {name.lower()}: {(end - start):.4f} seconds", file=output_file
        )
        print_with_timestamp("END TEST / BEGIN NEXT TEST", file=output_file)


def main():
    """Run the NumPy benchmark suite."""
    print_with_timestamp(
        f"Producing information for VENV ----> {os.getenv('CONDA_DEFAULT_ENV')}",
        file=output_file,
    )

    # Capture np.show_config() output and print it line by line with timestamps
    old_stdout = sys.stdout
    new_stdout = StringIO()
    sys.stdout = new_stdout
    np.show_config()
    sys.stdout = old_stdout

    for line in new_stdout.getvalue().split("\n"):
        print_with_timestamp(line, file=output_file)

    if args.skip_tests:
        print_with_timestamp(
            "############### SKIPPING PERFORMANCE CHECKS", file=output_file
        )
    else:
        do_tests()

    if output_file:
        output_file.close()


if __name__ == "__main__":
    main()
