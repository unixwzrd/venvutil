+ cd /Users/mps/projects/AI-PROJECTS/venv-build-checker
+ local conf_file=conf/help_sys.conf
+ local shdoc_base=docs/shdoc
+ '[' -d docs/shdoc ']'
+ local in_progress_timestamp=docs/shdoc/.in-progress
+ local completed_timestamp=docs/shdoc/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE
+ touch docs/shdoc/.in-progress
+ local scripts_readme_file=docs/shdoc/README.md
+ write_scripts_readme_header docs/shdoc/README.md
++ get_scripts_readme_file ''
++ local readme_dir=
++ local scripts_readme_file=docs/shdoc/README.md
++ echo docs/shdoc/README.md
+ echo -e '# System Script Documentation'
+ echo -e '## The for more details of the project, see [README.md](/README.md)'
+ echo -e ''
+ echo -e '# List of scripts in project'
+ echo -e ''
+ printf '<pre><table>\n'
+ local search_dirs
+ readarray -t search_dirs
++ grep -v '^#' conf/help_sys.conf
++ sed '/^$/d'
+ for script_dir in "${search_dirs[@]}"
+ local scripts_docs_dir=docs/shdoc/bin/shinclude
+ local script_docs_path=docs/shdoc/bin/shinclude/scripts
+ local function_docs_path=docs/shdoc/bin/shinclude/functions
+ '[' -d docs/shdoc/bin/shinclude/functions ']'
+ '[' -d docs/shdoc/bin/shinclude/scripts ']'
+ local script_files
+ readarray -t script_files
++ file bin/shinclude/errno.sh bin/shinclude/help_sys.sh bin/shinclude/init_env.sh bin/shinclude/util_funcs.sh bin/shinclude/venv_funcs.sh bin/shinclude/wrapper_funcs.sh
++ grep 'shell script'
++ cut -d: -f1
+ local script_path
+ for script_path in "${script_files[@]}"
+ local script_name
++ basename bin/shinclude/errno.sh
+ script_name=errno.sh
+ local script_readme_file=bin/shinclude/errno_sh.md
+ log_message INFO 'Generating markdown for script: errno.sh'
+ local message_level=INFO
+ shift
+ local 'message_out=Generating markdown for script: errno.sh'
+ [[ -z _ ]]
+ '[' 30 -le 20 ']'
+ local in_script_doc=false
+ local in_function_doc=false
+ local script_entry=false
+ local previous_line
+ local extracted_markdown=
+ local function_name=
+ IFS=
+ read -r line
+ [[ #!/usr/bin/env bash =~ ^#! ]]
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # # Script: errno.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: errno.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: errno.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: errno.sh =~ ^#+ ]]
+ extracted_markdown+='# Script: errno.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `errno.sh` - Provides POSIX errno codes and utilities for Bash scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `errno.sh` - Provides POSIX errno codes and utilities for Bash scripts =~ ^#+ ]]
+ extracted_markdown+='`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Offers functions to retrieve and manage POSIX error codes within Bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Offers functions to retrieve and manage POSIX error codes within Bash scripts. =~ ^#+ ]]
+ extracted_markdown+='  - Offers functions to retrieve and manage POSIX error codes within Bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^#+ ]]
+ extracted_markdown+='- **Usage**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Source this script in your Bash scripts to utilize error code utilities. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in your Bash scripts to utilize error code utilities. =~ ^#+ ]]
+ extracted_markdown+='  - Source this script in your Bash scripts to utilize error code utilities.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     source /path/to/errno.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source /path/to/errno.sh =~ ^#+ ]]
+ extracted_markdown+='    source /path/to/errno.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**: =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**: =~ ^#+ ]]
+ extracted_markdown+='- **Output**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Functions that output error codes and messages. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Functions that output error codes and messages. =~ ^#+ ]]
+ extracted_markdown+='  - Functions that output error codes and messages.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**: =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided. =~ ^#+ ]]
+ extracted_markdown+='  - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Initialization**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Initialization**: =~ ^#+ ]]
+ extracted_markdown+='- **Initialization**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Ensures the script is sourced only once and initializes necessary variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Ensures the script is sourced only once and initializes necessary variables. =~ ^#+ ]]
+ extracted_markdown+='  - Ensures the script is sourced only once and initializes necessary variables.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Dependencies =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Dependencies =~ ^#+ ]]
+ extracted_markdown+='## Dependencies\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - `util_funcs.sh` (for utility functions like `to_upper`) =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - `util_funcs.sh` (for utility functions like `to_upper`) =~ ^#+ ]]
+ extracted_markdown+='- `util_funcs.sh` (for utility functions like `to_upper`)\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ write_script_doc errno.sh bin/shinclude '# Script: errno.sh\n`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts\n## Description\n- **Purpose**:\n  - Offers functions to retrieve and manage POSIX error codes within Bash scripts.\n- **Usage**:\n  - Source this script in your Bash scripts to utilize error code utilities.\n    ```bash\n    source /path/to/errno.sh\n    ```\n- **Input Parameters**:\n  - None.\n- **Output**:\n  - Functions that output error codes and messages.\n- **Exceptions**:\n  - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.\n- **Initialization**:\n  - Ensures the script is sourced only once and initializes necessary variables.\n#\n## Dependencies\n- `util_funcs.sh` (for utility functions like `to_upper`)\n'
+ local script_name=errno.sh
+ shift
+ local script_dir=bin/shinclude
+ shift
+ local 'script_markdown=# Script: errno.sh\n`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts\n## Description\n- **Purpose**:\n  - Offers functions to retrieve and manage POSIX error codes within Bash scripts.\n- **Usage**:\n  - Source this script in your Bash scripts to utilize error code utilities.\n    ```bash\n    source /path/to/errno.sh\n    ```\n- **Input Parameters**:\n  - None.\n- **Output**:\n  - Functions that output error codes and messages.\n- **Exceptions**:\n  - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.\n- **Initialization**:\n  - Ensures the script is sourced only once and initializes necessary variables.\n#\n## Dependencies\n- `util_funcs.sh` (for utility functions like `to_upper`)\n'
+ local markdown_file_name=docs/shdoc/bin/shinclude/scripts/errno.sh.md
+ local script_readme_file=bin/shinclude/errno_sh.md
+ echo -e '# Script: errno.sh\n`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts\n## Description\n- **Purpose**:\n  - Offers functions to retrieve and manage POSIX error codes within Bash scripts.\n- **Usage**:\n  - Source this script in your Bash scripts to utilize error code utilities.\n    ```bash\n    source /path/to/errno.sh\n    ```\n- **Input Parameters**:\n  - None.\n- **Output**:\n  - Functions that output error codes and messages.\n- **Exceptions**:\n  - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.\n- **Initialization**:\n  - Ensures the script is sourced only once and initializes necessary variables.\n#\n## Dependencies\n- `util_funcs.sh` (for utility functions like `to_upper`)\n'
+ echo -e '\n'
+ echo -e '## Function Defniitions\n'
+ echo -e '* [errno.sh](/bin/shinclude/errno_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/scripts/errno.sh.md
+ local file_path=docs/shdoc/bin/shinclude/scripts/errno.sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_readme_header errno.sh bin/shinclude
+ local script_name=errno.sh
+ local script_dir=bin/shinclude
+ local script_doc_file=docs/shdoc/bin/shinclude/scripts/errno.sh.md
+ local script_readme_file
++ get_script_readme_file errno.sh bin/shinclude
++ local script_name=errno.sh
++ local script_dir=bin/shinclude
++ local script_readme_file=bin/shinclude/errno_sh.md
++ echo bin/shinclude/errno_sh.md
+ script_readme_file=bin/shinclude/errno_sh.md
+ echo -e '# Functions Defined in Script: errno.sh\n'
+ echo -e '\n'
++ script_description errno.sh
++ local script_name=errno.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/errno.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/errno.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/errno.sh.md
+++ tail -n 1
++ description='`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts'
++ description='Provides POSIX errno codes and utilities for Bash scripts'
++ description='Provides POSIX errno codes and utilities for Bash scripts'
++ echo 'Provides POSIX errno codes and utilities for Bash scripts'
+ echo -e '### [errno.sh](/docs/shdoc/bin/shinclude/scripts/errno.sh.md) - Provides POSIX errno codes and utilities for Bash scripts\n'
+ echo -e '\n'
+ echo -e '## List of Functions Defined:\n'
+ echo -e '\n'
+ printf '<pre><table>\n'
+ write_scripts_readme_entry errno.sh bin/shinclude
+ local script_name=errno.sh
+ local script_dir=bin/shinclude
+ local script_readme_file
++ script_readme_file errno.sh bin/shinclude
bash: script_readme_file: command not found
+ script_readme_file=
++ script_description errno.sh
++ local script_name=errno.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/errno.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/errno.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/errno.sh.md
+++ tail -n 1
++ description='`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts'
++ description='Provides POSIX errno codes and utilities for Bash scripts'
++ description='Provides POSIX errno codes and utilities for Bash scripts'
++ echo 'Provides POSIX errno codes and utilities for Bash scripts'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' '' errno.sh 'Provides POSIX errno codes and utilities for Bash scripts'
++ get_scripts_readme_file ''
++ local readme_dir=
++ local scripts_readme_file=docs/shdoc/README.md
++ echo docs/shdoc/README.md
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: errno =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errno =~ ^#.* ]]
+ extracted_markdown+='# Function: errno\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^#+ ]]
+ extracted_markdown+=' `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^#+ ]]
+ extracted_markdown+='  - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errno [errno_code|errno_number]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno [errno_code|errno_number]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno [errno_code|errno_number]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno [errno_code|errno_number]` =~ ^#+ ]]
+ extracted_markdown+='  - `errno [errno_code|errno_number]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^#+ ]]
+ extracted_markdown+='  - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^#+ ]]
+ extracted_markdown+='  - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - 2: Could not find system errno.h =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - 2: Could not find system errno.h =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 2: Could not find system errno.h =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 2: Could not find system errno.h =~ ^#+ ]]
+ extracted_markdown+='  - 2: Could not find system errno.h\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - 22: Invalid errno name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - 22: Invalid errno name =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 22: Invalid errno name =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 22: Invalid errno name =~ ^#+ ]]
+ extracted_markdown+='  - 22: Invalid errno name\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ errno() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errno() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno() { =~ ^#+ ]]
+ [[ errno() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=errno
+ function_name=errno
+ write_function_doc errno errno.sh bin/shinclude/errno.sh '# Function: errno\n `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.\n## Description\n- **Purpose**: \n  - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.\n- **Usage**: \n  - `errno [errno_code|errno_number]`\n- **Input Parameters**: \n  - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.\n- **Output**: \n  - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.\n- **Exceptions**: \n  - 2: Could not find system errno.h\n  - 22: Invalid errno name\n'
+ local function_name=errno
+ shift
+ local script_name=errno.sh
+ shift
+ local script_dir=bin/shinclude/errno.sh
+ shift
+ local 'function_markdown=# Function: errno\n `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.\n## Description\n- **Purpose**: \n  - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.\n- **Usage**: \n  - `errno [errno_code|errno_number]`\n- **Input Parameters**: \n  - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.\n- **Output**: \n  - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.\n- **Exceptions**: \n  - 2: Could not find system errno.h\n  - 22: Invalid errno name\n'
+ local script_readme_file=errno_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/errno.md
+ echo -e '## errno'
+ echo -e '# Function: errno\n `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.\n## Description\n- **Purpose**: \n  - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.\n- **Usage**: \n  - `errno [errno_code|errno_number]`\n- **Input Parameters**: \n  - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.\n- **Output**: \n  - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.\n- **Exceptions**: \n  - 2: Could not find system errno.h\n  - 22: Invalid errno name\n'
+ echo -e '## Defniition \n'
+ echo -e '* [errno.sh](/bin/shinclude/errno.sh/errno_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/errno.md
+ local file_path=docs/shdoc/bin/shinclude/functions/errno.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry errno errno.sh bin/shinclude/errno.sh
+ local function_name=errno
+ local script_name=errno.sh
+ local script_dir=bin/shinclude/errno.sh
+ local script_readme_file=bin/shinclude/errno.sh/errno_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/errno.md
++ function_description errno
++ local function_name=errno
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno.md
+++ tail -n 1
++ description=' `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.'
++ description='Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.'
++ description='Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.'
++ echo 'Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' errno docs/shdoc/bin/shinclude/functions/errno.md 'Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.'
bash: bin/shinclude/errno.sh/errno_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Usage: errno [errno_code|errno_number]" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Usage: errno [errno_code|errno_number]"'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Example: errno EACCES" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Example: errno EACCES" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Example: errno EACCES" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Example: errno EACCES"'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Example: errno EACCES" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Example: errno EACCES" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=0'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local errno_code =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local errno_code =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_code =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local errno_code =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local errno_code'
+ continue
+ IFS=
+ read -r line
+ [[     errno_code="$(to_upper "$1")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_code =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local errno_code =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_code="$(to_upper "$1")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     errno_code="$(to_upper "$1")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    errno_code="$(to_upper "$1")"'
+ continue
+ IFS=
+ read -r line
+ [[     local errno_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_code="$(to_upper "$1")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     errno_code="$(to_upper "$1")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local errno_file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local errno_file'
+ continue
+ IFS=
+ read -r line
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local errno_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -f "/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/usr/include/sys/errno.h" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_file="/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Could not lookup error code '\''${errno_code}'\'' system errno.h not found." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=2'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local line errno_num errno_text =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local line errno_num errno_text =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line errno_num errno_text =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local line errno_num errno_text =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local line errno_num errno_text'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line errno_num errno_text =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local line errno_num errno_text =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ "$errno_code" =~ ^[0-9]+$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file")'
+ continue
+ IFS=
+ read -r line
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_code=$(echo "$line" | awk '\''{print $2}'\'')'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         # Not using braces for that, it's a regular expression here. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Not using braces for that, it's a regular expression here. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Not using braces for that, it's a regular expression here. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Not using braces for that, it'\''s a regular expression here.'
+ continue
+ IFS=
+ read -r line
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Not using braces for that, it's a regular expression here. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Not using braces for that, it's a regular expression here. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet).'
+ continue
+ IFS=
+ read -r line
+ [[         # shellcheck disable=SC1087 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # shellcheck disable=SC1087 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # shellcheck disable=SC1087 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # shellcheck disable=SC1087'
+ continue
+ IFS=
+ read -r line
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # shellcheck disable=SC1087 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # shellcheck disable=SC1087 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file")'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     errno_num=$(echo "$line" | awk '{print $3}') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    errno_num=$(echo "$line" | awk '\''{print $3}'\'')'
+ continue
+ IFS=
+ read -r line
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    errno_text=$(echo "$line" | sed -e '\''s/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/'\'')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "$errno_num" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$errno_num" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "$errno_num" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Invalid errno code $errno_code" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Invalid errno code $errno_code" >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=22 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=22 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=22 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=22'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=22 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=22 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "($errno_code: $errno_num): $errno_text" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "($errno_code: $errno_num): $errno_text"'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__="$errno_num" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__="$errno_num" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__="$errno_num" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__="$errno_num"'
+ continue
+ IFS=
+ read -r line
+ [[         return "${__rc__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__="$errno_num" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__="$errno_num" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return "${__rc__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return "${__rc__}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return "${__rc__}"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return "${__rc__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return "${__rc__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: errfind =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errfind =~ ^#.* ]]
+ extracted_markdown+='# Function: errfind\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `errfind` - Find the error code for a given string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errfind` - Find the error code for a given string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errfind` - Find the error code for a given string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errfind` - Find the error code for a given string. =~ ^#+ ]]
+ extracted_markdown+=' `errfind` - Find the error code for a given string.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^#+ ]]
+ extracted_markdown+='  - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errfind <string>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errfind <string>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errfind <string>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errfind <string>` =~ ^#+ ]]
+ extracted_markdown+='  - `errfind <string>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^#+ ]]
+ extracted_markdown+='  - `string`: The string to search for within errno definitions.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^#+ ]]
+ extracted_markdown+='  - Outputs matching error codes and their messages or a message indicating no matches found.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ errfind() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errfind() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errfind() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errfind() { =~ ^#+ ]]
+ [[ errfind() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=errfind
+ function_name=errfind
+ write_function_doc errfind errno.sh bin/shinclude/errno.sh '# Function: errfind\n `errfind` - Find the error code for a given string.\n## Description\n- **Purpose**: \n  - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.\n- **Usage**: \n  - `errfind <string>`\n- **Input Parameters**: \n  - `string`: The string to search for within errno definitions.\n- **Output**: \n  - Outputs matching error codes and their messages or a message indicating no matches found.\n- **Exceptions**: \n  - None.\n'
+ local function_name=errfind
+ shift
+ local script_name=errno.sh
+ shift
+ local script_dir=bin/shinclude/errno.sh
+ shift
+ local 'function_markdown=# Function: errfind\n `errfind` - Find the error code for a given string.\n## Description\n- **Purpose**: \n  - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.\n- **Usage**: \n  - `errfind <string>`\n- **Input Parameters**: \n  - `string`: The string to search for within errno definitions.\n- **Output**: \n  - Outputs matching error codes and their messages or a message indicating no matches found.\n- **Exceptions**: \n  - None.\n'
+ local script_readme_file=errno_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/errfind.md
+ echo -e '## errfind'
+ echo -e '# Function: errfind\n `errfind` - Find the error code for a given string.\n## Description\n- **Purpose**: \n  - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.\n- **Usage**: \n  - `errfind <string>`\n- **Input Parameters**: \n  - `string`: The string to search for within errno definitions.\n- **Output**: \n  - Outputs matching error codes and their messages or a message indicating no matches found.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [errno.sh](/bin/shinclude/errno.sh/errno_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/errfind.md
+ local file_path=docs/shdoc/bin/shinclude/functions/errfind.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry errfind errno.sh bin/shinclude/errno.sh
+ local function_name=errfind
+ local script_name=errno.sh
+ local script_dir=bin/shinclude/errno.sh
+ local script_readme_file=bin/shinclude/errno.sh/errno_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/errfind.md
++ function_description errfind
++ local function_name=errfind
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errfind.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errfind.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errfind.md
+++ tail -n 1
++ description=' `errfind` - Find the error code for a given string.'
++ description='Find the error code for a given string.'
++ description='Find the error code for a given string.'
++ echo 'Find the error code for a given string.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' errfind docs/shdoc/bin/shinclude/functions/errfind.md 'Find the error code for a given string.'
bash: bin/shinclude/errno.sh/errno_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local errno_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local errno_file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local errno_file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local errno_file'
+ continue
+ IFS=
+ read -r line
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local errno_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -f "/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/usr/include/sys/errno.h" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_file="/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Could not lookup error code '\''${errno_code}'\'' system errno.h not found." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=2'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local lines errno_code errno_num errno_text =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local lines errno_code errno_num errno_text =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local lines errno_code errno_num errno_text =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local lines errno_code errno_num errno_text =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local lines errno_code errno_num errno_text'
+ continue
+ IFS=
+ read -r line
+ [[     local search_string="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local lines errno_code errno_num errno_text =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local lines errno_code errno_num errno_text =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_string="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local search_string="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local search_string="$1"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_string="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local search_string="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file")'
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "$lines" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$lines" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$lines" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "$lines" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "No error codes found for $search_string" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$lines" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$lines" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No error codes found for $search_string" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "No error codes found for $search_string" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "No error codes found for $search_string"'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No error codes found for $search_string" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "No error codes found for $search_string" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=0'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "$lines" | while read -r line; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "$lines" | while read -r line; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$lines" | while read -r line; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "$lines" | while read -r line; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "$lines" | while read -r line; do'
+ continue
+ IFS=
+ read -r line
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$lines" | while read -r line; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "$lines" | while read -r line; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_code=$(echo "$line" | awk '\''{print $2}'\'')'
+ continue
+ IFS=
+ read -r line
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_num=$(echo "$line" | awk '{print $3}') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_num=$(echo "$line" | awk '\''{print $3}'\'')'
+ continue
+ IFS=
+ read -r line
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_text=$(echo "$line" | sed -e '\''s/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/'\'')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "($errno_code: $errno_num): $errno_text" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "($errno_code: $errno_num): $errno_text"'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __rc__=0 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __rc__=0'
+ continue
+ IFS=
+ read -r line
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: errno_warn =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errno_warn =~ ^#.* ]]
+ extracted_markdown+='# Function: errno_warn\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^#+ ]]
+ extracted_markdown+=' `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^#+ ]]
+ extracted_markdown+='  - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errno_warn <errno_code>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_warn <errno_code>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_warn <errno_code>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_warn <errno_code>` =~ ^#+ ]]
+ extracted_markdown+='  - `errno_warn <errno_code>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^#+ ]]
+ extracted_markdown+='  - `errno_code`: The errno code to generate a warning for.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Outputs a warning message to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs a warning message to STDERR. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs a warning message to STDERR. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs a warning message to STDERR. =~ ^#+ ]]
+ extracted_markdown+='  - Outputs a warning message to STDERR.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the error number associated with the provided errno code.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ errno_warn() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errno_warn() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_warn() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_warn() { =~ ^#+ ]]
+ [[ errno_warn() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=errno_warn
+ function_name=errno_warn
+ write_function_doc errno_warn errno.sh bin/shinclude/errno.sh '# Function: errno_warn\n `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.\n## Description\n- **Purpose**: \n  - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.\n- **Usage**: \n  - `errno_warn <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate a warning for.\n- **Output**: \n  - Outputs a warning message to STDERR.\n- **Exceptions**: \n  - Returns the error number associated with the provided errno code.\n'
+ local function_name=errno_warn
+ shift
+ local script_name=errno.sh
+ shift
+ local script_dir=bin/shinclude/errno.sh
+ shift
+ local 'function_markdown=# Function: errno_warn\n `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.\n## Description\n- **Purpose**: \n  - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.\n- **Usage**: \n  - `errno_warn <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate a warning for.\n- **Output**: \n  - Outputs a warning message to STDERR.\n- **Exceptions**: \n  - Returns the error number associated with the provided errno code.\n'
+ local script_readme_file=errno_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/errno_warn.md
+ echo -e '## errno_warn'
+ echo -e '# Function: errno_warn\n `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.\n## Description\n- **Purpose**: \n  - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.\n- **Usage**: \n  - `errno_warn <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate a warning for.\n- **Output**: \n  - Outputs a warning message to STDERR.\n- **Exceptions**: \n  - Returns the error number associated with the provided errno code.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [errno.sh](/bin/shinclude/errno.sh/errno_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/errno_warn.md
+ local file_path=docs/shdoc/bin/shinclude/functions/errno_warn.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry errno_warn errno.sh bin/shinclude/errno.sh
+ local function_name=errno_warn
+ local script_name=errno.sh
+ local script_dir=bin/shinclude/errno.sh
+ local script_readme_file=bin/shinclude/errno.sh/errno_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/errno_warn.md
++ function_description errno_warn
++ local function_name=errno_warn
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno_warn.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno_warn.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno_warn.md
+++ tail -n 1
++ description=' `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.'
++ description='Prints a warning using the errno function to STDERR and returns the error number.'
++ description='Prints a warning using the errno function to STDERR and returns the error number.'
++ echo 'Prints a warning using the errno function to STDERR and returns the error number.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' errno_warn docs/shdoc/bin/shinclude/functions/errno_warn.md 'Prints a warning using the errno function to STDERR and returns the error number.'
bash: bin/shinclude/errno.sh/errno_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     __rc__=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __rc__=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __rc__=$1'
+ continue
+ IFS=
+ read -r line
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "WARNING: $(errno "${__rc__}")" >&2'
+ continue
+ IFS=
+ read -r line
+ [[     return "${__rc__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return "${__rc__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return "${__rc__}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    return "${__rc__}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return "${__rc__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return "${__rc__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: errno_exit =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errno_exit =~ ^#.* ]]
+ extracted_markdown+='# Function: errno_exit\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^#+ ]]
+ extracted_markdown+=' `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^#+ ]]
+ extracted_markdown+='  - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errno_exit <errno_code>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_exit <errno_code>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_exit <errno_code>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_exit <errno_code>` =~ ^#+ ]]
+ extracted_markdown+='  - `errno_exit <errno_code>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^#+ ]]
+ extracted_markdown+='  - `errno_code`: The errno code to generate an error for.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^#+ ]]
+ extracted_markdown+='  - Outputs an error message to STDERR and exits the script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Exits the script with the provided error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Exits the script with the provided error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Exits the script with the provided error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Exits the script with the provided error number. =~ ^#+ ]]
+ extracted_markdown+='  - Exits the script with the provided error number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ errno_exit() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errno_exit() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_exit() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_exit() { =~ ^#+ ]]
+ [[ errno_exit() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=errno_exit
+ function_name=errno_exit
+ write_function_doc errno_exit errno.sh bin/shinclude/errno.sh '# Function: errno_exit\n `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.\n## Description\n- **Purpose**: \n  - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.\n- **Usage**: \n  - `errno_exit <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate an error for.\n- **Output**: \n  - Outputs an error message to STDERR and exits the script.\n- **Exceptions**: \n  - Exits the script with the provided error number.\n'
+ local function_name=errno_exit
+ shift
+ local script_name=errno.sh
+ shift
+ local script_dir=bin/shinclude/errno.sh
+ shift
+ local 'function_markdown=# Function: errno_exit\n `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.\n## Description\n- **Purpose**: \n  - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.\n- **Usage**: \n  - `errno_exit <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate an error for.\n- **Output**: \n  - Outputs an error message to STDERR and exits the script.\n- **Exceptions**: \n  - Exits the script with the provided error number.\n'
+ local script_readme_file=errno_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/errno_exit.md
+ echo -e '## errno_exit'
+ echo -e '# Function: errno_exit\n `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.\n## Description\n- **Purpose**: \n  - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.\n- **Usage**: \n  - `errno_exit <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate an error for.\n- **Output**: \n  - Outputs an error message to STDERR and exits the script.\n- **Exceptions**: \n  - Exits the script with the provided error number.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [errno.sh](/bin/shinclude/errno.sh/errno_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/errno_exit.md
+ local file_path=docs/shdoc/bin/shinclude/functions/errno_exit.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry errno_exit errno.sh bin/shinclude/errno.sh
+ local function_name=errno_exit
+ local script_name=errno.sh
+ local script_dir=bin/shinclude/errno.sh
+ local script_readme_file=bin/shinclude/errno.sh/errno_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/errno_exit.md
++ function_description errno_exit
++ local function_name=errno_exit
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno_exit.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno_exit.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/errno_exit.md
+++ tail -n 1
++ description=' `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.'
++ description='Prints an error to STDERR using the errno function and exits with the error number.'
++ description='Prints an error to STDERR using the errno function and exits with the error number.'
++ echo 'Prints an error to STDERR using the errno function and exits with the error number.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' errno_exit docs/shdoc/bin/shinclude/functions/errno_exit.md 'Prints an error to STDERR using the errno function and exits with the error number.'
bash: bin/shinclude/errno.sh/errno_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     __rc__=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __rc__=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __rc__=$1'
+ continue
+ IFS=
+ read -r line
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "ERROR: $(errno "${__rc__}")" >&2'
+ continue
+ IFS=
+ read -r line
+ [[     exit "${__rc__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     exit "${__rc__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     exit "${__rc__}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    exit "${__rc__}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     exit "${__rc__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     exit "${__rc__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ declare -g -A message_class=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ declare -g -A message_class=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -A message_class=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -A message_class=( =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g -A message_class=('
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG9"]=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -A message_class=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[ declare -g -A message_class=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG9"]=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG9"]=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG9"]=1'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG8"]=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG9"]=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG9"]=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG8"]=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG8"]=2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG8"]=2'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG7"]=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG8"]=2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG8"]=2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG7"]=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG7"]=2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG7"]=2'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG6"]=3 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG7"]=2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG7"]=2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG6"]=3 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG6"]=3 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG6"]=3'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG5"]=4 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG6"]=3 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG6"]=3 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG5"]=4 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG5"]=4 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG5"]=4'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG4"]=5 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG5"]=4 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG5"]=4 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG4"]=5 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG4"]=5 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG4"]=5'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG3"]=6 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG4"]=5 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG4"]=5 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG3"]=6 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG3"]=6 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG3"]=6'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG2"]=7 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG3"]=6 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG3"]=6 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG2"]=7 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG2"]=7 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG2"]=7'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG1"]=8 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG2"]=7 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG2"]=7 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG1"]=8 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG1"]=8 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG1"]=8'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG0"]=9 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG1"]=8 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG1"]=8 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG0"]=9 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG0"]=9 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG0"]=9'
+ continue
+ IFS=
+ read -r line
+ [[     ["DEBUG"]=10 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG0"]=9 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG0"]=9 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG"]=10 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG"]=10 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["DEBUG"]=10'
+ continue
+ IFS=
+ read -r line
+ [[     ["INFO"]=20 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG"]=10 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["DEBUG"]=10 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["INFO"]=20 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["INFO"]=20 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["INFO"]=20'
+ continue
+ IFS=
+ read -r line
+ [[     ["WARNING"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["INFO"]=20 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["INFO"]=20 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["WARNING"]=30 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["WARNING"]=30 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["WARNING"]=30'
+ continue
+ IFS=
+ read -r line
+ [[     ["WARN"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["WARNING"]=30 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["WARNING"]=30 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["WARN"]=30 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["WARN"]=30 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["WARN"]=30'
+ continue
+ IFS=
+ read -r line
+ [[     ["ERROR"]=40 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["WARN"]=30 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["WARN"]=30 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["ERROR"]=40 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["ERROR"]=40 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["ERROR"]=40'
+ continue
+ IFS=
+ read -r line
+ [[     ["CRITICAL"]=50 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["ERROR"]=40 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["ERROR"]=40 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["CRITICAL"]=50 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["CRITICAL"]=50 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["CRITICAL"]=50'
+ continue
+ IFS=
+ read -r line
+ [[     ["SILENT"]=99 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["CRITICAL"]=50 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["CRITICAL"]=50 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["SILENT"]=99 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["SILENT"]=99 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ["SILENT"]=99'
+ continue
+ IFS=
+ read -r line
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["SILENT"]=99 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ["SILENT"]=99 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ #  `log_message` - Prints a message to STDERR based on the provided log level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ #  `log_message` - Prints a message to STDERR based on the provided log level. =~ ^#.* ]]
+ extracted_markdown+=' `log_message` - Prints a message to STDERR based on the provided log level.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#+ ]]
+ extracted_markdown+='  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `log_message <log_level> <message>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `log_message <log_level> <message>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_message <log_level> <message>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_message <log_level> <message>` =~ ^#+ ]]
+ extracted_markdown+='  - `log_message <log_level> <message>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^#+ ]]
+ extracted_markdown+='  - `log_level`: The log level to check against the debug level. Supported log levels are:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `TRACE` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `TRACE` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `TRACE` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `TRACE` =~ ^#+ ]]
+ extracted_markdown+='    - `TRACE`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^#+ ]]
+ extracted_markdown+='    - `DEBUG8`-`DEBUG0`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `DEBUG` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG` =~ ^#+ ]]
+ extracted_markdown+='    - `DEBUG`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `INFO` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `INFO` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `INFO` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `INFO` =~ ^#+ ]]
+ extracted_markdown+='    - `INFO`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `WARNING` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `WARNING` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `WARNING` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `WARNING` =~ ^#+ ]]
+ extracted_markdown+='    - `WARNING`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `ERROR` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `ERROR` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `ERROR` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `ERROR` =~ ^#+ ]]
+ extracted_markdown+='    - `ERROR`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `CRITICAL` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `CRITICAL` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `CRITICAL` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `CRITICAL` =~ ^#+ ]]
+ extracted_markdown+='    - `CRITICAL`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     - `SILENT` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `SILENT` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `SILENT` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `SILENT` =~ ^#+ ]]
+ extracted_markdown+='    - `SILENT`\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^#+ ]]
+ extracted_markdown+='  - `message`: The message to print if the log level is greater than or equal to the current debug level.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#+ ]]
+ extracted_markdown+='  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n'
+ continue
+ IFS=
+ read -r line
+ [[ log_message() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ log_message() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ log_message() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ log_message() { =~ ^#+ ]]
+ [[ log_message() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=log_message
+ function_name=log_message
+ write_function_doc log_message errno.sh bin/shinclude/errno.sh ' `log_message` - Prints a message to STDERR based on the provided log level.\n## Description\n- **Purpose**: \n  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n- **Usage**: \n  - `log_message <log_level> <message>`\n- **Input Parameters**: \n  - `log_level`: The log level to check against the debug level. Supported log levels are:\n    - `TRACE`\n    - `DEBUG8`-`DEBUG0`\n    - `DEBUG`\n    - `INFO`\n    - `WARNING`\n    - `ERROR`\n    - `CRITICAL`\n    - `SILENT`\n  - `message`: The message to print if the log level is greater than or equal to the current debug level.\n- **Output**: \n  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n'
+ local function_name=log_message
+ shift
+ local script_name=errno.sh
+ shift
+ local script_dir=bin/shinclude/errno.sh
+ shift
+ local 'function_markdown= `log_message` - Prints a message to STDERR based on the provided log level.\n## Description\n- **Purpose**: \n  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n- **Usage**: \n  - `log_message <log_level> <message>`\n- **Input Parameters**: \n  - `log_level`: The log level to check against the debug level. Supported log levels are:\n    - `TRACE`\n    - `DEBUG8`-`DEBUG0`\n    - `DEBUG`\n    - `INFO`\n    - `WARNING`\n    - `ERROR`\n    - `CRITICAL`\n    - `SILENT`\n  - `message`: The message to print if the log level is greater than or equal to the current debug level.\n- **Output**: \n  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n'
+ local script_readme_file=errno_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/log_message.md
+ echo -e '## log_message'
+ echo -e ' `log_message` - Prints a message to STDERR based on the provided log level.\n## Description\n- **Purpose**: \n  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n- **Usage**: \n  - `log_message <log_level> <message>`\n- **Input Parameters**: \n  - `log_level`: The log level to check against the debug level. Supported log levels are:\n    - `TRACE`\n    - `DEBUG8`-`DEBUG0`\n    - `DEBUG`\n    - `INFO`\n    - `WARNING`\n    - `ERROR`\n    - `CRITICAL`\n    - `SILENT`\n  - `message`: The message to print if the log level is greater than or equal to the current debug level.\n- **Output**: \n  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [errno.sh](/bin/shinclude/errno.sh/errno_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/log_message.md
+ local file_path=docs/shdoc/bin/shinclude/functions/log_message.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry log_message errno.sh bin/shinclude/errno.sh
+ local function_name=log_message
+ local script_name=errno.sh
+ local script_dir=bin/shinclude/errno.sh
+ local script_readme_file=bin/shinclude/errno.sh/errno_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/log_message.md
++ function_description log_message
++ local function_name=log_message
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/log_message.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/log_message.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/log_message.md
+++ tail -n 1
++ description='## Description'
++ description='## Description'
++ description='## Description'
++ echo '## Description'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' log_message docs/shdoc/bin/shinclude/functions/log_message.md '## Description'
bash: bin/shinclude/errno.sh/errno_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local message_level="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local message_level="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_level="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local message_level="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local message_level="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local message_out="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_level="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local message_level="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_out="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local message_out="$*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local message_out="$*"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_out="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local message_out="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ #     declare -A message_class=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ #     declare -A message_class=( =~ ^#.* ]]
+ extracted_markdown+='    declare -A message_class=(\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG9"]=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG9"]=1 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG9"]=1 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG9"]=1 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG9"]=1\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG8"]=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG8"]=2 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG8"]=2 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG8"]=2 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG8"]=2\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG7"]=3 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG7"]=3 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG7"]=3 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG7"]=3 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG7"]=3\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG6"]=4 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG6"]=4 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG6"]=4 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG6"]=4 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG6"]=4\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG5"]=5 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG5"]=5 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG5"]=5 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG5"]=5 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG5"]=5\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG4"]=6 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG4"]=6 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG4"]=6 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG4"]=6 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG4"]=6\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG3"]=7 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG3"]=7 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG3"]=7 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG3"]=7 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG3"]=7\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG2"]=8 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG2"]=8 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG2"]=8 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG2"]=8 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG2"]=8\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG1"]=9 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG1"]=9 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG1"]=9 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG1"]=9 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG1"]=9\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG0"]=10 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG0"]=10 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG0"]=10 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG0"]=10 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG0"]=10\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["DEBUG"]=10 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG"]=10 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG"]=10 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["DEBUG"]=10 =~ ^#+ ]]
+ extracted_markdown+='        ["DEBUG"]=10\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["INFO"]=20 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["INFO"]=20 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["INFO"]=20 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["INFO"]=20 =~ ^#+ ]]
+ extracted_markdown+='        ["INFO"]=20\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["WARNING"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["WARNING"]=30 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["WARNING"]=30 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["WARNING"]=30 =~ ^#+ ]]
+ extracted_markdown+='        ["WARNING"]=30\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["WARN"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["WARN"]=30 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["WARN"]=30 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["WARN"]=30 =~ ^#+ ]]
+ extracted_markdown+='        ["WARN"]=30\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["ERROR"]=40 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["ERROR"]=40 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["ERROR"]=40 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["ERROR"]=40 =~ ^#+ ]]
+ extracted_markdown+='        ["ERROR"]=40\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["CRITICAL"]=50 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["CRITICAL"]=50 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["CRITICAL"]=50 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["CRITICAL"]=50 =~ ^#+ ]]
+ extracted_markdown+='        ["CRITICAL"]=50\n'
+ continue
+ IFS=
+ read -r line
+ [[ #         ["SILENT"]=99 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #         ["SILENT"]=99 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["SILENT"]=99 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #         ["SILENT"]=99 =~ ^#+ ]]
+ extracted_markdown+='        ["SILENT"]=99\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ) =~ ^#+ ]]
+ extracted_markdown+='    )\n'
+ continue
+ IFS=
+ read -r line
+ [[      # Define an associative array for message classes with standard logging levels =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[      # Define an associative array for message classes with standard logging levels =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[      # Define an associative array for message classes with standard logging levels =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[      # Define an associative array for message classes with standard logging levels =~ ^#+ ]]
+ [[      # Define an associative array for message classes with standard logging levels =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      # Define an associative array for message classes with standard logging levels =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='     # Define an associative array for message classes with standard logging levels'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      # Define an associative array for message classes with standard logging levels =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Check if the provided message level exists in the message_class array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the provided message level exists in the message_class array =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Check if the provided message level exists in the message_class array'
+ continue
+ IFS=
+ read -r line
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ -z "${message_class[$message_level]+_}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "($MY_NAME) WARNING: Unknown log level '\''$message_level'\''. Message: $message_out" >&2'
+ continue
+ IFS=
+ read -r line
+ [[         errno_exit 9 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_exit 9 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_exit 9 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        errno_exit 9'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_exit 9 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_exit 9 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2'
+ continue
+ IFS=
+ read -r line
+ [[     # Compare the current debug_level with the message's severity level =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Compare the current debug_level with the message's severity level =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Compare the current debug_level with the message's severity level =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Compare the current debug_level with the message'\''s severity level'
+ continue
+ IFS=
+ read -r line
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Compare the current debug_level with the message's severity level =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Compare the current debug_level with the message's severity level =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ "$debug_level" -le "${message_class[$message_level]}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ ## Initialization =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ ## Initialization =~ ^#.* ]]
+ extracted_markdown+='## Initialization\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^#+ ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}'
+ continue
+ IFS=
+ read -r line
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Determine the real path of the script =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Determine the real path of the script =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Determine the real path of the script =~ ^#+ ]]
+ extracted_markdown+='Determine the real path of the script\n'
+ continue
+ IFS=
+ read -r line
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^#+ ]]
+ extracted_markdown+='Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076\n'
+ continue
+ IFS=
+ read -r line
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^#+ ]]
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced. The SC message is intentional the list is treated like\n'
+ continue
+ IFS=
+ read -r line
+ [[ # string to search for the string in the list/array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # string to search for the string in the list/array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # string to search for the string in the list/array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # string to search for the string in the list/array. =~ ^#+ ]]
+ extracted_markdown+='string to search for the string in the list/array.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # shellcheck disable=SC2076 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2076 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2076 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2076 =~ ^#+ ]]
+ extracted_markdown+='shellcheck disable=SC2076\n'
+ continue
+ IFS=
+ read -r line
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Extract script name, directory, and arguments =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Extract script name, directory, and arguments =~ ^#.* ]]
+ extracted_markdown+='Extract script name, directory, and arguments\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^#+ ]]
+ extracted_markdown+='MY_NAME appears unused. Verify use (or export if used externally).\n'
+ continue
+ IFS=
+ read -r line
+ [[ # shellcheck disable=SC2034 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2034 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2034 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2034 =~ ^#+ ]]
+ extracted_markdown+='shellcheck disable=SC2034\n'
+ continue
+ IFS=
+ read -r line
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^#+ ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='MY_NAME=$(basename "${THIS_SCRIPT}")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#+ ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#+ ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BASE=$(dirname "${__VENV_BIN}")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_ARGS=$* =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#+ ]]
+ [[ __VENV_ARGS=$* =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_ARGS=$* =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_ARGS=$*'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_ARGS=$* =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#+ ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Add internal functions to the __VENV_INTERNAL_FUNCTIONS array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Add internal functions to the __VENV_INTERNAL_FUNCTIONS array. =~ ^#.* ]]
+ extracted_markdown+='Add internal functions to the __VENV_INTERNAL_FUNCTIONS array.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^#+ ]]
+ extracted_markdown+='Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # shellcheck disable=SC2206 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2206 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2206 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2206 =~ ^#+ ]]
+ extracted_markdown+='shellcheck disable=SC2206\n'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#+ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ continue
+ IFS=
+ read -r line
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#+ ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='   ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#+ ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Set default debug level, if not already set. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Set default debug level, if not already set. =~ ^#.* ]]
+ extracted_markdown+='Set default debug level, if not already set.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ debug_level=${debug_level:-30} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^#+ ]]
+ [[ debug_level=${debug_level:-30} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! debug_level=${debug_level:-30} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='debug_level=${debug_level:-30}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Ensure util_funcs.sh is sourced for utility functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Ensure util_funcs.sh is sourced for utility functions =~ ^#.* ]]
+ extracted_markdown+='Ensure util_funcs.sh is sourced for utility functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^#+ ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='if declare -f "source_util_script" >/dev/null 2>&1; then'
+ continue
+ IFS=
+ read -r line
+ [[     source_util_script "util_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     source_util_script "util_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source_util_script "util_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source_util_script "util_funcs" =~ ^#+ ]]
+ [[     source_util_script "util_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     source_util_script "util_funcs" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    source_util_script "util_funcs"'
+ continue
+ IFS=
+ read -r line
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     source_util_script "util_funcs" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^#+ ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     log_message "INFO" "Sourced util_funcs.sh" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    log_message "INFO" "Sourced util_funcs.sh"'
+ continue
+ IFS=
+ read -r line
+ [[ else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ else =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#+ ]]
+ [[ else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=else
+ continue
+ IFS=
+ read -r line
+ [[     # shellcheck source=/dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ else =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     # shellcheck source=/dev/null =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     # shellcheck source=/dev/null =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     # shellcheck source=/dev/null =~ ^#+ ]]
+ [[     # shellcheck source=/dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # shellcheck source=/dev/null =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # shellcheck source=/dev/null'
+ continue
+ IFS=
+ read -r line
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # shellcheck source=/dev/null =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^#+ ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    source "${__VENV_INCLUDE}/util_funcs.sh"'
+ continue
+ IFS=
+ read -r line
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^#+ ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh"'
+ continue
+ IFS=
+ read -r line
+ [[ fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ fi =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#+ ]]
+ [[ fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=fi
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ fi =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __rc__=0 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __rc__=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=__rc__=0
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ write_table_footer bin/shinclude/errno_sh.md
+ local file_path=bin/shinclude/errno_sh.md
+ echo -e '</table></pre>'
+ write_page_footer bin/shinclude/errno_sh.md
+ local file_path=bin/shinclude/errno_sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ for script_path in "${script_files[@]}"
+ local script_name
++ basename bin/shinclude/help_sys.sh
+ script_name=help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys_sh.md
+ log_message INFO 'Generating markdown for script: help_sys.sh'
+ local message_level=INFO
+ shift
+ local 'message_out=Generating markdown for script: help_sys.sh'
+ [[ -z _ ]]
+ '[' 30 -le 20 ']'
+ local in_script_doc=false
+ local in_function_doc=false
+ local script_entry=false
+ local previous_line
+ local extracted_markdown=
+ local function_name=
+ IFS=
+ read -r line
+ [[ #!/bin/bash =~ ^#! ]]
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # # Script: help_sys.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: help_sys.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: help_sys.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: help_sys.sh =~ ^#+ ]]
+ extracted_markdown+='# Script: help_sys.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `help_sys.sh` - Help System Functions for Bash Scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `help_sys.sh` - Help System Functions for Bash Scripts =~ ^#+ ]]
+ extracted_markdown+='`help_sys.sh` - Help System Functions for Bash Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Provides a dynamic help system for all sourced bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides a dynamic help system for all sourced bash scripts. =~ ^#+ ]]
+ extracted_markdown+='  - Provides a dynamic help system for all sourced bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - It can list available functions, provide detailed information about each function, and list sourced scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - It can list available functions, provide detailed information about each function, and list sourced scripts. =~ ^#+ ]]
+ extracted_markdown+='  - It can list available functions, provide detailed information about each function, and list sourced scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Source this script in other bash scripts to enable the dynamic help system. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in other bash scripts to enable the dynamic help system. =~ ^#+ ]]
+ extracted_markdown+='  - Source this script in other bash scripts to enable the dynamic help system.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     source help_sys.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source help_sys.sh =~ ^#+ ]]
+ extracted_markdown+='    source help_sys.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. All input is handled by the individual functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. All input is handled by the individual functions. =~ ^#+ ]]
+ extracted_markdown+='  - None. All input is handled by the individual functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Enables a help system that can be accessed by calling `help` in the terminal. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Enables a help system that can be accessed by calling `help` in the terminal. =~ ^#+ ]]
+ extracted_markdown+='  - Enables a help system that can be accessed by calling `help` in the terminal.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Supports generating Markdown documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Supports generating Markdown documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Supports generating Markdown documentation.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#+ ]]
+ extracted_markdown+='  - Some functions may return specific error codes or print error messages to STDERR.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Refer to individual function documentation for details. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Refer to individual function documentation for details. =~ ^#+ ]]
+ extracted_markdown+='  - Refer to individual function documentation for details.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Environment**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Environment**: =~ ^#+ ]]
+ extracted_markdown+='- **Environment**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that. =~ ^#+ ]]
+ extracted_markdown+='  - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ write_script_doc help_sys.sh bin/shinclude '# Script: help_sys.sh\n`help_sys.sh` - Help System Functions for Bash Scripts\n## Description\n- **Purpose**: \n  - Provides a dynamic help system for all sourced bash scripts.\n  - It can list available functions, provide detailed information about each function, and list sourced scripts.\n- **Usage**: \n  - Source this script in other bash scripts to enable the dynamic help system.\n    ```bash\n    source help_sys.sh\n    ```\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n- **Output**: \n  - Enables a help system that can be accessed by calling `help` in the terminal.\n  - Supports generating Markdown documentation.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n- **Environment**:\n  - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.\n'
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude
+ shift
+ local 'script_markdown=# Script: help_sys.sh\n`help_sys.sh` - Help System Functions for Bash Scripts\n## Description\n- **Purpose**: \n  - Provides a dynamic help system for all sourced bash scripts.\n  - It can list available functions, provide detailed information about each function, and list sourced scripts.\n- **Usage**: \n  - Source this script in other bash scripts to enable the dynamic help system.\n    ```bash\n    source help_sys.sh\n    ```\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n- **Output**: \n  - Enables a help system that can be accessed by calling `help` in the terminal.\n  - Supports generating Markdown documentation.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n- **Environment**:\n  - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.\n'
+ local markdown_file_name=docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
+ local script_readme_file=bin/shinclude/help_sys_sh.md
+ echo -e '# Script: help_sys.sh\n`help_sys.sh` - Help System Functions for Bash Scripts\n## Description\n- **Purpose**: \n  - Provides a dynamic help system for all sourced bash scripts.\n  - It can list available functions, provide detailed information about each function, and list sourced scripts.\n- **Usage**: \n  - Source this script in other bash scripts to enable the dynamic help system.\n    ```bash\n    source help_sys.sh\n    ```\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n- **Output**: \n  - Enables a help system that can be accessed by calling `help` in the terminal.\n  - Supports generating Markdown documentation.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n- **Environment**:\n  - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.\n'
+ echo -e '\n'
+ echo -e '## Function Defniitions\n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
+ local file_path=docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_readme_header help_sys.sh bin/shinclude
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude
+ local script_doc_file=docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
+ local script_readme_file
++ get_script_readme_file help_sys.sh bin/shinclude
++ local script_name=help_sys.sh
++ local script_dir=bin/shinclude
++ local script_readme_file=bin/shinclude/help_sys_sh.md
++ echo bin/shinclude/help_sys_sh.md
+ script_readme_file=bin/shinclude/help_sys_sh.md
+ echo -e '# Functions Defined in Script: help_sys.sh\n'
+ echo -e '\n'
++ script_description help_sys.sh
++ local script_name=help_sys.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/help_sys.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
+++ tail -n 1
++ description='`help_sys.sh` - Help System Functions for Bash Scripts'
++ description='Help System Functions for Bash Scripts'
++ description='Help System Functions for Bash Scripts'
++ echo 'Help System Functions for Bash Scripts'
+ echo -e '### [help_sys.sh](/docs/shdoc/bin/shinclude/scripts/help_sys.sh.md) - Help System Functions for Bash Scripts\n'
+ echo -e '\n'
+ echo -e '## List of Functions Defined:\n'
+ echo -e '\n'
+ printf '<pre><table>\n'
+ write_scripts_readme_entry help_sys.sh bin/shinclude
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude
+ local script_readme_file
++ script_readme_file help_sys.sh bin/shinclude
bash: script_readme_file: command not found
+ script_readme_file=
++ script_description help_sys.sh
++ local script_name=help_sys.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/help_sys.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
+++ tail -n 1
++ description='`help_sys.sh` - Help System Functions for Bash Scripts'
++ description='Help System Functions for Bash Scripts'
++ description='Help System Functions for Bash Scripts'
++ echo 'Help System Functions for Bash Scripts'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' '' help_sys.sh 'Help System Functions for Bash Scripts'
++ get_scripts_readme_file ''
++ local readme_dir=
++ local scripts_readme_file=docs/shdoc/README.md
++ echo docs/shdoc/README.md
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Determine the real path of the script =~ ^#.* ]]
+ extracted_markdown+='Determine the real path of the script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Extract script name, directory, and arguments =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Extract script name, directory, and arguments =~ ^#.* ]]
+ extracted_markdown+='Extract script name, directory, and arguments\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ declare -g __VENV_BIN =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_BIN =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_BIN =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_BIN =~ ^#+ ]]
+ [[ declare -g __VENV_BIN =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g __VENV_BIN =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g __VENV_BIN'
+ continue
+ IFS=
+ read -r line
+ [[ declare -g __VENV_BASE =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g __VENV_BIN =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_BASE =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_BASE =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_BASE =~ ^#+ ]]
+ [[ declare -g __VENV_BASE =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g __VENV_BASE =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g __VENV_BASE'
+ continue
+ IFS=
+ read -r line
+ [[ declare -g __VENV_ARGS=$* =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g __VENV_BASE =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_ARGS=$* =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g __VENV_ARGS=$* =~ ^#+ ]]
+ [[ declare -g __VENV_ARGS=$* =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g __VENV_ARGS=$* =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g __VENV_ARGS=$*'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g __VENV_ARGS=$* =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#+ ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#+ ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BASE=$(dirname "${__VENV_BIN}")'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Help System Initialization =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Help System Initialization =~ ^#.* ]]
+ extracted_markdown+='Help System Initialization\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Use an environment variable for markdown processor, defaulting to 'glow' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Use an environment variable for markdown processor, defaulting to 'glow' =~ ^#.* ]]
+ extracted_markdown+='Use an environment variable for markdown processor, defaulting to '\''glow'\''\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^#+ ]]
+ [[ declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#.* ]]
+ extracted_markdown+='Define an array of internal functions to exclude from help and documentation\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ declare -g -a __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g -a __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -a __VENV_INTERNAL_FUNCTIONS=( =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -a __VENV_INTERNAL_FUNCTIONS=( =~ ^#+ ]]
+ [[ declare -g -a __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -a __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g -a __VENV_INTERNAL_FUNCTIONS=('
+ continue
+ IFS=
+ read -r line
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -a __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#+ ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ [[     "init_help_system" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "init_help_system" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "init_help_system" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "init_help_system" =~ ^#+ ]]
+ [[     "init_help_system" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "init_help_system" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "init_help_system"'
+ continue
+ IFS=
+ read -r line
+ [[     "general_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "init_help_system" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "general_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "general_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "general_help" =~ ^#+ ]]
+ [[     "general_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "general_help" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "general_help"'
+ continue
+ IFS=
+ read -r line
+ [[     "specific_script_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "general_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "specific_script_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_script_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_script_help" =~ ^#+ ]]
+ [[     "specific_script_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "specific_script_help" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "specific_script_help"'
+ continue
+ IFS=
+ read -r line
+ [[     "specific_function_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "specific_script_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "specific_function_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_function_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_function_help" =~ ^#+ ]]
+ [[     "specific_function_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "specific_function_help" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "specific_function_help"'
+ continue
+ IFS=
+ read -r line
+ [[     "help_functions" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "specific_function_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "help_functions" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "help_functions" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "help_functions" =~ ^#+ ]]
+ [[     "help_functions" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "help_functions" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "help_functions"'
+ continue
+ IFS=
+ read -r line
+ [[     "do_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "help_functions" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "do_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "do_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "do_help" =~ ^#+ ]]
+ [[     "do_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "do_help" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "do_help"'
+ continue
+ IFS=
+ read -r line
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "do_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#+ ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Initialize associative arrays to store function names and their corresponding documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize associative arrays to store function names and their corresponding documentation =~ ^#.* ]]
+ extracted_markdown+='Initialize associative arrays to store function names and their corresponding documentation\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^#+ ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -A __VENV_FUNCTIONS =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g -A __VENV_FUNCTIONS'
+ continue
+ IFS=
+ read -r line
+ [[ declare -g -A __VENV_SCRIPTS =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^#+ ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -A __VENV_SCRIPTS =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g -A __VENV_SCRIPTS'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Initialize arrays to store sorted names for functions and scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize arrays to store sorted names for functions and scripts =~ ^#.* ]]
+ extracted_markdown+='Initialize arrays to store sorted names for functions and scripts\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ declare -g -a sorted_function_names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g -a sorted_function_names =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -a sorted_function_names =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -a sorted_function_names =~ ^#+ ]]
+ [[ declare -g -a sorted_function_names =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -a sorted_function_names =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g -a sorted_function_names'
+ continue
+ IFS=
+ read -r line
+ [[ declare -g -a sorted_script_names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -a sorted_function_names =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g -a sorted_script_names =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -a sorted_script_names =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -a sorted_script_names =~ ^#+ ]]
+ [[ declare -g -a sorted_script_names =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -a sorted_script_names =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g -a sorted_script_names'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -a sorted_script_names =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Initialize variables to store the length of the longest script and function names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize variables to store the length of the longest script and function names =~ ^#.* ]]
+ extracted_markdown+='Initialize variables to store the length of the longest script and function names\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ declare -g longest_script_name=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g longest_script_name=0 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_script_name=0 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_script_name=0 =~ ^#+ ]]
+ [[ declare -g longest_script_name=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g longest_script_name=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g longest_script_name=0'
+ continue
+ IFS=
+ read -r line
+ [[ declare -g longest_function_name=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g longest_script_name=0 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g longest_function_name=0 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_function_name=0 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_function_name=0 =~ ^#+ ]]
+ [[ declare -g longest_function_name=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g longest_function_name=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='declare -g longest_function_name=0'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g longest_function_name=0 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: process_scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: process_scripts =~ ^#.* ]]
+ extracted_markdown+='# Function: process_scripts\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^#+ ]]
+ extracted_markdown+=' `process_scripts` - Process scripts in a given directory.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Process scripts in a given directory, extracting function names and documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `process_scripts <dir_name>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `process_scripts <dir_name>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `process_scripts <dir_name>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `process_scripts <dir_name>` =~ ^#+ ]]
+ extracted_markdown+='  - `process_scripts <dir_name>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^#+ ]]
+ extracted_markdown+='  - `dir_name`: The name of the directory to process.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^#+ ]]
+ extracted_markdown+='  - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ process_scripts() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ process_scripts() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ process_scripts() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ process_scripts() { =~ ^#+ ]]
+ [[ process_scripts() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=process_scripts
+ function_name=process_scripts
+ write_function_doc process_scripts help_sys.sh bin/shinclude/help_sys.sh '# Function: process_scripts\n `process_scripts` - Process scripts in a given directory.\n## Description\n- **Purpose**:\n  - Process scripts in a given directory, extracting function names and documentation.\n- **Usage**: \n  - `process_scripts <dir_name>`\n- **Input Parameters**: \n  - `dir_name`: The name of the directory to process.\n- **Output**: \n  - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.\n- **Exceptions**: \n  - None\n'
+ local function_name=process_scripts
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: process_scripts\n `process_scripts` - Process scripts in a given directory.\n## Description\n- **Purpose**:\n  - Process scripts in a given directory, extracting function names and documentation.\n- **Usage**: \n  - `process_scripts <dir_name>`\n- **Input Parameters**: \n  - `dir_name`: The name of the directory to process.\n- **Output**: \n  - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/process_scripts.md
+ echo -e '## process_scripts'
+ echo -e '# Function: process_scripts\n `process_scripts` - Process scripts in a given directory.\n## Description\n- **Purpose**:\n  - Process scripts in a given directory, extracting function names and documentation.\n- **Usage**: \n  - `process_scripts <dir_name>`\n- **Input Parameters**: \n  - `dir_name`: The name of the directory to process.\n- **Output**: \n  - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/process_scripts.md
+ local file_path=docs/shdoc/bin/shinclude/functions/process_scripts.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry process_scripts help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=process_scripts
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/process_scripts.md
++ function_description process_scripts
++ local function_name=process_scripts
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/process_scripts.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/process_scripts.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/process_scripts.md
+++ tail -n 1
++ description=' `process_scripts` - Process scripts in a given directory.'
++ description='Process scripts in a given directory.'
++ description='Process scripts in a given directory.'
++ echo 'Process scripts in a given directory.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' process_scripts docs/shdoc/bin/shinclude/functions/process_scripts.md 'Process scripts in a given directory.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     cd ${__VENV_BASE} || errno_exit ENOENT =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     cd ${__VENV_BASE} || errno_exit ENOENT =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd ${__VENV_BASE} || errno_exit ENOENT =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cd ${__VENV_BASE} || errno_exit ENOENT =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cd ${__VENV_BASE} || errno_exit ENOENT'
+ continue
+ IFS=
+ read -r line
+ [[     local dir_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd ${__VENV_BASE} || errno_exit ENOENT =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cd ${__VENV_BASE} || errno_exit ENOENT =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local dir_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local dir_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local dir_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local script_dir="${dir_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local dir_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local dir_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="${dir_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="${dir_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_dir="${dir_name}"'
+ continue
+ IFS=
+ read -r line
+ [[     local scripts_docs_dir="docs/shdoc/${dir_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="${dir_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="${dir_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local scripts_docs_dir="docs/shdoc/${dir_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local scripts_docs_dir="docs/shdoc/${dir_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local scripts_docs_dir="docs/shdoc/${dir_name}"'
+ continue
+ IFS=
+ read -r line
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local scripts_docs_dir="docs/shdoc/${dir_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local scripts_docs_dir="docs/shdoc/${dir_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    readarray -t script_files < <(find "$script_dir" -type f -name "*.sh")'
+ continue
+ IFS=
+ read -r line
+ [[     for script in "${script_files[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${script_files[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for script in "${script_files[@]}"; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for script in "${script_files[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ [[         local script_name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${script_files[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for script in "${script_files[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_name =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local script_name =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local script_name'
+ continue
+ IFS=
+ read -r line
+ [[         script_name="$(basename "$script")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_name =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local script_name =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         script_name="$(basename "$script")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         script_name="$(basename "$script")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        script_name="$(basename "$script")"'
+ continue
+ IFS=
+ read -r line
+ [[         local markdown_file="${scripts_docs_dir}/scripts/${script_name}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         script_name="$(basename "$script")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         script_name="$(basename "$script")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${scripts_docs_dir}/scripts/${script_name}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local markdown_file="${scripts_docs_dir}/scripts/${script_name}.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local markdown_file="${scripts_docs_dir}/scripts/${script_name}.md"'
+ continue
+ IFS=
+ read -r line
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${scripts_docs_dir}/scripts/${script_name}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local markdown_file="${scripts_docs_dir}/scripts/${script_name}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __VENV_SCRIPTS["$script_name"]="$markdown_file"'
+ continue
+ IFS=
+ read -r line
+ [[         sorted_script_names+=("$script_name") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         sorted_script_names+=("$script_name") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         sorted_script_names+=("$script_name") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        sorted_script_names+=("$script_name")'
+ continue
+ IFS=
+ read -r line
+ [[          =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         sorted_script_names+=("$script_name") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         sorted_script_names+=("$script_name") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !          =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        '
+ continue
+ IFS=
+ read -r line
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^}$ ]]
+ [[ false == false ]]
+ [[          =~ ^[[:space:]]*$ ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [[ ${#script_name} -gt $longest_script_name ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[             longest_script_name=${#script_name} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             longest_script_name=${#script_name} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             longest_script_name=${#script_name} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            longest_script_name=${#script_name}'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             longest_script_name=${#script_name} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             longest_script_name=${#script_name} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[          =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !          =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        '
+ continue
+ IFS=
+ read -r line
+ [[         while IFS= read -r line; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^}$ ]]
+ [[ false == false ]]
+ [[          =~ ^[[:space:]]*$ ]]
+ [[         while IFS= read -r line; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while IFS= read -r line; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         while IFS= read -r line; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        while IFS= read -r line; do'
+ continue
+ IFS=
+ read -r line
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while IFS= read -r line; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[         while IFS= read -r line; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                 # Reading function name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reading function name =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Reading function name =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Reading function name'
+ continue
+ IFS=
+ read -r line
+ [[                 function="${line%%(*}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reading function name =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Reading function name =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${line%%(*}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 function="${line%%(*}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                function="${line%%(*}"'
+ continue
+ IFS=
+ read -r line
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${line%%(*}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 function="${line%%(*}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                function="${function/#function /}"  # Remove '\''function '\'' prefix if exists'
+ continue
+ IFS=
+ read -r line
+ [[                 # Correct the function markdown path =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct the function markdown path =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Correct the function markdown path =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Correct the function markdown path'
+ continue
+ IFS=
+ read -r line
+ [[                 local function_markdown_path="${scripts_docs_dir}/functions/${function}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct the function markdown path =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Correct the function markdown path =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 local function_markdown_path="${scripts_docs_dir}/functions/${function}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 local function_markdown_path="${scripts_docs_dir}/functions/${function}.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                local function_markdown_path="${scripts_docs_dir}/functions/${function}.md"'
+ continue
+ IFS=
+ read -r line
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 local function_markdown_path="${scripts_docs_dir}/functions/${function}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 local function_markdown_path="${scripts_docs_dir}/functions/${function}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                __VENV_FUNCTIONS["$function"]="$function_markdown_path"'
+ continue
+ IFS=
+ read -r line
+ [[                 sorted_function_names+=("$function") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 sorted_function_names+=("$function") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 sorted_function_names+=("$function") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                sorted_function_names+=("$function")'
+ continue
+ IFS=
+ read -r line
+ [[                  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 sorted_function_names+=("$function") =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 sorted_function_names+=("$function") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                  =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                '
+ continue
+ IFS=
+ read -r line
+ [[                 # Update longest function name length =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^}$ ]]
+ [[ false == false ]]
+ [[                  =~ ^[[:space:]]*$ ]]
+ [[                 # Update longest function name length =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Update longest function name length =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Update longest function name length =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Update longest function name length'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Update longest function name length =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Update longest function name length =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ ${#function} -gt $longest_function_name ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     longest_function_name=${#function} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     longest_function_name=${#function} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     longest_function_name=${#function} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    longest_function_name=${#function}'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     longest_function_name=${#function} =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     longest_function_name=${#function} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[             fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            fi'
+ continue
+ IFS=
+ read -r line
+ [[         done < "$script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[             fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done < "$script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         done < "$script" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        done < "$script"'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done < "$script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         done < "$script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     cd - =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     cd - =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd - =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cd - =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cd -'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd - =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cd - =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # function: init_help_system =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # function: init_help_system =~ ^#.* ]]
+ extracted_markdown+='# function: init_help_system\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `init_help_system` - Initialize the help system by populating function and script documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `init_help_system` - Initialize the help system by populating function and script documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `init_help_system` - Initialize the help system by populating function and script documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `init_help_system` - Initialize the help system by populating function and script documentation. =~ ^#+ ]]
+ extracted_markdown+=' `init_help_system` - Initialize the help system by populating function and script documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^#+ ]]
+ extracted_markdown+='  - Automatically called when the script is sourced. No need to call it manually.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^#+ ]]
+ extracted_markdown+='  - Global. Modifies the global array `__VENV_FUNCTIONS`.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^#+ ]]
+ extracted_markdown+='  - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^#+ ]]
+ extracted_markdown+='  - Sorts `__VENV_FUNCTIONS` based on function names.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ init_help_system() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ init_help_system() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ init_help_system() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ init_help_system() { =~ ^#+ ]]
+ [[ init_help_system() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=init_help_system
+ function_name=init_help_system
+ write_function_doc init_help_system help_sys.sh bin/shinclude/help_sys.sh '# function: init_help_system\n `init_help_system` - Initialize the help system by populating function and script documentation.\n## Description\n- **Purpose**:\n  - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.\n- **Usage**: \n  - Automatically called when the script is sourced. No need to call it manually.\n- **Scope**:\n  - Global. Modifies the global array `__VENV_FUNCTIONS`.\n- **Input Parameters**: \n  - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.\n- **Output**: \n  - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.\n  - Sorts `__VENV_FUNCTIONS` based on function names.\n- **Exceptions**: \n  - None\n'
+ local function_name=init_help_system
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# function: init_help_system\n `init_help_system` - Initialize the help system by populating function and script documentation.\n## Description\n- **Purpose**:\n  - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.\n- **Usage**: \n  - Automatically called when the script is sourced. No need to call it manually.\n- **Scope**:\n  - Global. Modifies the global array `__VENV_FUNCTIONS`.\n- **Input Parameters**: \n  - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.\n- **Output**: \n  - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.\n  - Sorts `__VENV_FUNCTIONS` based on function names.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/init_help_system.md
+ echo -e '## init_help_system'
+ echo -e '# function: init_help_system\n `init_help_system` - Initialize the help system by populating function and script documentation.\n## Description\n- **Purpose**:\n  - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.\n- **Usage**: \n  - Automatically called when the script is sourced. No need to call it manually.\n- **Scope**:\n  - Global. Modifies the global array `__VENV_FUNCTIONS`.\n- **Input Parameters**: \n  - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.\n- **Output**: \n  - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.\n  - Sorts `__VENV_FUNCTIONS` based on function names.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/init_help_system.md
+ local file_path=docs/shdoc/bin/shinclude/functions/init_help_system.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry init_help_system help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=init_help_system
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/init_help_system.md
++ function_description init_help_system
++ local function_name=init_help_system
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/init_help_system.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/init_help_system.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/init_help_system.md
+++ tail -n 1
++ description=' `init_help_system` - Initialize the help system by populating function and script documentation.'
++ description='Initialize the help system by populating function and script documentation.'
++ description='Initialize the help system by populating function and script documentation.'
++ echo 'Initialize the help system by populating function and script documentation.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' init_help_system docs/shdoc/bin/shinclude/functions/init_help_system.md 'Initialize the help system by populating function and script documentation.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     cd "${__VENV_BASE}" || errno_exit ENOENT =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     cd "${__VENV_BASE}" || errno_exit ENOENT =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd "${__VENV_BASE}" || errno_exit ENOENT =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cd "${__VENV_BASE}" || errno_exit ENOENT =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cd "${__VENV_BASE}" || errno_exit ENOENT'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd "${__VENV_BASE}" || errno_exit ENOENT =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cd "${__VENV_BASE}" || errno_exit ENOENT =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    [ -n "${__VENV_FUNCTIONS[*]}" ] && return'
+ continue
+ IFS=
+ read -r line
+ [[     local conf_file="conf/help_sys.conf" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="conf/help_sys.conf" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local conf_file="conf/help_sys.conf" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local conf_file="conf/help_sys.conf"'
+ continue
+ IFS=
+ read -r line
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="conf/help_sys.conf" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local conf_file="conf/help_sys.conf" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    readarray -t search_dirs < <(grep -v '\''^#'\'' "$conf_file" | sed '\''/^$/d'\'')'
+ continue
+ IFS=
+ read -r line
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for dir_name in "${search_dirs[@]}"; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for dir_name in "${search_dirs[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ [[         process_scripts "$dir_name" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         process_scripts "$dir_name" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         process_scripts "$dir_name" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        process_scripts "$dir_name"'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         process_scripts "$dir_name" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         process_scripts "$dir_name" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[     # Sort names for alphabetical order =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Sort names for alphabetical order =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Sort names for alphabetical order =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Sort names for alphabetical order'
+ continue
+ IFS=
+ read -r line
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Sort names for alphabetical order =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Sort names for alphabetical order =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_function_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    readarray -t sorted_function_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     cd - =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     cd - =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd - =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cd - =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cd -'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd - =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cd - =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # function: script_descruption =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # function: script_descruption =~ ^#.* ]]
+ extracted_markdown+='# function: script_descruption\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `script_description` - Get the description of a script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `script_description` - Get the description of a script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `script_description` - Get the description of a script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `script_description` - Get the description of a script. =~ ^#+ ]]
+ extracted_markdown+=' `script_description` - Get the description of a script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Retrieves the description of a script from its documentation file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the description of a script from its documentation file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the description of a script from its documentation file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the description of a script from its documentation file. =~ ^#+ ]]
+ extracted_markdown+='  - Retrieves the description of a script from its documentation file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_description <script_name>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_description <script_name>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_description <script_name>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_description <script_name>` =~ ^#+ ]]
+ extracted_markdown+='  - `script_description <script_name>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_name`: The name of the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script. =~ ^#+ ]]
+ extracted_markdown+='  - `script_name`: The name of the script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the description of the script as a string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the script as a string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the script as a string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the script as a string. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the description of the script as a string.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ script_description() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ script_description() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ script_description() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ script_description() { =~ ^#+ ]]
+ [[ script_description() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=script_description
+ function_name=script_description
+ write_function_doc script_description help_sys.sh bin/shinclude/help_sys.sh '# function: script_descruption\n `script_description` - Get the description of a script.\n## Description\n- **Purpose**:\n  - Retrieves the description of a script from its documentation file.\n- **Usage**: \n  - `script_description <script_name>`\n- **Input Parameters**: \n  - `script_name`: The name of the script.\n- **Output**: \n  - Returns the description of the script as a string.\n- **Exceptions**: \n  - None\n'
+ local function_name=script_description
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# function: script_descruption\n `script_description` - Get the description of a script.\n## Description\n- **Purpose**:\n  - Retrieves the description of a script from its documentation file.\n- **Usage**: \n  - `script_description <script_name>`\n- **Input Parameters**: \n  - `script_name`: The name of the script.\n- **Output**: \n  - Returns the description of the script as a string.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/script_description.md
+ echo -e '## script_description'
+ echo -e '# function: script_descruption\n `script_description` - Get the description of a script.\n## Description\n- **Purpose**:\n  - Retrieves the description of a script from its documentation file.\n- **Usage**: \n  - `script_description <script_name>`\n- **Input Parameters**: \n  - `script_name`: The name of the script.\n- **Output**: \n  - Returns the description of the script as a string.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/script_description.md
+ local file_path=docs/shdoc/bin/shinclude/functions/script_description.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry script_description help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=script_description
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/script_description.md
++ function_description script_description
++ local function_name=script_description
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/script_description.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/script_description.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/script_description.md
+++ tail -n 1
++ description=' `script_description` - Get the description of a script.'
++ description='Get the description of a script.'
++ description='Get the description of a script.'
++ echo 'Get the description of a script.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' script_description docs/shdoc/bin/shinclude/functions/script_description.md 'Get the description of a script.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local doc_file="${__VENV_SCRIPTS[$script_name]}"'
+ continue
+ IFS=
+ read -r line
+ [[     local description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local description =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local description'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local description =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [[ -f "$doc_file" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -f "$doc_file" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ -f "$doc_file" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         description=$(head -n 2 "$doc_file" | tail -n 1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description=$(head -n 2 "$doc_file" | tail -n 1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         description=$(head -n 2 "$doc_file" | tail -n 1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        description=$(head -n 2 "$doc_file" | tail -n 1)'
+ continue
+ IFS=
+ read -r line
+ [[         description="${description#*- }" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description=$(head -n 2 "$doc_file" | tail -n 1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         description=$(head -n 2 "$doc_file" | tail -n 1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description="${description#*- }" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         description="${description#*- }" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        description="${description#*- }"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description="${description#*- }" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         description="${description#*- }" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     description="${description:-"No description available"}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     description="${description:-"No description available"}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description:-"No description available"}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     description="${description:-"No description available"}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    description="${description:-"No description available"}"'
+ continue
+ IFS=
+ read -r line
+ [[     echo "${description}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description:-"No description available"}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     description="${description:-"No description available"}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${description}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${description}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${description}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${description}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${description}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: function_description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: function_description =~ ^#.* ]]
+ extracted_markdown+='# Function: function_description\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `function_description` - Get the description of a function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `function_description` - Get the description of a function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `function_description` - Get the description of a function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `function_description` - Get the description of a function. =~ ^#+ ]]
+ extracted_markdown+=' `function_description` - Get the description of a function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Retrieves the description of a function from its documentation file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the description of a function from its documentation file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the description of a function from its documentation file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the description of a function from its documentation file. =~ ^#+ ]]
+ extracted_markdown+='  - Retrieves the description of a function from its documentation file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `function_description <function_name>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_description <function_name>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_description <function_name>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_description <function_name>` =~ ^#+ ]]
+ extracted_markdown+='  - `function_description <function_name>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `function_name`: The name of the function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function. =~ ^#+ ]]
+ extracted_markdown+='  - `function_name`: The name of the function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the description of the function as a string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the function as a string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the function as a string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the function as a string. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the description of the function as a string.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ function_description() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ function_description() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ function_description() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ function_description() { =~ ^#+ ]]
+ [[ function_description() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=function_description
+ function_name=function_description
+ write_function_doc function_description help_sys.sh bin/shinclude/help_sys.sh '# Function: function_description\n `function_description` - Get the description of a function.\n## Description\n- **Purpose**:\n  - Retrieves the description of a function from its documentation file.\n- **Usage**: \n  - `function_description <function_name>`\n- **Input Parameters**: \n  - `function_name`: The name of the function.\n- **Output**: \n  - Returns the description of the function as a string.\n- **Exceptions**: \n  - None\n'
+ local function_name=function_description
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: function_description\n `function_description` - Get the description of a function.\n## Description\n- **Purpose**:\n  - Retrieves the description of a function from its documentation file.\n- **Usage**: \n  - `function_description <function_name>`\n- **Input Parameters**: \n  - `function_name`: The name of the function.\n- **Output**: \n  - Returns the description of the function as a string.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/function_description.md
+ echo -e '## function_description'
+ echo -e '# Function: function_description\n `function_description` - Get the description of a function.\n## Description\n- **Purpose**:\n  - Retrieves the description of a function from its documentation file.\n- **Usage**: \n  - `function_description <function_name>`\n- **Input Parameters**: \n  - `function_name`: The name of the function.\n- **Output**: \n  - Returns the description of the function as a string.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/function_description.md
+ local file_path=docs/shdoc/bin/shinclude/functions/function_description.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry function_description help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=function_description
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/function_description.md
++ function_description function_description
++ local function_name=function_description
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/function_description.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/function_description.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/function_description.md
+++ tail -n 1
++ description=' `function_description` - Get the description of a function.'
++ description='Get the description of a function.'
++ description='Get the description of a function.'
++ echo 'Get the description of a function.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' function_description docs/shdoc/bin/shinclude/functions/function_description.md 'Get the description of a function.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local function_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local function_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local function_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local function_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local doc_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$function_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local function_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local doc_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$function_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local doc_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$function_name]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local doc_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$function_name]}"'
+ continue
+ IFS=
+ read -r line
+ [[     local description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local doc_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$function_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local doc_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$function_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local description =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local description'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local description =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [[ -f "$doc_file" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -f "$doc_file" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ -f "$doc_file" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         description=$(head -n 3 "$doc_file" | tail -n 1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -f "$doc_file" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description=$(head -n 3 "$doc_file" | tail -n 1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         description=$(head -n 3 "$doc_file" | tail -n 1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        description=$(head -n 3 "$doc_file" | tail -n 1)'
+ continue
+ IFS=
+ read -r line
+ [[         description="${description#*- }" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description=$(head -n 3 "$doc_file" | tail -n 1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         description=$(head -n 3 "$doc_file" | tail -n 1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description="${description#*- }" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         description="${description#*- }" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        description="${description#*- }"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         description="${description#*- }" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         description="${description#*- }" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     description="${description:-"No description available"}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     description="${description:-"No description available"}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description:-"No description available"}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     description="${description:-"No description available"}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    description="${description:-"No description available"}"'
+ continue
+ IFS=
+ read -r line
+ [[     echo "${description}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description:-"No description available"}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     description="${description:-"No description available"}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${description}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${description}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${description}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${description}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${description}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: get_scripts_readme_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: get_scripts_readme_file =~ ^#.* ]]
+ extracted_markdown+='# Function: get_scripts_readme_file\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `get_scripts_readme_file` - Get the path to the README file for scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `get_scripts_readme_file` - Get the path to the README file for scripts. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `get_scripts_readme_file` - Get the path to the README file for scripts. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `get_scripts_readme_file` - Get the path to the README file for scripts. =~ ^#+ ]]
+ extracted_markdown+=' `get_scripts_readme_file` - Get the path to the README file for scripts.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Retrieves the path to the README file for scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the path to the README file for scripts. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the path to the README file for scripts. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the path to the README file for scripts. =~ ^#+ ]]
+ extracted_markdown+='  - Retrieves the path to the README file for scripts.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `get_scripts_readme_file` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `get_scripts_readme_file` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_scripts_readme_file` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_scripts_readme_file` =~ ^#+ ]]
+ extracted_markdown+='  - `get_scripts_readme_file`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the path to the README file for scripts as a string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the path to the README file for scripts as a string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the path to the README file for scripts as a string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the path to the README file for scripts as a string. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the path to the README file for scripts as a string.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ get_scripts_readme_file() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ get_scripts_readme_file() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_scripts_readme_file() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_scripts_readme_file() { =~ ^#+ ]]
+ [[ get_scripts_readme_file() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=get_scripts_readme_file
+ function_name=get_scripts_readme_file
+ write_function_doc get_scripts_readme_file help_sys.sh bin/shinclude/help_sys.sh '# Function: get_scripts_readme_file\n `get_scripts_readme_file` - Get the path to the README file for scripts.\n## Description\n- **Purpose**:\n  - Retrieves the path to the README file for scripts.\n- **Usage**: \n  - `get_scripts_readme_file`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Returns the path to the README file for scripts as a string.\n- **Exceptions**: \n  - None\n'
+ local function_name=get_scripts_readme_file
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: get_scripts_readme_file\n `get_scripts_readme_file` - Get the path to the README file for scripts.\n## Description\n- **Purpose**:\n  - Retrieves the path to the README file for scripts.\n- **Usage**: \n  - `get_scripts_readme_file`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Returns the path to the README file for scripts as a string.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md
+ echo -e '## get_scripts_readme_file'
+ echo -e '# Function: get_scripts_readme_file\n `get_scripts_readme_file` - Get the path to the README file for scripts.\n## Description\n- **Purpose**:\n  - Retrieves the path to the README file for scripts.\n- **Usage**: \n  - `get_scripts_readme_file`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Returns the path to the README file for scripts as a string.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md
+ local file_path=docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry get_scripts_readme_file help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=get_scripts_readme_file
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md
++ function_description get_scripts_readme_file
++ local function_name=get_scripts_readme_file
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md
+++ tail -n 1
++ description=' `get_scripts_readme_file` - Get the path to the README file for scripts.'
++ description='Get the path to the README file for scripts.'
++ description='Get the path to the README file for scripts.'
++ echo 'Get the path to the README file for scripts.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' get_scripts_readme_file docs/shdoc/bin/shinclude/functions/get_scripts_readme_file.md 'Get the path to the README file for scripts.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local readme_dir="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local readme_dir="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_dir="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local readme_dir="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local readme_dir="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local scripts_readme_file="${readme_dir:-"docs/shdoc"}/README.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_dir="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local readme_dir="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local scripts_readme_file="${readme_dir:-"docs/shdoc"}/README.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local scripts_readme_file="${readme_dir:-"docs/shdoc"}/README.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local scripts_readme_file="${readme_dir:-"docs/shdoc"}/README.md"'
+ continue
+ IFS=
+ read -r line
+ [[     echo "${scripts_readme_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local scripts_readme_file="${readme_dir:-"docs/shdoc"}/README.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local scripts_readme_file="${readme_dir:-"docs/shdoc"}/README.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${scripts_readme_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${scripts_readme_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${scripts_readme_file}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${scripts_readme_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${scripts_readme_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: get_script_readme_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: get_script_readme_file =~ ^#.* ]]
+ extracted_markdown+='# Function: get_script_readme_file\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `get_script_readme_file` - Get the path to the README file for a script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `get_script_readme_file` - Get the path to the README file for a script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `get_script_readme_file` - Get the path to the README file for a script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `get_script_readme_file` - Get the path to the README file for a script. =~ ^#+ ]]
+ extracted_markdown+=' `get_script_readme_file` - Get the path to the README file for a script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Retrieves the path to the README file for a script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the path to the README file for a script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the path to the README file for a script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the path to the README file for a script. =~ ^#+ ]]
+ extracted_markdown+='  - Retrieves the path to the README file for a script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `get_script_readme_file <script_name> <script_dir>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `get_script_readme_file <script_name> <script_dir>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_script_readme_file <script_name> <script_dir>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_script_readme_file <script_name> <script_dir>` =~ ^#+ ]]
+ extracted_markdown+='  - `get_script_readme_file <script_name> <script_dir>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_name`: The name of the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script. =~ ^#+ ]]
+ extracted_markdown+='  - `script_name`: The name of the script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_dir`: The directory containing the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_dir`: The directory containing the script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_dir`: The directory containing the script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_dir`: The directory containing the script. =~ ^#+ ]]
+ extracted_markdown+='  - `script_dir`: The directory containing the script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the path to the README file for the script as a string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the path to the README file for the script as a string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the path to the README file for the script as a string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the path to the README file for the script as a string. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the path to the README file for the script as a string.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ get_script_readme_file() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ get_script_readme_file() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_script_readme_file() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_script_readme_file() { =~ ^#+ ]]
+ [[ get_script_readme_file() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=get_script_readme_file
+ function_name=get_script_readme_file
+ write_function_doc get_script_readme_file help_sys.sh bin/shinclude/help_sys.sh '# Function: get_script_readme_file\n `get_script_readme_file` - Get the path to the README file for a script.\n## Description\n- **Purpose**:\n  - Retrieves the path to the README file for a script.\n- **Usage**: \n  - `get_script_readme_file <script_name> <script_dir>`\n- **Input Parameters**: \n  - `script_name`: The name of the script.\n  - `script_dir`: The directory containing the script.\n- **Output**: \n  - Returns the path to the README file for the script as a string.\n- **Exceptions**: \n  - None\n'
+ local function_name=get_script_readme_file
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: get_script_readme_file\n `get_script_readme_file` - Get the path to the README file for a script.\n## Description\n- **Purpose**:\n  - Retrieves the path to the README file for a script.\n- **Usage**: \n  - `get_script_readme_file <script_name> <script_dir>`\n- **Input Parameters**: \n  - `script_name`: The name of the script.\n  - `script_dir`: The directory containing the script.\n- **Output**: \n  - Returns the path to the README file for the script as a string.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/get_script_readme_file.md
+ echo -e '## get_script_readme_file'
+ echo -e '# Function: get_script_readme_file\n `get_script_readme_file` - Get the path to the README file for a script.\n## Description\n- **Purpose**:\n  - Retrieves the path to the README file for a script.\n- **Usage**: \n  - `get_script_readme_file <script_name> <script_dir>`\n- **Input Parameters**: \n  - `script_name`: The name of the script.\n  - `script_dir`: The directory containing the script.\n- **Output**: \n  - Returns the path to the README file for the script as a string.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/get_script_readme_file.md
+ local file_path=docs/shdoc/bin/shinclude/functions/get_script_readme_file.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry get_script_readme_file help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=get_script_readme_file
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/get_script_readme_file.md
++ function_description get_script_readme_file
++ local function_name=get_script_readme_file
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_script_readme_file.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_script_readme_file.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_script_readme_file.md
+++ tail -n 1
++ description=' `get_script_readme_file` - Get the path to the README file for a script.'
++ description='Get the path to the README file for a script.'
++ description='Get the path to the README file for a script.'
++ echo 'Get the path to the README file for a script.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' get_script_readme_file docs/shdoc/bin/shinclude/functions/get_script_readme_file.md 'Get the path to the README file for a script.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local script_dir="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="$2" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_dir="$2"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_readme_file="${script_dir}/${script_name//./_}.md"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "${script_readme_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "${script_readme_file}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${script_readme_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${script_readme_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${script_readme_file}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${script_readme_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${script_readme_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # function: write_scripts_readme_header =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # function: write_scripts_readme_header =~ ^#.* ]]
+ extracted_markdown+='# function: write_scripts_readme_header\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_scripts_readme_header` - Writes the header section of the README. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_scripts_readme_header` - Writes the header section of the README. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_scripts_readme_header` - Writes the header section of the README. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_scripts_readme_header` - Writes the header section of the README. =~ ^#+ ]]
+ extracted_markdown+=' `write_scripts_readme_header` - Writes the header section of the README.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Creates the initial header content for the README documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates the initial header content for the README documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates the initial header content for the README documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates the initial header content for the README documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Creates the initial header content for the README documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_scripts_readme_header <file_path>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_scripts_readme_header <file_path>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_scripts_readme_header <file_path>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_scripts_readme_header <file_path>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_scripts_readme_header <file_path>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `file_path`: The path to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^#+ ]]
+ extracted_markdown+='  - `file_path`: The path to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Writes the header content to the specified README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Writes the header content to the specified README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the header content to the specified README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the header content to the specified README file. =~ ^#+ ]]
+ extracted_markdown+='  - Writes the header content to the specified README file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_scripts_readme_header() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_scripts_readme_header() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_scripts_readme_header() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_scripts_readme_header() { =~ ^#+ ]]
+ [[ write_scripts_readme_header() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_scripts_readme_header
+ function_name=write_scripts_readme_header
+ write_function_doc write_scripts_readme_header help_sys.sh bin/shinclude/help_sys.sh '# function: write_scripts_readme_header\n `write_scripts_readme_header` - Writes the header section of the README.\n## Description\n- **Purpose**:\n  - Creates the initial header content for the README documentation.\n- **Usage**: \n  - `write_scripts_readme_header <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Writes the header content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_scripts_readme_header
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# function: write_scripts_readme_header\n `write_scripts_readme_header` - Writes the header section of the README.\n## Description\n- **Purpose**:\n  - Creates the initial header content for the README documentation.\n- **Usage**: \n  - `write_scripts_readme_header <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Writes the header content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md
+ echo -e '## write_scripts_readme_header'
+ echo -e '# function: write_scripts_readme_header\n `write_scripts_readme_header` - Writes the header section of the README.\n## Description\n- **Purpose**:\n  - Creates the initial header content for the README documentation.\n- **Usage**: \n  - `write_scripts_readme_header <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Writes the header content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_scripts_readme_header help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_scripts_readme_header
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md
++ function_description write_scripts_readme_header
++ local function_name=write_scripts_readme_header
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md
+++ tail -n 1
++ description=' `write_scripts_readme_header` - Writes the header section of the README.'
++ description='Writes the header section of the README.'
++ description='Writes the header section of the README.'
++ echo 'Writes the header section of the README.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_scripts_readme_header docs/shdoc/bin/shinclude/functions/write_scripts_readme_header.md 'Writes the header section of the README.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     { =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    {'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "# System Script Documentation" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "# System Script Documentation" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "# System Script Documentation" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "# System Script Documentation"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "## The for more details of the project, see [README.md](/README.md)" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "# System Script Documentation" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "# System Script Documentation" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## The for more details of the project, see [README.md](/README.md)" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "## The for more details of the project, see [README.md](/README.md)" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "## The for more details of the project, see [README.md](/README.md)"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## The for more details of the project, see [README.md](/README.md)" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "## The for more details of the project, see [README.md](/README.md)" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e ""'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "# List of scripts in project" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "# List of scripts in project" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "# List of scripts in project" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "# List of scripts in project"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "# List of scripts in project" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "# List of scripts in project" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e ""'
+ continue
+ IFS=
+ read -r line
+ [[         printf "<pre><table>\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "<pre><table>\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         printf "<pre><table>\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        printf "<pre><table>\n"'
+ continue
+ IFS=
+ read -r line
+ [[     } > "$(get_scripts_readme_file "")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "<pre><table>\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         printf "<pre><table>\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "$(get_scripts_readme_file "")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } > "$(get_scripts_readme_file "")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    } > "$(get_scripts_readme_file "")"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "$(get_scripts_readme_file "")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } > "$(get_scripts_readme_file "")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # function: write_scripts_readme_entry =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # function: write_scripts_readme_entry =~ ^#.* ]]
+ extracted_markdown+='# function: write_scripts_readme_entry\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_scripts_readme_entry` - Creates an entry in the README for a script or function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_scripts_readme_entry` - Creates an entry in the README for a script or function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_scripts_readme_entry` - Creates an entry in the README for a script or function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_scripts_readme_entry` - Creates an entry in the README for a script or function. =~ ^#+ ]]
+ extracted_markdown+=' `write_scripts_readme_entry` - Creates an entry in the README for a script or function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^#+ ]]
+ extracted_markdown+='  - Adds a Markdown link to the README file for the given script or function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_scripts_readme_entry <script_name> <scripts_readme_file>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_scripts_readme_entry <script_name> <scripts_readme_file>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_scripts_readme_entry <script_name> <scripts_readme_file>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_scripts_readme_entry <script_name> <scripts_readme_file>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_scripts_readme_entry <script_name> <scripts_readme_file>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_name`: The name of the script or function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script or function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script or function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script or function. =~ ^#+ ]]
+ extracted_markdown+='  - `script_name`: The name of the script or function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `scripts_readme_file`: Path to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: Path to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: Path to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: Path to the README file. =~ ^#+ ]]
+ extracted_markdown+='  - `scripts_readme_file`: Path to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^#+ ]]
+ extracted_markdown+='  - Appends a Markdown-formatted link to the README.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_scripts_readme_entry() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_scripts_readme_entry() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_scripts_readme_entry() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_scripts_readme_entry() { =~ ^#+ ]]
+ [[ write_scripts_readme_entry() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_scripts_readme_entry
+ function_name=write_scripts_readme_entry
+ write_function_doc write_scripts_readme_entry help_sys.sh bin/shinclude/help_sys.sh '# function: write_scripts_readme_entry\n `write_scripts_readme_entry` - Creates an entry in the README for a script or function.\n## Description\n- **Purpose**:\n  - Adds a Markdown link to the README file for the given script or function.\n- **Usage**: \n  - `write_scripts_readme_entry <script_name> <scripts_readme_file>`\n- **Input Parameters**: \n  - `script_name`: The name of the script or function.\n  - `scripts_readme_file`: Path to the README file.\n- **Output**: \n  - Appends a Markdown-formatted link to the README.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_scripts_readme_entry
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# function: write_scripts_readme_entry\n `write_scripts_readme_entry` - Creates an entry in the README for a script or function.\n## Description\n- **Purpose**:\n  - Adds a Markdown link to the README file for the given script or function.\n- **Usage**: \n  - `write_scripts_readme_entry <script_name> <scripts_readme_file>`\n- **Input Parameters**: \n  - `script_name`: The name of the script or function.\n  - `scripts_readme_file`: Path to the README file.\n- **Output**: \n  - Appends a Markdown-formatted link to the README.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md
+ echo -e '## write_scripts_readme_entry'
+ echo -e '# function: write_scripts_readme_entry\n `write_scripts_readme_entry` - Creates an entry in the README for a script or function.\n## Description\n- **Purpose**:\n  - Adds a Markdown link to the README file for the given script or function.\n- **Usage**: \n  - `write_scripts_readme_entry <script_name> <scripts_readme_file>`\n- **Input Parameters**: \n  - `script_name`: The name of the script or function.\n  - `scripts_readme_file`: Path to the README file.\n- **Output**: \n  - Appends a Markdown-formatted link to the README.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_scripts_readme_entry help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_scripts_readme_entry
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md
++ function_description write_scripts_readme_entry
++ local function_name=write_scripts_readme_entry
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md
+++ tail -n 1
++ description=' `write_scripts_readme_entry` - Creates an entry in the README for a script or function.'
++ description='Creates an entry in the README for a script or function.'
++ description='Creates an entry in the README for a script or function.'
++ echo 'Creates an entry in the README for a script or function.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_scripts_readme_entry docs/shdoc/bin/shinclude/functions/write_scripts_readme_entry.md 'Creates an entry in the README for a script or function.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local script_dir="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="$2" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_dir="$2"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script_readme_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_readme_file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_readme_file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_readme_file'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_readme_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     script_readme_file="$(script_readme_file "$script_name" "$script_dir")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     script_readme_file="$(script_readme_file "$script_name" "$script_dir")" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     script_readme_file="$(script_readme_file "$script_name" "$script_dir")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     script_readme_file="$(script_readme_file "$script_name" "$script_dir")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    script_readme_file="$(script_readme_file "$script_name" "$script_dir")"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     script_readme_file="$(script_readme_file "$script_name" "$script_dir")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     script_readme_file="$(script_readme_file "$script_name" "$script_dir")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \'
+ continue
+ IFS=
+ read -r line
+ [[         "${script_readme_file}" "${script_name}" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "${script_readme_file}" "${script_name}" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "${script_readme_file}" "${script_name}" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "${script_readme_file}" "${script_name}" \'
+ continue
+ IFS=
+ read -r line
+ [[         "$(script_description "$script_name")" >> "$(get_scripts_readme_file "")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "${script_readme_file}" "${script_name}" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "${script_readme_file}" "${script_name}" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "$(script_description "$script_name")" >> "$(get_scripts_readme_file "")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "$(script_description "$script_name")" >> "$(get_scripts_readme_file "")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "$(script_description "$script_name")" >> "$(get_scripts_readme_file "")"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "$(script_description "$script_name")" >> "$(get_scripts_readme_file "")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "$(script_description "$script_name")" >> "$(get_scripts_readme_file "")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: writee_script_header =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: writee_script_header =~ ^#.* ]]
+ extracted_markdown+='# Function: writee_script_header\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_script_index_header` - Write the description of the script and the functions contained in it =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_script_index_header` - Write the description of the script and the functions contained in it =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_script_index_header` - Write the description of the script and the functions contained in it =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_script_index_header` - Write the description of the script and the functions contained in it =~ ^#+ ]]
+ extracted_markdown+=' `write_script_index_header` - Write the description of the script and the functions contained in it\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Write the script showt descrtiptionand the finctions with it. These will link to their =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Write the script showt descrtiptionand the finctions with it. These will link to their =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Write the script showt descrtiptionand the finctions with it. These will link to their =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Write the script showt descrtiptionand the finctions with it. These will link to their =~ ^#+ ]]
+ extracted_markdown+='  - Write the script showt descrtiptionand the finctions with it. These will link to their\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     individual documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     individual documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     individual documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     individual documentation. =~ ^#+ ]]
+ extracted_markdown+='    individual documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_script_index <scripts_readme_file>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_script_index <scripts_readme_file>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_script_index <scripts_readme_file>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_script_index <scripts_readme_file>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_script_index <scripts_readme_file>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^#+ ]]
+ extracted_markdown+='  - `scripts_readme_file`: The path to the script function index file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Writes a list of scripts with links to script and function documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Writes a list of scripts with links to script and function documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes a list of scripts with links to script and function documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes a list of scripts with links to script and function documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Writes a list of scripts with links to script and function documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_script_readme_header() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_script_readme_header() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_script_readme_header() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_script_readme_header() { =~ ^#+ ]]
+ [[ write_script_readme_header() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_script_readme_header
+ function_name=write_script_readme_header
+ write_function_doc write_script_readme_header help_sys.sh bin/shinclude/help_sys.sh '# Function: writee_script_header\n `write_script_index_header` - Write the description of the script and the functions contained in it\n## Description\n- **Purpose**:\n  - Write the script showt descrtiptionand the finctions with it. These will link to their\n    individual documentation.\n- **Usage**: \n  - `write_script_index <scripts_readme_file>`\n- **Input Parameters**: \n  - `scripts_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes a list of scripts with links to script and function documentation.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_script_readme_header
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: writee_script_header\n `write_script_index_header` - Write the description of the script and the functions contained in it\n## Description\n- **Purpose**:\n  - Write the script showt descrtiptionand the finctions with it. These will link to their\n    individual documentation.\n- **Usage**: \n  - `write_script_index <scripts_readme_file>`\n- **Input Parameters**: \n  - `scripts_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes a list of scripts with links to script and function documentation.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_script_readme_header.md
+ echo -e '## write_script_readme_header'
+ echo -e '# Function: writee_script_header\n `write_script_index_header` - Write the description of the script and the functions contained in it\n## Description\n- **Purpose**:\n  - Write the script showt descrtiptionand the finctions with it. These will link to their\n    individual documentation.\n- **Usage**: \n  - `write_script_index <scripts_readme_file>`\n- **Input Parameters**: \n  - `scripts_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes a list of scripts with links to script and function documentation.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_script_readme_header.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_script_readme_header.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_script_readme_header help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_script_readme_header
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_script_readme_header.md
++ function_description write_script_readme_header
++ local function_name=write_script_readme_header
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_readme_header.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_readme_header.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_readme_header.md
+++ tail -n 1
++ description=' `write_script_index_header` - Write the description of the script and the functions contained in it'
++ description='Write the description of the script and the functions contained in it'
++ description='Write the description of the script and the functions contained in it'
++ echo 'Write the description of the script and the functions contained in it'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_script_readme_header docs/shdoc/bin/shinclude/functions/write_script_readme_header.md 'Write the description of the script and the functions contained in it'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local script_dir="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="$2" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_dir="$2"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script_doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_doc_file="${__VENV_SCRIPTS[$script_name]}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_doc_file="${__VENV_SCRIPTS[$script_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script_readme_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_readme_file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_readme_file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_readme_file'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_readme_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     script_readme_file="$(get_script_readme_file "$script_name" "$script_dir")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     script_readme_file="$(get_script_readme_file "$script_name" "$script_dir")" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     script_readme_file="$(get_script_readme_file "$script_name" "$script_dir")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     script_readme_file="$(get_script_readme_file "$script_name" "$script_dir")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    script_readme_file="$(get_script_readme_file "$script_name" "$script_dir")"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     script_readme_file="$(get_script_readme_file "$script_name" "$script_dir")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     script_readme_file="$(get_script_readme_file "$script_name" "$script_dir")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     { =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    {'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "# Functions Defined in Script: ${script_name}\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "# Functions Defined in Script: ${script_name}\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "# Functions Defined in Script: ${script_name}\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "# Functions Defined in Script: ${script_name}\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "# Functions Defined in Script: ${script_name}\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "# Functions Defined in Script: ${script_name}\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "### [${script_name}](/${script_doc_file}) - $(script_description "$script_name")\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "### [${script_name}](/${script_doc_file}) - $(script_description "$script_name")\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "### [${script_name}](/${script_doc_file}) - $(script_description "$script_name")\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "### [${script_name}](/${script_doc_file}) - $(script_description "$script_name")\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "### [${script_name}](/${script_doc_file}) - $(script_description "$script_name")\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "### [${script_name}](/${script_doc_file}) - $(script_description "$script_name")\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "## List of Functions Defined:\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## List of Functions Defined:\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "## List of Functions Defined:\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "## List of Functions Defined:\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## List of Functions Defined:\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "## List of Functions Defined:\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "\n"'
+ continue
+ IFS=
+ read -r line
+ [[         printf "<pre><table>\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "<pre><table>\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         printf "<pre><table>\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        printf "<pre><table>\n"'
+ continue
+ IFS=
+ read -r line
+ [[     } > "${script_readme_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "<pre><table>\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         printf "<pre><table>\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "${script_readme_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } > "${script_readme_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    } > "${script_readme_file}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "${script_readme_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } > "${script_readme_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: write_script_function_entry =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: write_script_function_entry =~ ^#.* ]]
+ extracted_markdown+='# Function: write_script_function_entry\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_script_function_entry` - Write a function entry in the script documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_script_function_entry` - Write a function entry in the script documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_script_function_entry` - Write a function entry in the script documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_script_function_entry` - Write a function entry in the script documentation. =~ ^#+ ]]
+ extracted_markdown+=' `write_script_function_entry` - Write a function entry in the script documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Generate script entry for the script whch defines it. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Generate script entry for the script whch defines it. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate script entry for the script whch defines it. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate script entry for the script whch defines it. =~ ^#+ ]]
+ extracted_markdown+='  - Generate script entry for the script whch defines it.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_script_function_entry <function_name> <script_readme_file>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_script_function_entry <function_name> <script_readme_file>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_script_function_entry <function_name> <script_readme_file>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_script_function_entry <function_name> <script_readme_file>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_script_function_entry <function_name> <script_readme_file>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `function_name`: The name of the function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function. =~ ^#+ ]]
+ extracted_markdown+='  - `function_name`: The name of the function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_readme_file`: The path to the script function index file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_readme_file`: The path to the script function index file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_readme_file`: The path to the script function index file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_readme_file`: The path to the script function index file. =~ ^#+ ]]
+ extracted_markdown+='  - `script_readme_file`: The path to the script function index file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^#+ ]]
+ extracted_markdown+='  - Writes the documentation for the specified function to a file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_script_function_entry() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_script_function_entry() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_script_function_entry() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_script_function_entry() { =~ ^#+ ]]
+ [[ write_script_function_entry() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_script_function_entry
+ function_name=write_script_function_entry
+ write_function_doc write_script_function_entry help_sys.sh bin/shinclude/help_sys.sh '# Function: write_script_function_entry\n `write_script_function_entry` - Write a function entry in the script documentation.\n## Description\n- **Purpose**:\n  - Generate script entry for the script whch defines it.\n- **Usage**: \n  - `write_script_function_entry <function_name> <script_readme_file>`\n- **Input Parameters**: \n  - `function_name`: The name of the function.\n  - `script_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes the documentation for the specified function to a file.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_script_function_entry
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: write_script_function_entry\n `write_script_function_entry` - Write a function entry in the script documentation.\n## Description\n- **Purpose**:\n  - Generate script entry for the script whch defines it.\n- **Usage**: \n  - `write_script_function_entry <function_name> <script_readme_file>`\n- **Input Parameters**: \n  - `function_name`: The name of the function.\n  - `script_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes the documentation for the specified function to a file.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_script_function_entry.md
+ echo -e '## write_script_function_entry'
+ echo -e '# Function: write_script_function_entry\n `write_script_function_entry` - Write a function entry in the script documentation.\n## Description\n- **Purpose**:\n  - Generate script entry for the script whch defines it.\n- **Usage**: \n  - `write_script_function_entry <function_name> <script_readme_file>`\n- **Input Parameters**: \n  - `function_name`: The name of the function.\n  - `script_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes the documentation for the specified function to a file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_script_function_entry.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_script_function_entry.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_script_function_entry help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_script_function_entry
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_script_function_entry.md
++ function_description write_script_function_entry
++ local function_name=write_script_function_entry
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_function_entry.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_function_entry.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_function_entry.md
+++ tail -n 1
++ description=' `write_script_function_entry` - Write a function entry in the script documentation.'
++ description='Write a function entry in the script documentation.'
++ description='Write a function entry in the script documentation.'
++ echo 'Write a function entry in the script documentation.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_script_function_entry docs/shdoc/bin/shinclude/functions/write_script_function_entry.md 'Write a function entry in the script documentation.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local function_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local function_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local function_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local function_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local function_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$2" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$2"'
+ continue
+ IFS=
+ read -r line
+ [[     local script_dir="$3" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$3" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="$3" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_dir="$3"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$3" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="$3" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_readme_file="${script_dir}/${script_name//./_}.md"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local function_markdown_path="${__VENV_FUNCTIONS[$function_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local function_markdown_path="${__VENV_FUNCTIONS[$function_name]}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_markdown_path="${__VENV_FUNCTIONS[$function_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local function_markdown_path="${__VENV_FUNCTIONS[$function_name]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local function_markdown_path="${__VENV_FUNCTIONS[$function_name]}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_markdown_path="${__VENV_FUNCTIONS[$function_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local function_markdown_path="${__VENV_FUNCTIONS[$function_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \'
+ continue
+ IFS=
+ read -r line
+ [[         "${function_name}" "${function_markdown_path}" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[     printf "<tr><td><a href=\"%s\">%s</a></td><td>%s</td></tr>\n" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "${function_name}" "${function_markdown_path}" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "${function_name}" "${function_markdown_path}" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "${function_name}" "${function_markdown_path}" \'
+ continue
+ IFS=
+ read -r line
+ [[         "$(function_description "$function_name")" >> "${script_readme_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "${function_name}" "${function_markdown_path}" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "${function_name}" "${function_markdown_path}" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "$(function_description "$function_name")" >> "${script_readme_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "$(function_description "$function_name")" >> "${script_readme_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "$(function_description "$function_name")" >> "${script_readme_file}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "$(function_description "$function_name")" >> "${script_readme_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "$(function_description "$function_name")" >> "${script_readme_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function write_script_doc =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function write_script_doc =~ ^#.* ]]
+ extracted_markdown+='# Function write_script_doc\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_script_doc` - Write the documentation for a script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_script_doc` - Write the documentation for a script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_script_doc` - Write the documentation for a script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_script_doc` - Write the documentation for a script. =~ ^#+ ]]
+ extracted_markdown+=' `write_script_doc` - Write the documentation for a script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Generate Markdown documentation for a specific script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Generate Markdown documentation for a specific script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate Markdown documentation for a specific script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate Markdown documentation for a specific script. =~ ^#+ ]]
+ extracted_markdown+='  - Generate Markdown documentation for a specific script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_name`: The name of the script to generate documentation for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to generate documentation for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to generate documentation for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to generate documentation for. =~ ^#+ ]]
+ extracted_markdown+='  - `script_name`: The name of the script to generate documentation for.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_dir`: The directory where the script is located. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_dir`: The directory where the script is located. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_dir`: The directory where the script is located. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_dir`: The directory where the script is located. =~ ^#+ ]]
+ extracted_markdown+='  - `script_dir`: The directory where the script is located.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `scripts_readme_file`: The path to the script function index file. =~ ^#+ ]]
+ extracted_markdown+='  - `scripts_readme_file`: The path to the script function index file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Writes the documentation for the specified script to a file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified script to a file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified script to a file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified script to a file. =~ ^#+ ]]
+ extracted_markdown+='  - Writes the documentation for the specified script to a file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_script_doc() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_script_doc() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_script_doc() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_script_doc() { =~ ^#+ ]]
+ [[ write_script_doc() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_script_doc
+ function_name=write_script_doc
+ write_function_doc write_script_doc help_sys.sh bin/shinclude/help_sys.sh '# Function write_script_doc\n `write_script_doc` - Write the documentation for a script.\n## Description\n- **Purpose**:\n  - Generate Markdown documentation for a specific script.\n- **Usage**: \n  - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>`\n- **Input Parameters**: \n  - `script_name`: The name of the script to generate documentation for.\n  - `script_dir`: The directory where the script is located.\n  - `scripts_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes the documentation for the specified script to a file.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_script_doc
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function write_script_doc\n `write_script_doc` - Write the documentation for a script.\n## Description\n- **Purpose**:\n  - Generate Markdown documentation for a specific script.\n- **Usage**: \n  - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>`\n- **Input Parameters**: \n  - `script_name`: The name of the script to generate documentation for.\n  - `script_dir`: The directory where the script is located.\n  - `scripts_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes the documentation for the specified script to a file.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_script_doc.md
+ echo -e '## write_script_doc'
+ echo -e '# Function write_script_doc\n `write_script_doc` - Write the documentation for a script.\n## Description\n- **Purpose**:\n  - Generate Markdown documentation for a specific script.\n- **Usage**: \n  - `write_script_doc <script_name> <script_dir> <scripts_readme_file> <script_markdown>`\n- **Input Parameters**: \n  - `script_name`: The name of the script to generate documentation for.\n  - `script_dir`: The directory where the script is located.\n  - `scripts_readme_file`: The path to the script function index file.\n- **Output**: \n  - Writes the documentation for the specified script to a file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_script_doc.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_script_doc.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_script_doc help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_script_doc
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_script_doc.md
++ function_description write_script_doc
++ local function_name=write_script_doc
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_doc.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_doc.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_script_doc.md
+++ tail -n 1
++ description=' `write_script_doc` - Write the documentation for a script.'
++ description='Write the documentation for a script.'
++ description='Write the documentation for a script.'
++ echo 'Write the documentation for a script.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_script_doc docs/shdoc/bin/shinclude/functions/write_script_doc.md 'Write the documentation for a script.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_name="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local script_dir="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_dir="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local script_markdown="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_markdown="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_markdown="$*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_markdown="$*"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_markdown="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_markdown="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local markdown_file_name="${__VENV_SCRIPTS[$script_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local markdown_file_name="${__VENV_SCRIPTS[$script_name]}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file_name="${__VENV_SCRIPTS[$script_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local markdown_file_name="${__VENV_SCRIPTS[$script_name]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local markdown_file_name="${__VENV_SCRIPTS[$script_name]}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file_name="${__VENV_SCRIPTS[$script_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local markdown_file_name="${__VENV_SCRIPTS[$script_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_readme_file="${script_dir}/${script_name//./_}.md"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     { =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    {'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "$script_markdown" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "$script_markdown" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "$script_markdown" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "$script_markdown"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "$script_markdown" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "$script_markdown" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "## Function Defniitions\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## Function Defniitions\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "## Function Defniitions\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "## Function Defniitions\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "* [${script_name}](/${script_readme_file})" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## Function Defniitions\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "## Function Defniitions\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "* [${script_name}](/${script_readme_file})" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "* [${script_name}](/${script_readme_file})" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "* [${script_name}](/${script_readme_file})"'
+ continue
+ IFS=
+ read -r line
+ [[     } > "${markdown_file_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "* [${script_name}](/${script_readme_file})" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "* [${script_name}](/${script_readme_file})" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "${markdown_file_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } > "${markdown_file_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    } > "${markdown_file_name}"'
+ continue
+ IFS=
+ read -r line
+ [[     write_page_footer "${markdown_file_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "${markdown_file_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } > "${markdown_file_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_page_footer "${markdown_file_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_page_footer "${markdown_file_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_page_footer "${markdown_file_name}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_page_footer "${markdown_file_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_page_footer "${markdown_file_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     write_script_readme_header "${script_name}" "${script_dir}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     write_script_readme_header "${script_name}" "${script_dir}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_script_readme_header "${script_name}" "${script_dir}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_script_readme_header "${script_name}" "${script_dir}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_script_readme_header "${script_name}" "${script_dir}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_script_readme_header "${script_name}" "${script_dir}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_script_readme_header "${script_name}" "${script_dir}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     write_scripts_readme_entry "${script_name}" "${script_dir}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     write_scripts_readme_entry "${script_name}" "${script_dir}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_scripts_readme_entry "${script_name}" "${script_dir}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_scripts_readme_entry "${script_name}" "${script_dir}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_scripts_readme_entry "${script_name}" "${script_dir}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_scripts_readme_entry "${script_name}" "${script_dir}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_scripts_readme_entry "${script_name}" "${script_dir}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: write_function_doc =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: write_function_doc =~ ^#.* ]]
+ extracted_markdown+='# Function: write_function_doc\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_function_doc` - Write the documentation for a function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_function_doc` - Write the documentation for a function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_function_doc` - Write the documentation for a function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_function_doc` - Write the documentation for a function. =~ ^#+ ]]
+ extracted_markdown+=' `write_function_doc` - Write the documentation for a function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Generate Markdown documentation for a specific function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Generate Markdown documentation for a specific function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate Markdown documentation for a specific function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate Markdown documentation for a specific function. =~ ^#+ ]]
+ extracted_markdown+='  - Generate Markdown documentation for a specific function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `function_name`: The name of the function to generate documentation for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to generate documentation for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to generate documentation for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to generate documentation for. =~ ^#+ ]]
+ extracted_markdown+='  - `function_name`: The name of the function to generate documentation for.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the documentation for the specified function to a file. =~ ^#+ ]]
+ extracted_markdown+='  - Writes the documentation for the specified function to a file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_function_doc() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_function_doc() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_function_doc() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_function_doc() { =~ ^#+ ]]
+ [[ write_function_doc() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_function_doc
+ function_name=write_function_doc
+ write_function_doc write_function_doc help_sys.sh bin/shinclude/help_sys.sh '# Function: write_function_doc\n `write_function_doc` - Write the documentation for a function.\n## Description\n- **Purpose**:\n  - Generate Markdown documentation for a specific function.\n- **Usage**: \n  - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>`\n- **Input Parameters**: \n  - `function_name`: The name of the function to generate documentation for.\n- **Output**: \n  - Writes the documentation for the specified function to a file.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_function_doc
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: write_function_doc\n `write_function_doc` - Write the documentation for a function.\n## Description\n- **Purpose**:\n  - Generate Markdown documentation for a specific function.\n- **Usage**: \n  - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>`\n- **Input Parameters**: \n  - `function_name`: The name of the function to generate documentation for.\n- **Output**: \n  - Writes the documentation for the specified function to a file.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_function_doc.md
+ echo -e '## write_function_doc'
+ echo -e '# Function: write_function_doc\n `write_function_doc` - Write the documentation for a function.\n## Description\n- **Purpose**:\n  - Generate Markdown documentation for a specific function.\n- **Usage**: \n  - `write_function_doc <function_name> <script_name> <script_path> <function_markdown>`\n- **Input Parameters**: \n  - `function_name`: The name of the function to generate documentation for.\n- **Output**: \n  - Writes the documentation for the specified function to a file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_function_doc.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_function_doc.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_function_doc help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_function_doc
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_function_doc.md
++ function_description write_function_doc
++ local function_name=write_function_doc
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_function_doc.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_function_doc.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_function_doc.md
+++ tail -n 1
++ description=' `write_function_doc` - Write the documentation for a function.'
++ description='Write the documentation for a function.'
++ description='Write the documentation for a function.'
++ echo 'Write the documentation for a function.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_function_doc docs/shdoc/bin/shinclude/functions/write_function_doc.md 'Write the documentation for a function.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local function_name="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local function_name="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_name="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local function_name="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local function_name="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_name="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local function_name="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local script_dir="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_dir="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local function_markdown="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_markdown="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local function_markdown="$*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local function_markdown="$*"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_markdown="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local function_markdown="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script_readme_file="${script_name//./_}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_readme_file="${script_name//./_}.md" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_name//./_}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_readme_file="${script_name//./_}.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_readme_file="${script_name//./_}.md"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_readme_file="${script_name//./_}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_readme_file="${script_name//./_}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local function_markdown_file="${__VENV_FUNCTIONS[$function_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local function_markdown_file="${__VENV_FUNCTIONS[$function_name]}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_markdown_file="${__VENV_FUNCTIONS[$function_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local function_markdown_file="${__VENV_FUNCTIONS[$function_name]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local function_markdown_file="${__VENV_FUNCTIONS[$function_name]}"'
+ continue
+ IFS=
+ read -r line
+ [[     { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function_markdown_file="${__VENV_FUNCTIONS[$function_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local function_markdown_file="${__VENV_FUNCTIONS[$function_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    {'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "## ${function_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## ${function_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "## ${function_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "## ${function_name}"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "$function_markdown" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## ${function_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "## ${function_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "$function_markdown" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "$function_markdown" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "$function_markdown"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "## Defniition \n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "$function_markdown" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "$function_markdown" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## Defniition \n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "## Defniition \n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "## Defniition \n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "* [${script_name}](/${script_dir}/${script_readme_file})" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "## Defniition \n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "## Defniition \n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "* [${script_name}](/${script_dir}/${script_readme_file})" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "* [${script_name}](/${script_dir}/${script_readme_file})" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "* [${script_name}](/${script_dir}/${script_readme_file})"'
+ continue
+ IFS=
+ read -r line
+ [[     } > "${function_markdown_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "* [${script_name}](/${script_dir}/${script_readme_file})" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "* [${script_name}](/${script_dir}/${script_readme_file})" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "${function_markdown_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } > "${function_markdown_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    } > "${function_markdown_file}"'
+ continue
+ IFS=
+ read -r line
+ [[     write_page_footer "$function_markdown_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } > "${function_markdown_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } > "${function_markdown_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_page_footer "$function_markdown_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_page_footer "$function_markdown_file" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_page_footer "$function_markdown_file"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_page_footer "$function_markdown_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_page_footer "$function_markdown_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     write_script_function_entry "${function_name}" "${script_name}" "${script_dir}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     write_script_function_entry "${function_name}" "${script_name}" "${script_dir}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_script_function_entry "${function_name}" "${script_name}" "${script_dir}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_script_function_entry "${function_name}" "${script_name}" "${script_dir}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_script_function_entry "${function_name}" "${script_name}" "${script_dir}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_script_function_entry "${function_name}" "${script_name}" "${script_dir}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_script_function_entry "${function_name}" "${script_name}" "${script_dir}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: write_table_footer =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: write_table_footer =~ ^#.* ]]
+ extracted_markdown+='# Function: write_table_footer\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_table_footer` - Write the footer section of the README. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_table_footer` - Write the footer section of the README. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_table_footer` - Write the footer section of the README. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_table_footer` - Write the footer section of the README. =~ ^#+ ]]
+ extracted_markdown+=' `write_table_footer` - Write the footer section of the README.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Creates the footer content for the README documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates the footer content for the README documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates the footer content for the README documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates the footer content for the README documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Creates the footer content for the README documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_table_footer <file_path>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_table_footer <file_path>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_table_footer <file_path>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_table_footer <file_path>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_table_footer <file_path>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `file_path`: The path to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^#+ ]]
+ extracted_markdown+='  - `file_path`: The path to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Writes the footer content to the specified README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Writes the footer content to the specified README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the footer content to the specified README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the footer content to the specified README file. =~ ^#+ ]]
+ extracted_markdown+='  - Writes the footer content to the specified README file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_table_footer() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_table_footer() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_table_footer() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_table_footer() { =~ ^#+ ]]
+ [[ write_table_footer() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_table_footer
+ function_name=write_table_footer
+ write_function_doc write_table_footer help_sys.sh bin/shinclude/help_sys.sh '# Function: write_table_footer\n `write_table_footer` - Write the footer section of the README.\n## Description\n- **Purpose**:\n  - Creates the footer content for the README documentation.\n- **Usage**: \n  - `write_table_footer <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Writes the footer content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_table_footer
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: write_table_footer\n `write_table_footer` - Write the footer section of the README.\n## Description\n- **Purpose**:\n  - Creates the footer content for the README documentation.\n- **Usage**: \n  - `write_table_footer <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Writes the footer content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_table_footer.md
+ echo -e '## write_table_footer'
+ echo -e '# Function: write_table_footer\n `write_table_footer` - Write the footer section of the README.\n## Description\n- **Purpose**:\n  - Creates the footer content for the README documentation.\n- **Usage**: \n  - `write_table_footer <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Writes the footer content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_table_footer.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_table_footer.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_table_footer help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_table_footer
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_table_footer.md
++ function_description write_table_footer
++ local function_name=write_table_footer
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_table_footer.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_table_footer.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_table_footer.md
+++ tail -n 1
++ description=' `write_table_footer` - Write the footer section of the README.'
++ description='Write the footer section of the README.'
++ description='Write the footer section of the README.'
++ echo 'Write the footer section of the README.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_table_footer docs/shdoc/bin/shinclude/functions/write_table_footer.md 'Write the footer section of the README.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local file_path="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local file_path="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local file_path="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local file_path="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local file_path="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local file_path="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local file_path="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    {'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "</table></pre>" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "</table></pre>" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "</table></pre>" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "</table></pre>"'
+ continue
+ IFS=
+ read -r line
+ [[     } >> "${file_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "</table></pre>" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "</table></pre>" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } >> "${file_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } >> "${file_path}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    } >> "${file_path}"'
+ continue
+ IFS=
+ read -r line
+ [[     write_page_footer "${file_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } >> "${file_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } >> "${file_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_page_footer "${file_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_page_footer "${file_path}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_page_footer "${file_path}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_page_footer "${file_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_page_footer "${file_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # function: write_page_footer =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # function: write_page_footer =~ ^#.* ]]
+ extracted_markdown+='# function: write_page_footer\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `write_page_footer` - Writes a standard footer for any document file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_page_footer` - Writes a standard footer for any document file =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_page_footer` - Writes a standard footer for any document file =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_page_footer` - Writes a standard footer for any document file =~ ^#+ ]]
+ extracted_markdown+=' `write_page_footer` - Writes a standard footer for any document file\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Appends footer content and a timestamp to the README documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `write_page_footer <file_path>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_page_footer <file_path>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_page_footer <file_path>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_page_footer <file_path>` =~ ^#+ ]]
+ extracted_markdown+='  - `write_page_footer <file_path>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `file_path`: The path to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `file_path`: The path to the README file. =~ ^#+ ]]
+ extracted_markdown+='  - `file_path`: The path to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^#+ ]]
+ extracted_markdown+='  - Appends footer content and timestamp to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ write_page_footer() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_page_footer() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_page_footer() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_page_footer() { =~ ^#+ ]]
+ [[ write_page_footer() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=write_page_footer
+ function_name=write_page_footer
+ write_function_doc write_page_footer help_sys.sh bin/shinclude/help_sys.sh '# function: write_page_footer\n `write_page_footer` - Writes a standard footer for any document file\n## Description\n- **Purpose**:\n  - Appends footer content and a timestamp to the README documentation.\n- **Usage**: \n  - `write_page_footer <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Appends footer content and timestamp to the README file.\n- **Exceptions**: \n  - None\n'
+ local function_name=write_page_footer
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# function: write_page_footer\n `write_page_footer` - Writes a standard footer for any document file\n## Description\n- **Purpose**:\n  - Appends footer content and a timestamp to the README documentation.\n- **Usage**: \n  - `write_page_footer <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Appends footer content and timestamp to the README file.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/write_page_footer.md
+ echo -e '## write_page_footer'
+ echo -e '# function: write_page_footer\n `write_page_footer` - Writes a standard footer for any document file\n## Description\n- **Purpose**:\n  - Appends footer content and a timestamp to the README documentation.\n- **Usage**: \n  - `write_page_footer <file_path>`\n- **Input Parameters**: \n  - `file_path`: The path to the README file.\n- **Output**: \n  - Appends footer content and timestamp to the README file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/write_page_footer.md
+ local file_path=docs/shdoc/bin/shinclude/functions/write_page_footer.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry write_page_footer help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=write_page_footer
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/write_page_footer.md
++ function_description write_page_footer
++ local function_name=write_page_footer
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_page_footer.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_page_footer.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/write_page_footer.md
+++ tail -n 1
++ description=' `write_page_footer` - Writes a standard footer for any document file'
++ description='Writes a standard footer for any document file'
++ description='Writes a standard footer for any document file'
++ echo 'Writes a standard footer for any document file'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' write_page_footer docs/shdoc/bin/shinclude/functions/write_page_footer.md 'Writes a standard footer for any document file'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local file_path="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local file_path="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local file_path="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local file_path="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local file_path="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local date_mark =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local file_path="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local file_path="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local date_mark =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local date_mark =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local date_mark'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local date_mark =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local date_mark =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S")'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     { =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    {'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "---\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "---\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "---\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "---\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "Generated Markdown Documentation\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "---\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "---\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "Generated Markdown Documentation\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "Generated Markdown Documentation\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "Generated Markdown Documentation\n"'
+ continue
+ IFS=
+ read -r line
+ [[         echo -e "Generated on:${date_mark}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "Generated Markdown Documentation\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "Generated Markdown Documentation\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "Generated on:${date_mark}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo -e "Generated on:${date_mark}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo -e "Generated on:${date_mark}"'
+ continue
+ IFS=
+ read -r line
+ [[         # Add other footer content here =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo -e "Generated on:${date_mark}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo -e "Generated on:${date_mark}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Add other footer content here =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Add other footer content here =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Add other footer content here'
+ continue
+ IFS=
+ read -r line
+ [[     } >> "${file_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Add other footer content here =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Add other footer content here =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } >> "${file_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } >> "${file_path}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    } >> "${file_path}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } >> "${file_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } >> "${file_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: generate_markdown =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: generate_markdown =~ ^#.* ]]
+ extracted_markdown+='# Function: generate_markdown\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^#+ ]]
+ extracted_markdown+=' `generate_markdown` - Generate Markdown documentation for all available functions.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^#+ ]]
+ extracted_markdown+='  - Generate comprehensive Markdown documentation for all functions.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vhelp generate_markdown` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vhelp generate_markdown` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp generate_markdown` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp generate_markdown` =~ ^#+ ]]
+ extracted_markdown+='  - `vhelp generate_markdown`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^#+ ]]
+ extracted_markdown+='  - Markdown-formatted documentation for all functions.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ generate_markdown() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ generate_markdown() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ generate_markdown() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ generate_markdown() { =~ ^#+ ]]
+ [[ generate_markdown() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=generate_markdown
+ function_name=generate_markdown
+ write_function_doc generate_markdown help_sys.sh bin/shinclude/help_sys.sh '# Function: generate_markdown\n `generate_markdown` - Generate Markdown documentation for all available functions.\n## Description\n- **Purpose**:\n  - Generate comprehensive Markdown documentation for all functions.\n- **Usage**: \n  - `vhelp generate_markdown`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Markdown-formatted documentation for all functions.\n- **Exceptions**: \n  - None\n'
+ local function_name=generate_markdown
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: generate_markdown\n `generate_markdown` - Generate Markdown documentation for all available functions.\n## Description\n- **Purpose**:\n  - Generate comprehensive Markdown documentation for all functions.\n- **Usage**: \n  - `vhelp generate_markdown`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Markdown-formatted documentation for all functions.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/generate_markdown.md
+ echo -e '## generate_markdown'
+ echo -e '# Function: generate_markdown\n `generate_markdown` - Generate Markdown documentation for all available functions.\n## Description\n- **Purpose**:\n  - Generate comprehensive Markdown documentation for all functions.\n- **Usage**: \n  - `vhelp generate_markdown`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Markdown-formatted documentation for all functions.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/generate_markdown.md
+ local file_path=docs/shdoc/bin/shinclude/functions/generate_markdown.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry generate_markdown help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=generate_markdown
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/generate_markdown.md
++ function_description generate_markdown
++ local function_name=generate_markdown
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/generate_markdown.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/generate_markdown.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/generate_markdown.md
+++ tail -n 1
++ description=' `generate_markdown` - Generate Markdown documentation for all available functions.'
++ description='Generate Markdown documentation for all available functions.'
++ description='Generate Markdown documentation for all available functions.'
++ echo 'Generate Markdown documentation for all available functions.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' generate_markdown docs/shdoc/bin/shinclude/functions/generate_markdown.md 'Generate Markdown documentation for all available functions.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     set -x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     set -x =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set -x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     set -x =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    set -x'
+ continue
+ IFS=
+ read -r line
+ [[     cd "${__VENV_BASE}"  || errno_exit ENOENT =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set -x =~ ^}$ ]]
+ [[ false == false ]]
+ [[     set -x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd "${__VENV_BASE}"  || errno_exit ENOENT =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cd "${__VENV_BASE}"  || errno_exit ENOENT =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cd "${__VENV_BASE}"  || errno_exit ENOENT'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cd "${__VENV_BASE}"  || errno_exit ENOENT =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cd "${__VENV_BASE}"  || errno_exit ENOENT =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local conf_file="conf/help_sys.conf" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local conf_file="conf/help_sys.conf" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="conf/help_sys.conf" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local conf_file="conf/help_sys.conf" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local conf_file="conf/help_sys.conf"'
+ continue
+ IFS=
+ read -r line
+ [[     local shdoc_base="docs/shdoc" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="conf/help_sys.conf" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local conf_file="conf/help_sys.conf" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local shdoc_base="docs/shdoc" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local shdoc_base="docs/shdoc" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local shdoc_base="docs/shdoc"'
+ continue
+ IFS=
+ read -r line
+ [[     [ -d "${shdoc_base}" ] || mkdir -p "${shdoc_base}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local shdoc_base="docs/shdoc" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local shdoc_base="docs/shdoc" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -d "${shdoc_base}" ] || mkdir -p "${shdoc_base}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -d "${shdoc_base}" ] || mkdir -p "${shdoc_base}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    [ -d "${shdoc_base}" ] || mkdir -p "${shdoc_base}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -d "${shdoc_base}" ] || mkdir -p "${shdoc_base}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -d "${shdoc_base}" ] || mkdir -p "${shdoc_base}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local in_progress_timestamp="${shdoc_base}/.in-progress" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local in_progress_timestamp="${shdoc_base}/.in-progress" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local in_progress_timestamp="${shdoc_base}/.in-progress" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local in_progress_timestamp="${shdoc_base}/.in-progress" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local in_progress_timestamp="${shdoc_base}/.in-progress"'
+ continue
+ IFS=
+ read -r line
+ [[     local completed_timestamp="${shdoc_base}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local in_progress_timestamp="${shdoc_base}/.in-progress" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local in_progress_timestamp="${shdoc_base}/.in-progress" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local completed_timestamp="${shdoc_base}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local completed_timestamp="${shdoc_base}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local completed_timestamp="${shdoc_base}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE"'
+ continue
+ IFS=
+ read -r line
+ [[     touch "${in_progress_timestamp}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local completed_timestamp="${shdoc_base}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local completed_timestamp="${shdoc_base}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     touch "${in_progress_timestamp}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     touch "${in_progress_timestamp}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    touch "${in_progress_timestamp}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     touch "${in_progress_timestamp}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     touch "${in_progress_timestamp}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local scripts_readme_file="${shdoc_base}/README.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local scripts_readme_file="${shdoc_base}/README.md" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local scripts_readme_file="${shdoc_base}/README.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local scripts_readme_file="${shdoc_base}/README.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local scripts_readme_file="${shdoc_base}/README.md"'
+ continue
+ IFS=
+ read -r line
+ [[     write_scripts_readme_header "${scripts_readme_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local scripts_readme_file="${shdoc_base}/README.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local scripts_readme_file="${shdoc_base}/README.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_scripts_readme_header "${scripts_readme_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_scripts_readme_header "${scripts_readme_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_scripts_readme_header "${scripts_readme_file}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_scripts_readme_header "${scripts_readme_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_scripts_readme_header "${scripts_readme_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local search_dirs =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local search_dirs =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_dirs =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local search_dirs =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local search_dirs'
+ continue
+ IFS=
+ read -r line
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_dirs =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local search_dirs =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    readarray -t search_dirs < <(grep -v '\''^#'\'' "$conf_file" | sed '\''/^$/d'\'')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Iterate over directories to find shell scripts and their documentation =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Iterate over directories to find shell scripts and their documentation'
+ continue
+ IFS=
+ read -r line
+ [[     for script_dir in "${search_dirs[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script_dir in "${search_dirs[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for script_dir in "${search_dirs[@]}"; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for script_dir in "${search_dirs[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ [[         local scripts_docs_dir="${shdoc_base}/${script_dir}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script_dir in "${search_dirs[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for script_dir in "${search_dirs[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local scripts_docs_dir="${shdoc_base}/${script_dir}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local scripts_docs_dir="${shdoc_base}/${script_dir}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local scripts_docs_dir="${shdoc_base}/${script_dir}"'
+ continue
+ IFS=
+ read -r line
+ [[         local script_docs_path="${scripts_docs_dir}/scripts" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local scripts_docs_dir="${shdoc_base}/${script_dir}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local scripts_docs_dir="${shdoc_base}/${script_dir}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_docs_path="${scripts_docs_dir}/scripts" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local script_docs_path="${scripts_docs_dir}/scripts" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local script_docs_path="${scripts_docs_dir}/scripts"'
+ continue
+ IFS=
+ read -r line
+ [[         local function_docs_path="${scripts_docs_dir}/functions" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_docs_path="${scripts_docs_dir}/scripts" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local script_docs_path="${scripts_docs_dir}/scripts" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local function_docs_path="${scripts_docs_dir}/functions" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local function_docs_path="${scripts_docs_dir}/functions" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local function_docs_path="${scripts_docs_dir}/functions"'
+ continue
+ IFS=
+ read -r line
+ [[         [ -d "${function_docs_path}" ] || mkdir -p "${function_docs_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local function_docs_path="${scripts_docs_dir}/functions" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local function_docs_path="${scripts_docs_dir}/functions" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${function_docs_path}" ] || mkdir -p "${function_docs_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         [ -d "${function_docs_path}" ] || mkdir -p "${function_docs_path}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        [ -d "${function_docs_path}" ] || mkdir -p "${function_docs_path}"'
+ continue
+ IFS=
+ read -r line
+ [[         [ -d "${script_docs_path}" ] || mkdir -p "${script_docs_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${function_docs_path}" ] || mkdir -p "${function_docs_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         [ -d "${function_docs_path}" ] || mkdir -p "${function_docs_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${script_docs_path}" ] || mkdir -p "${script_docs_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         [ -d "${script_docs_path}" ] || mkdir -p "${script_docs_path}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        [ -d "${script_docs_path}" ] || mkdir -p "${script_docs_path}"'
+ continue
+ IFS=
+ read -r line
+ [[         local script_files =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${script_docs_path}" ] || mkdir -p "${script_docs_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         [ -d "${script_docs_path}" ] || mkdir -p "${script_docs_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_files =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local script_files =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local script_files'
+ continue
+ IFS=
+ read -r line
+ [[         readarray -t script_files < <(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_files =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local script_files =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         readarray -t script_files < <(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         readarray -t script_files < <(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        readarray -t script_files < <(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)'
+ continue
+ IFS=
+ read -r line
+ [[         # script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         readarray -t script_files < <(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         readarray -t script_files < <(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1))'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Iterate over sorted script names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Iterate over sorted script names =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Iterate over sorted script names =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Iterate over sorted script names =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Iterate over sorted script names'
+ continue
+ IFS=
+ read -r line
+ [[         local script_path =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Iterate over sorted script names =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Iterate over sorted script names =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_path =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local script_path =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local script_path'
+ continue
+ IFS=
+ read -r line
+ [[         for script_path in "${script_files[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_path =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local script_path =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         for script_path in "${script_files[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         for script_path in "${script_files[@]}"; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        for script_path in "${script_files[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ [[             local script_name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         for script_path in "${script_files[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[         for script_path in "${script_files[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_name =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local script_name =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local script_name'
+ continue
+ IFS=
+ read -r line
+ [[             script_name=$(basename "$script_path") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_name =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local script_name =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             script_name=$(basename "$script_path") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             script_name=$(basename "$script_path") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            script_name=$(basename "$script_path")'
+ continue
+ IFS=
+ read -r line
+ [[             local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             script_name=$(basename "$script_path") =~ ^}$ ]]
+ [[ false == false ]]
+ [[             script_name=$(basename "$script_path") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local script_readme_file="${script_dir}/${script_name//./_}.md"'
+ continue
+ IFS=
+ read -r line
+ [[              =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local script_readme_file="${script_dir}/${script_name//./_}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[              =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !              =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            '
+ continue
+ IFS=
+ read -r line
+ [[             log_message "INFO" "Generating markdown for script: $script_name" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[              =~ ^}$ ]]
+ [[ false == false ]]
+ [[              =~ ^[[:space:]]*$ ]]
+ [[             log_message "INFO" "Generating markdown for script: $script_name" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             log_message "INFO" "Generating markdown for script: $script_name" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             log_message "INFO" "Generating markdown for script: $script_name" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            log_message "INFO" "Generating markdown for script: $script_name"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             log_message "INFO" "Generating markdown for script: $script_name" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             log_message "INFO" "Generating markdown for script: $script_name" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[             local in_script_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             local in_script_doc=false =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_script_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local in_script_doc=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local in_script_doc=false'
+ continue
+ IFS=
+ read -r line
+ [[             local in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_script_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local in_script_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local in_function_doc=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ [[             local script_entry=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_entry=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local script_entry=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local script_entry=false'
+ continue
+ IFS=
+ read -r line
+ [[             local previous_line =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_entry=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local script_entry=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local previous_line =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local previous_line =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local previous_line'
+ continue
+ IFS=
+ read -r line
+ [[             local extracted_markdown="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local previous_line =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local previous_line =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local extracted_markdown="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local extracted_markdown="" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local extracted_markdown=""'
+ continue
+ IFS=
+ read -r line
+ [[             local function_name="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local extracted_markdown="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local extracted_markdown="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local function_name="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local function_name="" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            local function_name=""'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local function_name="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local function_name="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[             # Open the script file for reading =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             # Open the script file for reading =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Open the script file for reading =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Open the script file for reading =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            # Open the script file for reading'
+ continue
+ IFS=
+ read -r line
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Open the script file for reading =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Open the script file for reading =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            while IFS= read -r line || [[ -n "${line}" ]]; do'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # Check for beginning of the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Check for beginning of the script. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of the script. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Check for beginning of the script. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Check for beginning of the script.'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of the script. =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Check for beginning of the script. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${line}" =~ ^\#! ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${line}" =~ ^\#! ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     script_entry=true =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=true =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     script_entry=true =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    script_entry=true'
+ continue
+ IFS=
+ read -r line
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=true =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     script_entry=true =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # In the script, skip blank lines, lines with only whitespace, or =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # In the script, skip blank lines, lines with only whitespace, or =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # In the script, skip blank lines, lines with only whitespace, or'
+ continue
+ IFS=
+ read -r line
+ [[                 # lines beginning with '#' optionally followed by whitespace =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # lines beginning with '#' optionally followed by whitespace =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # lines beginning with '#' optionally followed by whitespace =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # lines beginning with '\''#'\'' optionally followed by whitespace'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # lines beginning with '#' optionally followed by whitespace =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # lines beginning with '#' optionally followed by whitespace =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || \'
+ continue
+ IFS=
+ read -r line
+ [[                         "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                         "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                         "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                        "${line}" =~ ^#[[:space:]]*$) ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                         "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                         "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # Handle Script documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Handle Script documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Script documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Handle Script documentation =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Handle Script documentation'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Script documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Handle Script documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && \'
+ continue
+ IFS=
+ read -r line
+ [[                         "${line}" =~ ^#+ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                         "${line}" =~ ^#+ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                         "${line}" =~ ^#+ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                        "${line}" =~ ^#+ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                         "${line}" =~ ^#+ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                         "${line}" =~ ^#+ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown+="${line/#\# /}\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    extracted_markdown+="${line/#\# /}\n"'
+ continue
+ IFS=
+ read -r line
+ [[                     script_entry=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     script_entry=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    script_entry=false'
+ continue
+ IFS=
+ read -r line
+ [[                     in_script_doc=true =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     script_entry=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=true =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_script_doc=true =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    in_script_doc=true'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=true =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_script_doc=true =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[                  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                  =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                '
+ continue
+ IFS=
+ read -r line
+ [[                 # Checking for end of script documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^}$ ]]
+ [[ false == false ]]
+ [[                  =~ ^[[:space:]]*$ ]]
+ [[                 # Checking for end of script documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of script documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Checking for end of script documentation =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Checking for end of script documentation'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of script documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Checking for end of script documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     write_script_doc "${script_name}" "${script_dir}" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     write_script_doc "${script_name}" "${script_dir}" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     write_script_doc "${script_name}" "${script_dir}" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    write_script_doc "${script_name}" "${script_dir}" \'
+ continue
+ IFS=
+ read -r line
+ [[                                         "${extracted_markdown}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     write_script_doc "${script_name}" "${script_dir}" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     write_script_doc "${script_name}" "${script_dir}" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                                         "${extracted_markdown}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                                         "${extracted_markdown}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                                        "${extracted_markdown}"'
+ continue
+ IFS=
+ read -r line
+ [[                     extracted_markdown="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                                         "${extracted_markdown}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                                         "${extracted_markdown}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown="" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    extracted_markdown=""'
+ continue
+ IFS=
+ read -r line
+ [[                     previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     previous_line="${line}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ [[                     in_script_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_script_doc=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    in_script_doc=false'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_script_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # Checking for end of function code =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Checking for end of function code =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of function code =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Checking for end of function code =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Checking for end of function code'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of function code =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Checking for end of function code =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # Check for beginning of a function documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Check for beginning of a function documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of a function documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Check for beginning of a function documentation =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Check for beginning of a function documentation'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of a function documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Check for beginning of a function documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && \'
+ continue
+ IFS=
+ read -r line
+ [[                             "${line}" =~ ^#.* ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                             "${line}" =~ ^#.* ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                             "${line}" =~ ^#.* ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                            "${line}" =~ ^#.* ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                             "${line}" =~ ^#.* ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                             "${line}" =~ ^#.* ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown+="${line/#\# /}\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    extracted_markdown+="${line/#\# /}\n"'
+ continue
+ IFS=
+ read -r line
+ [[                     in_function_doc=true =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=true =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=true =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    in_function_doc=true'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=true =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=true =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[                  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                  =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                '
+ continue
+ IFS=
+ read -r line
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^}$ ]]
+ [[ false == false ]]
+ [[                  =~ ^[[:space:]]*$ ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Reset if we get a blank line before reaching the end of the function documentation'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     extracted_markdown="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown="" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    extracted_markdown=""'
+ continue
+ IFS=
+ read -r line
+ [[                     previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     previous_line="${line}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Check for single `#` on line followed by optional whitespace and skip it'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # Handle Function documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Handle Function documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Function documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Handle Function documentation =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Handle Function documentation'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Function documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Handle Function documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown+="${line/#\# /}\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    extracted_markdown+="${line/#\# /}\n"'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # We reached the end of the function, reset =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # We reached the end of the function, reset =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # We reached the end of the function, reset =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # We reached the end of the function, reset =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # We reached the end of the function, reset'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # We reached the end of the function, reset =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # We reached the end of the function, reset =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                     function_name="${line%%(*}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     function_name="${line%%(*}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     function_name="${line%%(*}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    function_name="${line%%(*}"'
+ continue
+ IFS=
+ read -r line
+ [[                     function_name="${function_name/#function /}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     function_name="${line%%(*}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     function_name="${line%%(*}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     function_name="${function_name/#function /}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     function_name="${function_name/#function /}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    function_name="${function_name/#function /}"'
+ continue
+ IFS=
+ read -r line
+ [[                     write_function_doc "${function_name}" "${script_name}" "${script_path}" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     function_name="${function_name/#function /}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     function_name="${function_name/#function /}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     write_function_doc "${function_name}" "${script_name}" "${script_path}" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     write_function_doc "${function_name}" "${script_name}" "${script_path}" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    write_function_doc "${function_name}" "${script_name}" "${script_path}" \'
+ continue
+ IFS=
+ read -r line
+ [[                                         "${extracted_markdown}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     write_function_doc "${function_name}" "${script_name}" "${script_path}" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     write_function_doc "${function_name}" "${script_name}" "${script_path}" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                                         "${extracted_markdown}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                                         "${extracted_markdown}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                                        "${extracted_markdown}"'
+ continue
+ IFS=
+ read -r line
+ [[                     extracted_markdown="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                                         "${extracted_markdown}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                                         "${extracted_markdown}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown="" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    extracted_markdown=""'
+ continue
+ IFS=
+ read -r line
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace.'
+ continue
+ IFS=
+ read -r line
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#[[:space:]]].* || "${line}" =~ ^[[:space:]]*$ ]]; then  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#[[:space:]]].* || "${line}" =~ ^[[:space:]]*$ ]]; then  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ ! "${line}" =~ ^[a-zA-Z_#[[:space:]]].* || "${line}" =~ ^[[:space:]]*$ ]]; then  =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                if [[ ! "${line}" =~ ^[a-zA-Z_#[[:space:]]].* || "${line}" =~ ^[[:space:]]*$ ]]; then '
+ continue
+ IFS=
+ read -r line
+ [[                     previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#[[:space:]]].* || "${line}" =~ ^[[:space:]]*$ ]]; then  =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#[[:space:]]].* || "${line}" =~ ^[[:space:]]*$ ]]; then  =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     previous_line="${line}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 log_message "WARNING" "Invalid line type found: $line" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                log_message "WARNING" "Invalid line type found: $line"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[                 previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 previous_line="${line}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 previous_line="${line}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[             done < "$script_path" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             done < "$script_path" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             done < "$script_path" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             done < "$script_path" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            done < "$script_path"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             done < "$script_path" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             done < "$script_path" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[             # Write the extracted documentation to the markdown file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Write the extracted documentation to the markdown file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            # Write the extracted documentation to the markdown file'
+ continue
+ IFS=
+ read -r line
+ [[             write_table_footer "${script_readme_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             write_table_footer "${script_readme_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             write_table_footer "${script_readme_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            write_table_footer "${script_readme_file}"'
+ continue
+ IFS=
+ read -r line
+ [[         done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             write_table_footer "${script_readme_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             write_table_footer "${script_readme_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        done'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^}$ ]]
+ [[ false == false ]]
+ [[         done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     write_table_footer "${scripts_readme_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     write_table_footer "${scripts_readme_file}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_table_footer "${scripts_readme_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_table_footer "${scripts_readme_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    write_table_footer "${scripts_readme_file}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_table_footer "${scripts_readme_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_table_footer "${scripts_readme_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # After documentation generation is complete =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # After documentation generation is complete =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # After documentation generation is complete =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # After documentation generation is complete =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # After documentation generation is complete'
+ continue
+ IFS=
+ read -r line
+ [[     mv "${in_progress_timestamp}" "${completed_timestamp}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # After documentation generation is complete =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # After documentation generation is complete =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     mv "${in_progress_timestamp}" "${completed_timestamp}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     mv "${in_progress_timestamp}" "${completed_timestamp}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    mv "${in_progress_timestamp}" "${completed_timestamp}"'
+ continue
+ IFS=
+ read -r line
+ [[     # Now find and delete old markdown files =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     mv "${in_progress_timestamp}" "${completed_timestamp}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     mv "${in_progress_timestamp}" "${completed_timestamp}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Now find and delete old markdown files =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Now find and delete old markdown files =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Now find and delete old markdown files'
+ continue
+ IFS=
+ read -r line
+ [[     find "${shdoc_base}" -type f -name '*.md' ! -newer "${completed_timestamp}" -exec rm {} \; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Now find and delete old markdown files =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Now find and delete old markdown files =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     find "${shdoc_base}" -type f -name '*.md' ! -newer "${completed_timestamp}" -exec rm {} \; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     find "${shdoc_base}" -type f -name '*.md' ! -newer "${completed_timestamp}" -exec rm {} \; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    find "${shdoc_base}" -type f -name '\''*.md'\'' ! -newer "${completed_timestamp}" -exec rm {} \;'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     find "${shdoc_base}" -type f -name '*.md' ! -newer "${completed_timestamp}" -exec rm {} \; =~ ^}$ ]]
+ [[ false == false ]]
+ [[     find "${shdoc_base}" -type f -name '*.md' ! -newer "${completed_timestamp}" -exec rm {} \; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     set +x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     set +x =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set +x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     set +x =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    set +x'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set +x =~ ^}$ ]]
+ [[ false == false ]]
+ [[     set +x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: general_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: general_help =~ ^#.* ]]
+ extracted_markdown+='# Function: general_help\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^#+ ]]
+ extracted_markdown+=' `general_help` - Display general help options for the '\''help'\'' command.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Provide an overview of the available help commands. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Provide an overview of the available help commands. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide an overview of the available help commands. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide an overview of the available help commands. =~ ^#+ ]]
+ extracted_markdown+='  - Provide an overview of the available help commands.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `general_help` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `general_help` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `general_help` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `general_help` =~ ^#+ ]]
+ extracted_markdown+='  - `general_help`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Lists the general help commands available. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists the general help commands available. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the general help commands available. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the general help commands available. =~ ^#+ ]]
+ extracted_markdown+='  - Lists the general help commands available.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ general_help() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ general_help() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ general_help() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ general_help() { =~ ^#+ ]]
+ [[ general_help() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=general_help
+ function_name=general_help
+ write_function_doc general_help help_sys.sh bin/shinclude/help_sys.sh '# Function: general_help\n `general_help` - Display general help options for the '\''help'\'' command.\n## Description\n- **Purpose**:\n  - Provide an overview of the available help commands.\n- **Usage**: \n  - `general_help`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the general help commands available.\n- **Exceptions**: \n  - None\n'
+ local function_name=general_help
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: general_help\n `general_help` - Display general help options for the '\''help'\'' command.\n## Description\n- **Purpose**:\n  - Provide an overview of the available help commands.\n- **Usage**: \n  - `general_help`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the general help commands available.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/general_help.md
+ echo -e '## general_help'
+ echo -e '# Function: general_help\n `general_help` - Display general help options for the '\''help'\'' command.\n## Description\n- **Purpose**:\n  - Provide an overview of the available help commands.\n- **Usage**: \n  - `general_help`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the general help commands available.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/general_help.md
+ local file_path=docs/shdoc/bin/shinclude/functions/general_help.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry general_help help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=general_help
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/general_help.md
++ function_description general_help
++ local function_name=general_help
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/general_help.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/general_help.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/general_help.md
+++ tail -n 1
++ description=' `general_help` - Display general help options for the '\''help'\'' command.'
++ description='Display general help options for the '\''help'\'' command.'
++ description='Display general help options for the '\''help'\'' command.'
++ echo 'Display general help options for the '\''help'\'' command.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' general_help docs/shdoc/bin/shinclude/functions/general_help.md 'Display general help options for the '\''help'\'' command.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo -e "\nAvailable commands for '\''vhelp'\'':\n"'
+ continue
+ IFS=
+ read -r line
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "  - **functions**:         List available functions and their purpose." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "  - **functions**:         List available functions and their purpose."'
+ continue
+ IFS=
+ read -r line
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "  - **scripts**:           List available scripts and their purpose." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "  - **scripts**:           List available scripts and their purpose."'
+ continue
+ IFS=
+ read -r line
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "  - **generate_markdown**: Generate Markdown documentation for all functions."'
+ continue
+ IFS=
+ read -r line
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo -e "\nTo get help on a specific function, use '\''vhelp function_name'\''.\n"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: help_scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: help_scripts =~ ^#.* ]]
+ extracted_markdown+='# Function: help_scripts\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^#+ ]]
+ extracted_markdown+=' `help_scripts` - List sourced scripts and their purpose.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Display a list of sourced scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Display a list of sourced scripts. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display a list of sourced scripts. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display a list of sourced scripts. =~ ^#+ ]]
+ extracted_markdown+='  - Display a list of sourced scripts.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `help_scripts` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `help_scripts` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_scripts` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_scripts` =~ ^#+ ]]
+ extracted_markdown+='  - `help_scripts`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Lists the names of the sourced scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists the names of the sourced scripts. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the names of the sourced scripts. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the names of the sourced scripts. =~ ^#+ ]]
+ extracted_markdown+='  - Lists the names of the sourced scripts.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ help_scripts() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ help_scripts() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_scripts() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_scripts() { =~ ^#+ ]]
+ [[ help_scripts() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=help_scripts
+ function_name=help_scripts
+ write_function_doc help_scripts help_sys.sh bin/shinclude/help_sys.sh '# Function: help_scripts\n `help_scripts` - List sourced scripts and their purpose.\n## Description\n- **Purpose**:\n  - Display a list of sourced scripts.\n- **Usage**: \n  - `help_scripts`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the names of the sourced scripts.\n- **Exceptions**: \n  - None\n'
+ local function_name=help_scripts
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: help_scripts\n `help_scripts` - List sourced scripts and their purpose.\n## Description\n- **Purpose**:\n  - Display a list of sourced scripts.\n- **Usage**: \n  - `help_scripts`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the names of the sourced scripts.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/help_scripts.md
+ echo -e '## help_scripts'
+ echo -e '# Function: help_scripts\n `help_scripts` - List sourced scripts and their purpose.\n## Description\n- **Purpose**:\n  - Display a list of sourced scripts.\n- **Usage**: \n  - `help_scripts`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the names of the sourced scripts.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/help_scripts.md
+ local file_path=docs/shdoc/bin/shinclude/functions/help_scripts.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry help_scripts help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=help_scripts
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/help_scripts.md
++ function_description help_scripts
++ local function_name=help_scripts
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/help_scripts.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/help_scripts.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/help_scripts.md
+++ tail -n 1
++ description=' `help_scripts` - List sourced scripts and their purpose.'
++ description='List sourced scripts and their purpose.'
++ description='List sourced scripts and their purpose.'
++ echo 'List sourced scripts and their purpose.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' help_scripts docs/shdoc/bin/shinclude/functions/help_scripts.md 'List sourced scripts and their purpose.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script'
+ continue
+ IFS=
+ read -r line
+ [[     local markdown_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local markdown_file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local markdown_file'
+ continue
+ IFS=
+ read -r line
+ [[     local description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local markdown_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local description =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local description'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local description =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo -e "\nList of sourced scripts and their purpose:\n"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for script in "${sorted_script_names[@]}"; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for script in "${sorted_script_names[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ [[         printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "$(script_description "$script")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "$(script_description "$script")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "$(script_description "$script")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "$(script_description "$script")"'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "$(script_description "$script")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "$(script_description "$script")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo -e "\nUse '\''vhelp \`script_name\` for detailed information on each script"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: specific_script_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: specific_script_help =~ ^#.* ]]
+ extracted_markdown+='# Function: specific_script_help\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^#+ ]]
+ extracted_markdown+=' `specific_script_help` - Provide detailed documentation for a given script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Display documentation for a specific script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific script. =~ ^#+ ]]
+ extracted_markdown+='  - Display documentation for a specific script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `specific_script_help <script_name>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `specific_script_help <script_name>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_script_help <script_name>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_script_help <script_name>` =~ ^#+ ]]
+ extracted_markdown+='  - `specific_script_help <script_name>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^#+ ]]
+ extracted_markdown+='  - `script_name`: The name of the script to get help for.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Displays the documentation for the specified script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified script. =~ ^#+ ]]
+ extracted_markdown+='  - Displays the documentation for the specified script.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Displays a message if the script is unknown or has no documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ specific_script_help() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ specific_script_help() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_script_help() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_script_help() { =~ ^#+ ]]
+ [[ specific_script_help() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=specific_script_help
+ function_name=specific_script_help
+ write_function_doc specific_script_help help_sys.sh bin/shinclude/help_sys.sh '# Function: specific_script_help\n `specific_script_help` - Provide detailed documentation for a given script.\n## Description\n- **Purpose**:\n  - Display documentation for a specific script.\n- **Usage**: \n  - `specific_script_help <script_name>`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `script_name`: The name of the script to get help for.\n- **Output**: \n  - Displays the documentation for the specified script.\n- **Exceptions**: \n  - Displays a message if the script is unknown or has no documentation.\n'
+ local function_name=specific_script_help
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: specific_script_help\n `specific_script_help` - Provide detailed documentation for a given script.\n## Description\n- **Purpose**:\n  - Display documentation for a specific script.\n- **Usage**: \n  - `specific_script_help <script_name>`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `script_name`: The name of the script to get help for.\n- **Output**: \n  - Displays the documentation for the specified script.\n- **Exceptions**: \n  - Displays a message if the script is unknown or has no documentation.\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/specific_script_help.md
+ echo -e '## specific_script_help'
+ echo -e '# Function: specific_script_help\n `specific_script_help` - Provide detailed documentation for a given script.\n## Description\n- **Purpose**:\n  - Display documentation for a specific script.\n- **Usage**: \n  - `specific_script_help <script_name>`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `script_name`: The name of the script to get help for.\n- **Output**: \n  - Displays the documentation for the specified script.\n- **Exceptions**: \n  - Displays a message if the script is unknown or has no documentation.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/specific_script_help.md
+ local file_path=docs/shdoc/bin/shinclude/functions/specific_script_help.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry specific_script_help help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=specific_script_help
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/specific_script_help.md
++ function_description specific_script_help
++ local function_name=specific_script_help
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/specific_script_help.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/specific_script_help.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/specific_script_help.md
+++ tail -n 1
++ description=' `specific_script_help` - Provide detailed documentation for a given script.'
++ description='Provide detailed documentation for a given script.'
++ description='Provide detailed documentation for a given script.'
++ echo 'Provide detailed documentation for a given script.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' specific_script_help docs/shdoc/bin/shinclude/functions/specific_script_help.md 'Provide detailed documentation for a given script.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local script=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script=$1'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ -v __VENV_SCRIPTS[$script] ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_SCRIPTS[$script]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_SCRIPTS[$script]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local markdown_file="${__VENV_BASE}/${__VENV_SCRIPTS[$script]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local markdown_file="${__VENV_BASE}/${__VENV_SCRIPTS[$script]}"'
+ continue
+ IFS=
+ read -r line
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_SCRIPTS[$script]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_SCRIPTS[$script]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ -f "${markdown_file}" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [[ -f "${markdown_file}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ${MD_PROCESSOR:-cat} "${markdown_file}"'
+ continue
+ IFS=
+ read -r line
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ [[             echo "No documentation available for '${script}'." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${script}'." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "No documentation available for '${script}'." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "No documentation available for '\''${script}'\''."'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${script}'." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "No documentation available for '${script}'." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[         return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[     echo "Unknown script: '${script}'" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown script: '${script}'" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Unknown script: '${script}'" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Unknown script: '\''${script}'\''"'
+ continue
+ IFS=
+ read -r line
+ [[     general_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown script: '${script}'" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Unknown script: '${script}'" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     general_help =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    general_help'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^}$ ]]
+ [[ false == false ]]
+ [[     general_help =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: specific_function_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: specific_function_help =~ ^#.* ]]
+ extracted_markdown+='# Function: specific_function_help\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^#+ ]]
+ extracted_markdown+=' `specific_function_help` - Provide detailed documentation for a given function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Display documentation for a specific function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific function. =~ ^#+ ]]
+ extracted_markdown+='  - Display documentation for a specific function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `specific_function_help "function_name"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `specific_function_help "function_name"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_function_help "function_name"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_function_help "function_name"` =~ ^#+ ]]
+ extracted_markdown+='  - `specific_function_help "function_name"`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^#+ ]]
+ extracted_markdown+='  - `function_name`: The name of the function to get help for.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Displays the documentation for the specified function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified function. =~ ^#+ ]]
+ extracted_markdown+='  - Displays the documentation for the specified function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^#+ ]]
+ extracted_markdown+='  - Displays general help if the function is unknown or internal.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ specific_function_help() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ specific_function_help() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_function_help() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_function_help() { =~ ^#+ ]]
+ [[ specific_function_help() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=specific_function_help
+ function_name=specific_function_help
+ write_function_doc specific_function_help help_sys.sh bin/shinclude/help_sys.sh '# Function: specific_function_help\n `specific_function_help` - Provide detailed documentation for a given function.\n## Description\n- **Purpose**:\n  - Display documentation for a specific function.\n- **Usage**: \n  - `specific_function_help "function_name"`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `function_name`: The name of the function to get help for.\n- **Output**: \n  - Displays the documentation for the specified function.\n- **Exceptions**: \n  - Displays general help if the function is unknown or internal.\n'
+ local function_name=specific_function_help
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: specific_function_help\n `specific_function_help` - Provide detailed documentation for a given function.\n## Description\n- **Purpose**:\n  - Display documentation for a specific function.\n- **Usage**: \n  - `specific_function_help "function_name"`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `function_name`: The name of the function to get help for.\n- **Output**: \n  - Displays the documentation for the specified function.\n- **Exceptions**: \n  - Displays general help if the function is unknown or internal.\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/specific_function_help.md
+ echo -e '## specific_function_help'
+ echo -e '# Function: specific_function_help\n `specific_function_help` - Provide detailed documentation for a given function.\n## Description\n- **Purpose**:\n  - Display documentation for a specific function.\n- **Usage**: \n  - `specific_function_help "function_name"`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `function_name`: The name of the function to get help for.\n- **Output**: \n  - Displays the documentation for the specified function.\n- **Exceptions**: \n  - Displays general help if the function is unknown or internal.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/specific_function_help.md
+ local file_path=docs/shdoc/bin/shinclude/functions/specific_function_help.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry specific_function_help help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=specific_function_help
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/specific_function_help.md
++ function_description specific_function_help
++ local function_name=specific_function_help
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/specific_function_help.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/specific_function_help.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/specific_function_help.md
+++ tail -n 1
++ description=' `specific_function_help` - Provide detailed documentation for a given function.'
++ description='Provide detailed documentation for a given function.'
++ description='Provide detailed documentation for a given function.'
++ echo 'Provide detailed documentation for a given function.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' specific_function_help docs/shdoc/bin/shinclude/functions/specific_function_help.md 'Provide detailed documentation for a given function.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local func=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local func=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local func=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local func=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local func=$1'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local func=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local func=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "The function '\''${func}'\'' is for internal use. Please refer to the system documentation."'
+ continue
+ IFS=
+ read -r line
+ [[         return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo ""'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ -v __VENV_FUNCTIONS[$func] ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$func]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$func]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local markdown_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$func]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local markdown_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$func]}"'
+ continue
+ IFS=
+ read -r line
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$func]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local markdown_file="${__VENV_BASE}/${__VENV_FUNCTIONS[$func]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ -f "${markdown_file}" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [[ -f "${markdown_file}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ${MD_PROCESSOR:-cat} "${markdown_file}"'
+ continue
+ IFS=
+ read -r line
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ [[             echo "No documentation available for '${func}'." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${func}'." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "No documentation available for '${func}'." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "No documentation available for '\''${func}'\''."'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${func}'." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "No documentation available for '${func}'." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[         return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[     echo "Unknown function: '${func}'" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown function: '${func}'" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Unknown function: '${func}'" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Unknown function: '\''${func}'\''"'
+ continue
+ IFS=
+ read -r line
+ [[     general_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown function: '${func}'" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Unknown function: '${func}'" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     general_help =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    general_help'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^}$ ]]
+ [[ false == false ]]
+ [[     general_help =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: help_functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: help_functions =~ ^#.* ]]
+ extracted_markdown+='# Function: help_functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^#+ ]]
+ extracted_markdown+=' `help_functions` - List available functions and how to get their documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^#+ ]]
+ extracted_markdown+='  - Provide a list of available functions and guidance on getting detailed documentation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^#+ ]]
+ extracted_markdown+='- **Usage**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `help_functions` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `help_functions` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_functions` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_functions` =~ ^#+ ]]
+ extracted_markdown+='  - `help_functions`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Lists available functions and how to get more information about them. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists available functions and how to get more information about them. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists available functions and how to get more information about them. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists available functions and how to get more information about them. =~ ^#+ ]]
+ extracted_markdown+='  - Lists available functions and how to get more information about them.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^#+ ]]
+ extracted_markdown+='  - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ help_functions() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ help_functions() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_functions() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_functions() { =~ ^#+ ]]
+ [[ help_functions() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=help_functions
+ function_name=help_functions
+ write_function_doc help_functions help_sys.sh bin/shinclude/help_sys.sh '# Function: help_functions\n `help_functions` - List available functions and how to get their documentation.\n## Description\n- **Purpose**:\n  - Provide a list of available functions and guidance on getting detailed documentation.\n- **Usage**:\n  - `help_functions`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists available functions and how to get more information about them.\n- **Exceptions**: \n  - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.\n'
+ local function_name=help_functions
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: help_functions\n `help_functions` - List available functions and how to get their documentation.\n## Description\n- **Purpose**:\n  - Provide a list of available functions and guidance on getting detailed documentation.\n- **Usage**:\n  - `help_functions`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists available functions and how to get more information about them.\n- **Exceptions**: \n  - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/help_functions.md
+ echo -e '## help_functions'
+ echo -e '# Function: help_functions\n `help_functions` - List available functions and how to get their documentation.\n## Description\n- **Purpose**:\n  - Provide a list of available functions and guidance on getting detailed documentation.\n- **Usage**:\n  - `help_functions`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists available functions and how to get more information about them.\n- **Exceptions**: \n  - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/help_functions.md
+ local file_path=docs/shdoc/bin/shinclude/functions/help_functions.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry help_functions help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=help_functions
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/help_functions.md
++ function_description help_functions
++ local function_name=help_functions
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/help_functions.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/help_functions.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/help_functions.md
+++ tail -n 1
++ description=' `help_functions` - List available functions and how to get their documentation.'
++ description='List available functions and how to get their documentation.'
++ description='List available functions and how to get their documentation.'
++ echo 'List available functions and how to get their documentation.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' help_functions docs/shdoc/bin/shinclude/functions/help_functions.md 'List available functions and how to get their documentation.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local description =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local description =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local description'
+ continue
+ IFS=
+ read -r line
+ [[     local line =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local description =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local line =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local line'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local line =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo -e "\nAvailable functions and their brief descriptions:\n"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     for function in ${sorted_function_names[@]}; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for function in ${sorted_function_names[@]}; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for function in ${sorted_function_names[@]}; do'
+ continue
+ IFS=
+ read -r line
+ [[         # Skip internal functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Skip internal functions =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Skip internal functions =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Skip internal functions'
+ continue
+ IFS=
+ read -r line
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Skip internal functions =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Skip internal functions =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[             continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             continue =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            continue'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[             continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[         printf "  * %-${longest_function_name}s %s\n" "${function}:" "$(function_description "$function")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "  * %-${longest_function_name}s %s\n" "${function}:" "$(function_description "$function")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         printf "  * %-${longest_function_name}s %s\n" "${function}:" "$(function_description "$function")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        printf "  * %-${longest_function_name}s %s\n" "${function}:" "$(function_description "$function")"'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "  * %-${longest_function_name}s %s\n" "${function}:" "$(function_description "$function")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         printf "  * %-${longest_function_name}s %s\n" "${function}:" "$(function_description "$function")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo -e "\nUse '\''vhelp \`function_name\`'\'' for detailed information on each function.\n"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ } =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: vhelp =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vhelp =~ ^#.* ]]
+ extracted_markdown+='# Function: vhelp\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^#+ ]]
+ extracted_markdown+=' `vhelp` - Main entry point for the help system.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^#+ ]]
+ extracted_markdown+='  - Facilitates the help system by initializing and delegating to other help functions.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vhelp [subcommand]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vhelp [subcommand]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp [subcommand]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp [subcommand]` =~ ^#+ ]]
+ extracted_markdown+='  - `vhelp [subcommand]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^#+ ]]
+ extracted_markdown+='  - `subcommand` (optional): The specific help topic or function name.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^#+ ]]
+ extracted_markdown+='  - Help information based on the optional subcommand, or general help if none provided.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ vhelp() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vhelp() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vhelp() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vhelp() { =~ ^#+ ]]
+ [[ vhelp() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=vhelp
+ function_name=vhelp
+ write_function_doc vhelp help_sys.sh bin/shinclude/help_sys.sh '# Function: vhelp\n `vhelp` - Main entry point for the help system.\n## Description\n- **Purpose**:\n  - Facilitates the help system by initializing and delegating to other help functions.\n- **Usage**: \n  - `vhelp [subcommand]`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `subcommand` (optional): The specific help topic or function name.\n- **Output**: \n  - Help information based on the optional subcommand, or general help if none provided.\n- **Exceptions**: \n  - None\n'
+ local function_name=vhelp
+ shift
+ local script_name=help_sys.sh
+ shift
+ local script_dir=bin/shinclude/help_sys.sh
+ shift
+ local 'function_markdown=# Function: vhelp\n `vhelp` - Main entry point for the help system.\n## Description\n- **Purpose**:\n  - Facilitates the help system by initializing and delegating to other help functions.\n- **Usage**: \n  - `vhelp [subcommand]`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `subcommand` (optional): The specific help topic or function name.\n- **Output**: \n  - Help information based on the optional subcommand, or general help if none provided.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=help_sys_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/vhelp.md
+ echo -e '## vhelp'
+ echo -e '# Function: vhelp\n `vhelp` - Main entry point for the help system.\n## Description\n- **Purpose**:\n  - Facilitates the help system by initializing and delegating to other help functions.\n- **Usage**: \n  - `vhelp [subcommand]`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `subcommand` (optional): The specific help topic or function name.\n- **Output**: \n  - Help information based on the optional subcommand, or general help if none provided.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [help_sys.sh](/bin/shinclude/help_sys.sh/help_sys_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/vhelp.md
+ local file_path=docs/shdoc/bin/shinclude/functions/vhelp.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry vhelp help_sys.sh bin/shinclude/help_sys.sh
+ local function_name=vhelp
+ local script_name=help_sys.sh
+ local script_dir=bin/shinclude/help_sys.sh
+ local script_readme_file=bin/shinclude/help_sys.sh/help_sys_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/vhelp.md
++ function_description vhelp
++ local function_name=vhelp
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vhelp.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vhelp.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vhelp.md
+++ tail -n 1
++ description=' `vhelp` - Main entry point for the help system.'
++ description='Main entry point for the help system.'
++ description='Main entry point for the help system.'
++ echo 'Main entry point for the help system.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' vhelp docs/shdoc/bin/shinclude/functions/vhelp.md 'Main entry point for the help system.'
bash: bin/shinclude/help_sys.sh/help_sys_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local subcommand=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local subcommand=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local subcommand=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local subcommand=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local subcommand=$1'
+ continue
+ IFS=
+ read -r line
+ [[     local is_script=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local subcommand=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local subcommand=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local is_script=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local is_script=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local is_script=0'
+ continue
+ IFS=
+ read -r line
+ [[     local md_command =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local is_script=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local is_script=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local md_command =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local md_command =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local md_command'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local md_command =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local md_command =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Initialize help, if it hasn't been already =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Initialize help, if it hasn't been already =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Initialize help, if it hasn't been already =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Initialize help, if it hasn't been already =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Initialize help, if it hasn'\''t been already'
+ continue
+ IFS=
+ read -r line
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Initialize help, if it hasn't been already =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Initialize help, if it hasn't been already =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         init_help_system =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         init_help_system =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         init_help_system =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        init_help_system'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         init_help_system =~ ^}$ ]]
+ [[ false == false ]]
+ [[         init_help_system =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Use the markdown processor if available, otherwise default to 'cat' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Use the markdown processor if available, otherwise default to '\''cat'\'''
+ continue
+ IFS=
+ read -r line
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the subcommand is a known script name (without the .sh extension) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Check if the subcommand is a known script name (without the .sh extension)'
+ continue
+ IFS=
+ read -r line
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for script in ${__VENV_SOURCED_LIST[@]}; do'
+ continue
+ IFS=
+ read -r line
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [[ "${script##*/}" == "${subcommand}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[             is_script=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             is_script=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             is_script=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            is_script=1'
+ continue
+ IFS=
+ read -r line
+ [[             break =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             is_script=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             is_script=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             break =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             break =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            break'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             break =~ ^}$ ]]
+ [[ false == false ]]
+ [[             break =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     case "${subcommand}" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     case "${subcommand}" in =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "${subcommand}" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "${subcommand}" in =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    case "${subcommand}" in'
+ continue
+ IFS=
+ read -r line
+ [[         "generate_markdown") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "${subcommand}" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "${subcommand}" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "generate_markdown") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "generate_markdown") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "generate_markdown")'
+ continue
+ IFS=
+ read -r line
+ [[             echo "Starting markdown generation..." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "generate_markdown") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "generate_markdown") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Starting markdown generation..." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "Starting markdown generation..." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "Starting markdown generation..."'
+ continue
+ IFS=
+ read -r line
+ [[             generate_markdown || errno_exit 1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Starting markdown generation..." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "Starting markdown generation..." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             generate_markdown || errno_exit 1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             generate_markdown || errno_exit 1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            generate_markdown || errno_exit 1'
+ continue
+ IFS=
+ read -r line
+ [[             echo "Markdown generation complete." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             generate_markdown || errno_exit 1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             generate_markdown || errno_exit 1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Markdown generation complete." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "Markdown generation complete." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "Markdown generation complete."'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Markdown generation complete." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "Markdown generation complete." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         "functions") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "functions") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "functions") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "functions")'
+ continue
+ IFS=
+ read -r line
+ [[             help_functions | ${md_command} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "functions") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "functions") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_functions | ${md_command} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             help_functions | ${md_command} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            help_functions | ${md_command}'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_functions | ${md_command} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             help_functions | ${md_command} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         "scripts") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "scripts") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "scripts") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "scripts")'
+ continue
+ IFS=
+ read -r line
+ [[             help_scripts | ${md_command} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "scripts") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "scripts") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_scripts | ${md_command} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             help_scripts | ${md_command} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            help_scripts | ${md_command}'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_scripts | ${md_command} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             help_scripts | ${md_command} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         "") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "")'
+ continue
+ IFS=
+ read -r line
+ [[             general_help | ${md_command} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             general_help | ${md_command} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             general_help | ${md_command} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            general_help | ${md_command}'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             general_help | ${md_command} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             general_help | ${md_command} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ [[             if (( is_script )); then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if (( is_script )); then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             if (( is_script )); then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            if (( is_script )); then'
+ continue
+ IFS=
+ read -r line
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if (( is_script )); then =~ ^}$ ]]
+ [[ false == false ]]
+ [[             if (( is_script )); then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                specific_script_help "${subcommand}" | ${md_command} || errno_exit 22'
+ continue
+ IFS=
+ read -r line
+ [[             else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            else'
+ continue
+ IFS=
+ read -r line
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^}$ ]]
+ [[ false == false ]]
+ [[             else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                specific_function_help "${subcommand}" | ${md_command} || errno_exit 22'
+ continue
+ IFS=
+ read -r line
+ [[             fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            fi'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[             fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ write_table_footer bin/shinclude/help_sys_sh.md
+ local file_path=bin/shinclude/help_sys_sh.md
+ echo -e '</table></pre>'
+ write_page_footer bin/shinclude/help_sys_sh.md
+ local file_path=bin/shinclude/help_sys_sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ for script_path in "${script_files[@]}"
+ local script_name
++ basename bin/shinclude/init_env.sh
+ script_name=init_env.sh
+ local script_readme_file=bin/shinclude/init_env_sh.md
+ log_message INFO 'Generating markdown for script: init_env.sh'
+ local message_level=INFO
+ shift
+ local 'message_out=Generating markdown for script: init_env.sh'
+ [[ -z _ ]]
+ '[' 30 -le 20 ']'
+ local in_script_doc=false
+ local in_function_doc=false
+ local script_entry=false
+ local previous_line
+ local extracted_markdown=
+ local function_name=
+ IFS=
+ read -r line
+ [[ #!/bin/bash =~ ^#! ]]
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # # Script: init_env.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: init_env.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: init_env.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: init_env.sh =~ ^#+ ]]
+ extracted_markdown+='# Script: init_env.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `init_env.sh` - Initialize Environment and Source Utility Scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `init_env.sh` - Initialize Environment and Source Utility Scripts =~ ^#+ ]]
+ extracted_markdown+='`init_env.sh` - Initialize Environment and Source Utility Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files. =~ ^#+ ]]
+ extracted_markdown+='  - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts: =~ ^#+ ]]
+ extracted_markdown+='  - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     source /path/to/init_env.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source /path/to/init_env.sh =~ ^#+ ]]
+ extracted_markdown+='    source /path/to/init_env.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. The script operates without requiring any input parameters. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. The script operates without requiring any input parameters. =~ ^#+ ]]
+ extracted_markdown+='  - None. The script operates without requiring any input parameters.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments. =~ ^#+ ]]
+ extracted_markdown+='  - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails. =~ ^#+ ]]
+ extracted_markdown+='  - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Dependencies =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Dependencies =~ ^#+ ]]
+ extracted_markdown+='## Dependencies\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - Utility scripts located in `__VENV_INCLUDE`: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - Utility scripts located in `__VENV_INCLUDE`: =~ ^#+ ]]
+ extracted_markdown+='- Utility scripts located in `__VENV_INCLUDE`:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `util_funcs.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `util_funcs.sh` =~ ^#+ ]]
+ extracted_markdown+='  - `util_funcs.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `help_sys.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `help_sys.sh` =~ ^#+ ]]
+ extracted_markdown+='  - `help_sys.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `errno.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `errno.sh` =~ ^#+ ]]
+ extracted_markdown+='  - `errno.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `venv_funcs.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `venv_funcs.sh` =~ ^#+ ]]
+ extracted_markdown+='  - `venv_funcs.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `wrapper_funcs.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `wrapper_funcs.sh` =~ ^#+ ]]
+ extracted_markdown+='  - `wrapper_funcs.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - Conda environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - Conda environment =~ ^#+ ]]
+ extracted_markdown+='- Conda environment\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ write_script_doc init_env.sh bin/shinclude '# Script: init_env.sh\n`init_env.sh` - Initialize Environment and Source Utility Scripts\n## Description\n- **Purpose**: \n  - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.\n- **Usage**: \n  - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:\n    ```bash\n    source /path/to/init_env.sh\n    ```\n- **Input Parameters**: \n  - None. The script operates without requiring any input parameters.\n- **Output**: \n  - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.\n- **Exceptions**: \n  - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.\n#\n## Dependencies\n- Utility scripts located in `__VENV_INCLUDE`:\n  - `util_funcs.sh`\n  - `help_sys.sh`\n  - `errno.sh`\n  - `venv_funcs.sh`\n  - `wrapper_funcs.sh`\n- Conda environment\n'
+ local script_name=init_env.sh
+ shift
+ local script_dir=bin/shinclude
+ shift
+ local 'script_markdown=# Script: init_env.sh\n`init_env.sh` - Initialize Environment and Source Utility Scripts\n## Description\n- **Purpose**: \n  - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.\n- **Usage**: \n  - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:\n    ```bash\n    source /path/to/init_env.sh\n    ```\n- **Input Parameters**: \n  - None. The script operates without requiring any input parameters.\n- **Output**: \n  - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.\n- **Exceptions**: \n  - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.\n#\n## Dependencies\n- Utility scripts located in `__VENV_INCLUDE`:\n  - `util_funcs.sh`\n  - `help_sys.sh`\n  - `errno.sh`\n  - `venv_funcs.sh`\n  - `wrapper_funcs.sh`\n- Conda environment\n'
+ local markdown_file_name=docs/shdoc/bin/shinclude/scripts/init_env.sh.md
+ local script_readme_file=bin/shinclude/init_env_sh.md
+ echo -e '# Script: init_env.sh\n`init_env.sh` - Initialize Environment and Source Utility Scripts\n## Description\n- **Purpose**: \n  - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.\n- **Usage**: \n  - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:\n    ```bash\n    source /path/to/init_env.sh\n    ```\n- **Input Parameters**: \n  - None. The script operates without requiring any input parameters.\n- **Output**: \n  - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.\n- **Exceptions**: \n  - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.\n#\n## Dependencies\n- Utility scripts located in `__VENV_INCLUDE`:\n  - `util_funcs.sh`\n  - `help_sys.sh`\n  - `errno.sh`\n  - `venv_funcs.sh`\n  - `wrapper_funcs.sh`\n- Conda environment\n'
+ echo -e '\n'
+ echo -e '## Function Defniitions\n'
+ echo -e '* [init_env.sh](/bin/shinclude/init_env_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/scripts/init_env.sh.md
+ local file_path=docs/shdoc/bin/shinclude/scripts/init_env.sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_readme_header init_env.sh bin/shinclude
+ local script_name=init_env.sh
+ local script_dir=bin/shinclude
+ local script_doc_file=docs/shdoc/bin/shinclude/scripts/init_env.sh.md
+ local script_readme_file
++ get_script_readme_file init_env.sh bin/shinclude
++ local script_name=init_env.sh
++ local script_dir=bin/shinclude
++ local script_readme_file=bin/shinclude/init_env_sh.md
++ echo bin/shinclude/init_env_sh.md
+ script_readme_file=bin/shinclude/init_env_sh.md
+ echo -e '# Functions Defined in Script: init_env.sh\n'
+ echo -e '\n'
++ script_description init_env.sh
++ local script_name=init_env.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/init_env.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/init_env.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/init_env.sh.md
+++ tail -n 1
++ description='`init_env.sh` - Initialize Environment and Source Utility Scripts'
++ description='Initialize Environment and Source Utility Scripts'
++ description='Initialize Environment and Source Utility Scripts'
++ echo 'Initialize Environment and Source Utility Scripts'
+ echo -e '### [init_env.sh](/docs/shdoc/bin/shinclude/scripts/init_env.sh.md) - Initialize Environment and Source Utility Scripts\n'
+ echo -e '\n'
+ echo -e '## List of Functions Defined:\n'
+ echo -e '\n'
+ printf '<pre><table>\n'
+ write_scripts_readme_entry init_env.sh bin/shinclude
+ local script_name=init_env.sh
+ local script_dir=bin/shinclude
+ local script_readme_file
++ script_readme_file init_env.sh bin/shinclude
bash: script_readme_file: command not found
+ script_readme_file=
++ script_description init_env.sh
++ local script_name=init_env.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/init_env.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/init_env.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/init_env.sh.md
+++ tail -n 1
++ description='`init_env.sh` - Initialize Environment and Source Utility Scripts'
++ description='Initialize Environment and Source Utility Scripts'
++ description='Initialize Environment and Source Utility Scripts'
++ echo 'Initialize Environment and Source Utility Scripts'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' '' init_env.sh 'Initialize Environment and Source Utility Scripts'
++ get_scripts_readme_file ''
++ local readme_dir=
++ local scripts_readme_file=docs/shdoc/README.md
++ echo docs/shdoc/README.md
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Determine the real path of the script =~ ^#.* ]]
+ extracted_markdown+='Determine the real path of the script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Extract script name, directory, and arguments =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Extract script name, directory, and arguments =~ ^#.* ]]
+ extracted_markdown+='Extract script name, directory, and arguments\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#+ ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#+ ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BASE=$(dirname "${__VENV_BIN}")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_ARGS=$* =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#+ ]]
+ [[ __VENV_ARGS=$* =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_ARGS=$* =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_ARGS=$*'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_ARGS=$* =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#+ ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ continue
+ IFS=
+ read -r line
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ [[     "source_util_script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "source_util_script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "source_util_script" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "source_util_script"'
+ continue
+ IFS=
+ read -r line
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "source_util_script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "source_util_script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __rc__=0 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __rc__=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=__rc__=0
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: source_util_script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: source_util_script =~ ^#.* ]]
+ extracted_markdown+='# Function: source_util_script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^#+ ]]
+ extracted_markdown+=' `source_util_script` - Sources a utility script from the specified directory.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^#+ ]]
+ extracted_markdown+='  - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `source_util_script "script_name"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `source_util_script "script_name"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_util_script "script_name"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_util_script "script_name"` =~ ^#+ ]]
+ extracted_markdown+='  - `source_util_script "script_name"`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^#+ ]]
+ extracted_markdown+='  - `script_name`: The name of the script to source (without the `.sh` extension).\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^#+ ]]
+ extracted_markdown+='  - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^#+ ]]
+ extracted_markdown+='  - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ source_util_script() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script() { =~ ^#+ ]]
+ [[ source_util_script() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=source_util_script
+ function_name=source_util_script
+ write_function_doc source_util_script init_env.sh bin/shinclude/init_env.sh '# Function: source_util_script\n `source_util_script` - Sources a utility script from the specified directory.\n## Description\n- **Purpose**: \n  - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.\n- **Usage**: \n  - `source_util_script "script_name"`\n- **Input Parameters**: \n  - `script_name`: The name of the script to source (without the `.sh` extension).\n- **Output**: \n  - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.\n- **Exceptions**: \n  - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.\n'
+ local function_name=source_util_script
+ shift
+ local script_name=init_env.sh
+ shift
+ local script_dir=bin/shinclude/init_env.sh
+ shift
+ local 'function_markdown=# Function: source_util_script\n `source_util_script` - Sources a utility script from the specified directory.\n## Description\n- **Purpose**: \n  - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.\n- **Usage**: \n  - `source_util_script "script_name"`\n- **Input Parameters**: \n  - `script_name`: The name of the script to source (without the `.sh` extension).\n- **Output**: \n  - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.\n- **Exceptions**: \n  - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.\n'
+ local script_readme_file=init_env_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/source_util_script.md
+ echo -e '## source_util_script'
+ echo -e '# Function: source_util_script\n `source_util_script` - Sources a utility script from the specified directory.\n## Description\n- **Purpose**: \n  - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.\n- **Usage**: \n  - `source_util_script "script_name"`\n- **Input Parameters**: \n  - `script_name`: The name of the script to source (without the `.sh` extension).\n- **Output**: \n  - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.\n- **Exceptions**: \n  - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [init_env.sh](/bin/shinclude/init_env.sh/init_env_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/source_util_script.md
+ local file_path=docs/shdoc/bin/shinclude/functions/source_util_script.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry source_util_script init_env.sh bin/shinclude/init_env.sh
+ local function_name=source_util_script
+ local script_name=init_env.sh
+ local script_dir=bin/shinclude/init_env.sh
+ local script_readme_file=bin/shinclude/init_env.sh/init_env_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/source_util_script.md
++ function_description source_util_script
++ local function_name=source_util_script
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/source_util_script.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/source_util_script.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/source_util_script.md
+++ tail -n 1
++ description=' `source_util_script` - Sources a utility script from the specified directory.'
++ description='Sources a utility script from the specified directory.'
++ description='Sources a utility script from the specified directory.'
++ echo 'Sources a utility script from the specified directory.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' source_util_script docs/shdoc/bin/shinclude/functions/source_util_script.md 'Sources a utility script from the specified directory.'
bash: bin/shinclude/init_env.sh/init_env_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local script_name="$1"   =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_name="$1"   =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"   =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1"   =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local script_name="$1"  '
+ continue
+ IFS=
+ read -r line
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"   =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1"   =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \'
+ continue
+ IFS=
+ read -r line
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; }'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^}$ ]]
+ [[ false == false ]]
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # Initialize Conda environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize Conda environment =~ ^#.* ]]
+ extracted_markdown+='Initialize Conda environment\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^#+ ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__conda_setup="$('\''${HOME}/miniconda3/bin/conda'\'' '\''shell.bash'\'' '\''hook'\'' 2> /dev/null)"'
+ continue
+ IFS=
+ read -r line
+ [[ if [ $? -eq 0 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^#+ ]]
+ [[ if [ $? -eq 0 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! if [ $? -eq 0 ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='if [ $? -eq 0 ]; then'
+ continue
+ IFS=
+ read -r line
+ [[     eval "$__conda_setup" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     eval "$__conda_setup" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     eval "$__conda_setup" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     eval "$__conda_setup" =~ ^#+ ]]
+ [[     eval "$__conda_setup" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "$__conda_setup" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    eval "$__conda_setup"'
+ continue
+ IFS=
+ read -r line
+ [[ else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "$__conda_setup" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ else =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#+ ]]
+ [[ else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=else
+ continue
+ IFS=
+ read -r line
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ else =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^#+ ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^#+ ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        . "${HOME}/miniconda3/etc/profile.d/conda.sh"'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     else =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     else =~ ^#+ ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^#+ ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        export PATH="${HOME}/miniconda3/bin:$PATH"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     fi =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     fi =~ ^#+ ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ fi =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#+ ]]
+ [[ fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=fi
+ continue
+ IFS=
+ read -r line
+ [[ unset __conda_setup =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ fi =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ unset __conda_setup =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ unset __conda_setup =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ unset __conda_setup =~ ^#+ ]]
+ [[ unset __conda_setup =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! unset __conda_setup =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='unset __conda_setup'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ unset __conda_setup =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Source utility functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Source utility functions =~ ^#.* ]]
+ extracted_markdown+='Source utility functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ source_util_script "util_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "util_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "util_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "util_funcs" =~ ^#+ ]]
+ [[ source_util_script "util_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "util_funcs" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='source_util_script "util_funcs"'
+ continue
+ IFS=
+ read -r line
+ [[ source_util_script "errno" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "util_funcs" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "errno" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "errno" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "errno" =~ ^#+ ]]
+ [[ source_util_script "errno" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "errno" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='source_util_script "errno"'
+ continue
+ IFS=
+ read -r line
+ [[ source_util_script "help_sys" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "errno" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "help_sys" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "help_sys" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "help_sys" =~ ^#+ ]]
+ [[ source_util_script "help_sys" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "help_sys" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='source_util_script "help_sys"'
+ continue
+ IFS=
+ read -r line
+ [[ source_util_script "wrapper_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "help_sys" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^#+ ]]
+ [[ source_util_script "wrapper_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "wrapper_funcs" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='source_util_script "wrapper_funcs"'
+ continue
+ IFS=
+ read -r line
+ [[ -n source_util_script "venv_funcs" ]]
+ [[ source_util_script "venv_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "venv_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "venv_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "venv_funcs" =~ ^#+ ]]
+ [[ source_util_script "venv_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "venv_funcs" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='source_util_script "venv_funcs"'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ write_table_footer bin/shinclude/init_env_sh.md
+ local file_path=bin/shinclude/init_env_sh.md
+ echo -e '</table></pre>'
+ write_page_footer bin/shinclude/init_env_sh.md
+ local file_path=bin/shinclude/init_env_sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ for script_path in "${script_files[@]}"
+ local script_name
++ basename bin/shinclude/util_funcs.sh
+ script_name=util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs_sh.md
+ log_message INFO 'Generating markdown for script: util_funcs.sh'
+ local message_level=INFO
+ shift
+ local 'message_out=Generating markdown for script: util_funcs.sh'
+ [[ -z _ ]]
+ '[' 30 -le 20 ']'
+ local in_script_doc=false
+ local in_function_doc=false
+ local script_entry=false
+ local previous_line
+ local extracted_markdown=
+ local function_name=
+ IFS=
+ read -r line
+ [[ #!/bin/bash =~ ^#! ]]
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # # Script: util_funcs.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: util_funcs.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: util_funcs.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: util_funcs.sh =~ ^#+ ]]
+ extracted_markdown+='# Script: util_funcs.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `util_funcs.sh` - Utility Functions for Bash Scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `util_funcs.sh` - Utility Functions for Bash Scripts =~ ^#+ ]]
+ extracted_markdown+='`util_funcs.sh` - Utility Functions for Bash Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them. =~ ^#+ ]]
+ extracted_markdown+='  - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Source this script within other Bash scripts to make the utility functions available for use: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script within other Bash scripts to make the utility functions available for use: =~ ^#+ ]]
+ extracted_markdown+='  - Source this script within other Bash scripts to make the utility functions available for use:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     source /path/to/util_funcs.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source /path/to/util_funcs.sh =~ ^#+ ]]
+ extracted_markdown+='    source /path/to/util_funcs.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. This script is intended to be sourced by other scripts and does not require input parameters. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. This script is intended to be sourced by other scripts and does not require input parameters. =~ ^#+ ]]
+ extracted_markdown+='  - None. This script is intended to be sourced by other scripts and does not require input parameters.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Provides utility functions that can be called from other Bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides utility functions that can be called from other Bash scripts. =~ ^#+ ]]
+ extracted_markdown+='  - Provides utility functions that can be called from other Bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling. =~ ^#+ ]]
+ extracted_markdown+='  - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Dependencies =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Dependencies =~ ^#+ ]]
+ extracted_markdown+='## Dependencies\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features. =~ ^#+ ]]
+ extracted_markdown+='- None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ write_script_doc util_funcs.sh bin/shinclude '# Script: util_funcs.sh\n`util_funcs.sh` - Utility Functions for Bash Scripts\n## Description\n- **Purpose**:\n  - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.\n- **Usage**: \n  - Source this script within other Bash scripts to make the utility functions available for use:\n    ```bash\n    source /path/to/util_funcs.sh\n    ```\n- **Input Parameters**: \n  - None. This script is intended to be sourced by other scripts and does not require input parameters.\n- **Output**: \n  - Provides utility functions that can be called from other Bash scripts.\n- **Exceptions**: \n  - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.\n#\n## Dependencies\n- None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.\n'
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude
+ shift
+ local 'script_markdown=# Script: util_funcs.sh\n`util_funcs.sh` - Utility Functions for Bash Scripts\n## Description\n- **Purpose**:\n  - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.\n- **Usage**: \n  - Source this script within other Bash scripts to make the utility functions available for use:\n    ```bash\n    source /path/to/util_funcs.sh\n    ```\n- **Input Parameters**: \n  - None. This script is intended to be sourced by other scripts and does not require input parameters.\n- **Output**: \n  - Provides utility functions that can be called from other Bash scripts.\n- **Exceptions**: \n  - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.\n#\n## Dependencies\n- None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.\n'
+ local markdown_file_name=docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
+ local script_readme_file=bin/shinclude/util_funcs_sh.md
+ echo -e '# Script: util_funcs.sh\n`util_funcs.sh` - Utility Functions for Bash Scripts\n## Description\n- **Purpose**:\n  - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.\n- **Usage**: \n  - Source this script within other Bash scripts to make the utility functions available for use:\n    ```bash\n    source /path/to/util_funcs.sh\n    ```\n- **Input Parameters**: \n  - None. This script is intended to be sourced by other scripts and does not require input parameters.\n- **Output**: \n  - Provides utility functions that can be called from other Bash scripts.\n- **Exceptions**: \n  - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.\n#\n## Dependencies\n- None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.\n'
+ echo -e '\n'
+ echo -e '## Function Defniitions\n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
+ local file_path=docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_readme_header util_funcs.sh bin/shinclude
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude
+ local script_doc_file=docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
+ local script_readme_file
++ get_script_readme_file util_funcs.sh bin/shinclude
++ local script_name=util_funcs.sh
++ local script_dir=bin/shinclude
++ local script_readme_file=bin/shinclude/util_funcs_sh.md
++ echo bin/shinclude/util_funcs_sh.md
+ script_readme_file=bin/shinclude/util_funcs_sh.md
+ echo -e '# Functions Defined in Script: util_funcs.sh\n'
+ echo -e '\n'
++ script_description util_funcs.sh
++ local script_name=util_funcs.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
+++ tail -n 1
++ description='`util_funcs.sh` - Utility Functions for Bash Scripts'
++ description='Utility Functions for Bash Scripts'
++ description='Utility Functions for Bash Scripts'
++ echo 'Utility Functions for Bash Scripts'
+ echo -e '### [util_funcs.sh](/docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md) - Utility Functions for Bash Scripts\n'
+ echo -e '\n'
+ echo -e '## List of Functions Defined:\n'
+ echo -e '\n'
+ printf '<pre><table>\n'
+ write_scripts_readme_entry util_funcs.sh bin/shinclude
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude
+ local script_readme_file
++ script_readme_file util_funcs.sh bin/shinclude
bash: script_readme_file: command not found
+ script_readme_file=
++ script_description util_funcs.sh
++ local script_name=util_funcs.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
+++ tail -n 1
++ description='`util_funcs.sh` - Utility Functions for Bash Scripts'
++ description='Utility Functions for Bash Scripts'
++ description='Utility Functions for Bash Scripts'
++ echo 'Utility Functions for Bash Scripts'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' '' util_funcs.sh 'Utility Functions for Bash Scripts'
++ get_scripts_readme_file ''
++ local readme_dir=
++ local scripts_readme_file=docs/shdoc/README.md
++ echo docs/shdoc/README.md
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Capture the fully qualified path of the sourced script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Capture the fully qualified path of the sourced script =~ ^#.* ]]
+ extracted_markdown+='Capture the fully qualified path of the sourced script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ continue
+ IFS=
+ read -r line
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # Utility functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Utility functions =~ ^#.* ]]
+ extracted_markdown+='Utility functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: strip_space =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: strip_space =~ ^#.* ]]
+ extracted_markdown+='# Function: strip_space\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^#+ ]]
+ extracted_markdown+='`strip_space` - Remove Leading and Trailing Whitespaces\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^#+ ]]
+ extracted_markdown+='  - Removes leading and trailing spaces from the input string.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `strip_space "  string  "` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `strip_space "  string  "` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `strip_space "  string  "` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `strip_space "  string  "` =~ ^#+ ]]
+ extracted_markdown+='  - `strip_space "  string  "`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^#+ ]]
+ extracted_markdown+='  - `str`: The string from which to remove leading and trailing whitespaces.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^#+ ]]
+ extracted_markdown+='  - A new string with whitespaces removed from both ends.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ strip_space() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ strip_space() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ strip_space() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ strip_space() { =~ ^#+ ]]
+ [[ strip_space() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=strip_space
+ function_name=strip_space
+ write_function_doc strip_space util_funcs.sh bin/shinclude/util_funcs.sh '# Function: strip_space\n`strip_space` - Remove Leading and Trailing Whitespaces\n## Description\n- **Purpose**: \n  - Removes leading and trailing spaces from the input string.\n- **Usage**: \n  - `strip_space "  string  "`\n- **Input Parameters**: \n  - `str`: The string from which to remove leading and trailing whitespaces.\n- **Output**: \n  - A new string with whitespaces removed from both ends.\n- **Exceptions**: \n  - None.\n'
+ local function_name=strip_space
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: strip_space\n`strip_space` - Remove Leading and Trailing Whitespaces\n## Description\n- **Purpose**: \n  - Removes leading and trailing spaces from the input string.\n- **Usage**: \n  - `strip_space "  string  "`\n- **Input Parameters**: \n  - `str`: The string from which to remove leading and trailing whitespaces.\n- **Output**: \n  - A new string with whitespaces removed from both ends.\n- **Exceptions**: \n  - None.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/strip_space.md
+ echo -e '## strip_space'
+ echo -e '# Function: strip_space\n`strip_space` - Remove Leading and Trailing Whitespaces\n## Description\n- **Purpose**: \n  - Removes leading and trailing spaces from the input string.\n- **Usage**: \n  - `strip_space "  string  "`\n- **Input Parameters**: \n  - `str`: The string from which to remove leading and trailing whitespaces.\n- **Output**: \n  - A new string with whitespaces removed from both ends.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/strip_space.md
+ local file_path=docs/shdoc/bin/shinclude/functions/strip_space.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry strip_space util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=strip_space
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/strip_space.md
++ function_description strip_space
++ local function_name=strip_space
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/strip_space.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/strip_space.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/strip_space.md
+++ tail -n 1
++ description='`strip_space` - Remove Leading and Trailing Whitespaces'
++ description='Remove Leading and Trailing Whitespaces'
++ description='Remove Leading and Trailing Whitespaces'
++ echo 'Remove Leading and Trailing Whitespaces'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' strip_space docs/shdoc/bin/shinclude/functions/strip_space.md 'Remove Leading and Trailing Whitespaces'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local argstring="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local argstring="$*" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local argstring="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local argstring="$*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local argstring="$*"'
+ continue
+ IFS=
+ read -r line
+ [[     # Remove leading and trailing whitespaces =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local argstring="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local argstring="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove leading and trailing whitespaces =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Remove leading and trailing whitespaces =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Remove leading and trailing whitespaces'
+ continue
+ IFS=
+ read -r line
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove leading and trailing whitespaces =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Remove leading and trailing whitespaces =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "$argstring" | sed '\''s/^ *//;s/ *$//'\'''
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: zero_pad =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: zero_pad =~ ^#.* ]]
+ extracted_markdown+='# Function: zero_pad\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^#+ ]]
+ extracted_markdown+='`zero_pad` - Pad a Single-Digit Number with a Leading Zero\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^#+ ]]
+ extracted_markdown+='  - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^#+ ]]
+ extracted_markdown+='  - Call the function with a number to add a leading zero if it is a single digit. For example:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ extracted_markdown+='    ```bash\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     padded_number=$(zero_pad "5") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     padded_number=$(zero_pad "5") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     padded_number=$(zero_pad "5") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     padded_number=$(zero_pad "5") =~ ^#+ ]]
+ extracted_markdown+='    padded_number=$(zero_pad "5")\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     # Returns "05" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     # Returns "05" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     # Returns "05" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     # Returns "05" =~ ^#+ ]]
+ extracted_markdown+='    # Returns "05"\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ extracted_markdown+='    ```\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `nn`: A number that needs padding. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `nn`: A number that needs padding. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nn`: A number that needs padding. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nn`: A number that needs padding. =~ ^#+ ]]
+ extracted_markdown+='  - `nn`: A number that needs padding.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^#+ ]]
+ extracted_markdown+='  - A string representation of the number, padded with a leading zero if it was a single digit.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^#+ ]]
+ extracted_markdown+='  - None. The function handles single-digit numbers and does not modify numbers with two or more digits.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ zero_pad() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ zero_pad() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ zero_pad() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ zero_pad() { =~ ^#+ ]]
+ [[ zero_pad() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=zero_pad
+ function_name=zero_pad
+ write_function_doc zero_pad util_funcs.sh bin/shinclude/util_funcs.sh '# Function: zero_pad\n`zero_pad` - Pad a Single-Digit Number with a Leading Zero\n## Description\n- **Purpose**: \n  - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.\n- **Usage**: \n  - Call the function with a number to add a leading zero if it is a single digit. For example:\n    ```bash\n    padded_number=$(zero_pad "5")\n    # Returns "05"\n    ```\n- **Input Parameters**: \n  - `nn`: A number that needs padding.\n- **Output**: \n  - A string representation of the number, padded with a leading zero if it was a single digit.\n- **Exceptions**: \n  - None. The function handles single-digit numbers and does not modify numbers with two or more digits.\n'
+ local function_name=zero_pad
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: zero_pad\n`zero_pad` - Pad a Single-Digit Number with a Leading Zero\n## Description\n- **Purpose**: \n  - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.\n- **Usage**: \n  - Call the function with a number to add a leading zero if it is a single digit. For example:\n    ```bash\n    padded_number=$(zero_pad "5")\n    # Returns "05"\n    ```\n- **Input Parameters**: \n  - `nn`: A number that needs padding.\n- **Output**: \n  - A string representation of the number, padded with a leading zero if it was a single digit.\n- **Exceptions**: \n  - None. The function handles single-digit numbers and does not modify numbers with two or more digits.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/zero_pad.md
+ echo -e '## zero_pad'
+ echo -e '# Function: zero_pad\n`zero_pad` - Pad a Single-Digit Number with a Leading Zero\n## Description\n- **Purpose**: \n  - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.\n- **Usage**: \n  - Call the function with a number to add a leading zero if it is a single digit. For example:\n    ```bash\n    padded_number=$(zero_pad "5")\n    # Returns "05"\n    ```\n- **Input Parameters**: \n  - `nn`: A number that needs padding.\n- **Output**: \n  - A string representation of the number, padded with a leading zero if it was a single digit.\n- **Exceptions**: \n  - None. The function handles single-digit numbers and does not modify numbers with two or more digits.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/zero_pad.md
+ local file_path=docs/shdoc/bin/shinclude/functions/zero_pad.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry zero_pad util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=zero_pad
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/zero_pad.md
++ function_description zero_pad
++ local function_name=zero_pad
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/zero_pad.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/zero_pad.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/zero_pad.md
+++ tail -n 1
++ description='`zero_pad` - Pad a Single-Digit Number with a Leading Zero'
++ description='Pad a Single-Digit Number with a Leading Zero'
++ description='Pad a Single-Digit Number with a Leading Zero'
++ echo 'Pad a Single-Digit Number with a Leading Zero'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' zero_pad docs/shdoc/bin/shinclude/functions/zero_pad.md 'Pad a Single-Digit Number with a Leading Zero'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local num="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local num="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local num="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local num="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local num="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     printf "%02d" "${num}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local num="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local num="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "%02d" "${num}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     printf "%02d" "${num}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    printf "%02d" "${num}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "%02d" "${num}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     printf "%02d" "${num}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: next_step =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: next_step =~ ^#.* ]]
+ extracted_markdown+='# Function: next_step\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^#+ ]]
+ extracted_markdown+='`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^#+ ]]
+ extracted_markdown+='  - Increments a given sequence number by 1 and pads it with a zero if necessary.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `next_step "09"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `next_step "09"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `next_step "09"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `next_step "09"` =~ ^#+ ]]
+ extracted_markdown+='  - `next_step "09"`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Scope**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**:  =~ ^#+ ]]
+ extracted_markdown+='- **Scope**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Local. Modifies no global variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Local. Modifies no global variables. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Local. Modifies no global variables. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Local. Modifies no global variables. =~ ^#+ ]]
+ extracted_markdown+='  - Local. Modifies no global variables.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^#+ ]]
+ extracted_markdown+='  1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^#+ ]]
+ extracted_markdown+='  - The next sequence number as a string, zero-padded if necessary.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^#+ ]]
+ extracted_markdown+='  - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ next_step() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ next_step() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ next_step() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ next_step() { =~ ^#+ ]]
+ [[ next_step() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=next_step
+ function_name=next_step
+ write_function_doc next_step util_funcs.sh bin/shinclude/util_funcs.sh '# Function: next_step\n`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed\n## Description\n- **Purpose**:\n  - Increments a given sequence number by 1 and pads it with a zero if necessary.\n- **Usage**: \n  - `next_step "09"`\n- **Scope**: \n  - Local. Modifies no global variables.\n- **Input Parameters**: \n  1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.\n- **Output**: \n  - The next sequence number as a string, zero-padded if necessary.\n- **Exceptions**: \n  - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".\n'
+ local function_name=next_step
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: next_step\n`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed\n## Description\n- **Purpose**:\n  - Increments a given sequence number by 1 and pads it with a zero if necessary.\n- **Usage**: \n  - `next_step "09"`\n- **Scope**: \n  - Local. Modifies no global variables.\n- **Input Parameters**: \n  1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.\n- **Output**: \n  - The next sequence number as a string, zero-padded if necessary.\n- **Exceptions**: \n  - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/next_step.md
+ echo -e '## next_step'
+ echo -e '# Function: next_step\n`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed\n## Description\n- **Purpose**:\n  - Increments a given sequence number by 1 and pads it with a zero if necessary.\n- **Usage**: \n  - `next_step "09"`\n- **Scope**: \n  - Local. Modifies no global variables.\n- **Input Parameters**: \n  1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.\n- **Output**: \n  - The next sequence number as a string, zero-padded if necessary.\n- **Exceptions**: \n  - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/next_step.md
+ local file_path=docs/shdoc/bin/shinclude/functions/next_step.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry next_step util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=next_step
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/next_step.md
++ function_description next_step
++ local function_name=next_step
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/next_step.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/next_step.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/next_step.md
+++ tail -n 1
++ description='`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed'
++ description='Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed'
++ description='Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed'
++ echo 'Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' next_step docs/shdoc/bin/shinclude/functions/next_step.md 'Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local sn="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local sn="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local sn="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local sn="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local sn="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     case "$sn" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local sn="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local sn="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$sn" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "$sn" in =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    case "$sn" in'
+ continue
+ IFS=
+ read -r line
+ [[         ""|[[:space:]]*) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$sn" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "$sn" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ""|[[:space:]]*) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ""|[[:space:]]*) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        ""|[[:space:]]*)'
+ continue
+ IFS=
+ read -r line
+ [[             sn=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ""|[[:space:]]*) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ""|[[:space:]]*) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             sn=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            sn=0'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             sn=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         [0-9]|[0-9][0-9]) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [0-9]|[0-9][0-9]) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         [0-9]|[0-9][0-9]) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        [0-9]|[0-9][0-9])'
+ continue
+ IFS=
+ read -r line
+ [[             sn=$((10#${sn})) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [0-9]|[0-9][0-9]) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         [0-9]|[0-9][0-9]) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=$((10#${sn})) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             sn=$((10#${sn})) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            sn=$((10#${sn}))'
+ continue
+ IFS=
+ read -r line
+ [[             ((sn++)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=$((10#${sn})) =~ ^}$ ]]
+ [[ false == false ]]
+ [[             sn=$((10#${sn})) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ((sn++)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ((sn++)) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ((sn++))'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ((sn++)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ((sn++)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "Exception, sequence must be a value between 00 and 99." >&2'
+ continue
+ IFS=
+ read -r line
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             __rc__=22   # EINVAL: Invalid Argument =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            __rc__=22   # EINVAL: Invalid Argument'
+ continue
+ IFS=
+ read -r line
+ [[             return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^}$ ]]
+ [[ false == false ]]
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ [[     echo "$(zero_pad ${sn})" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$(zero_pad ${sn})" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "$(zero_pad ${sn})" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "$(zero_pad ${sn})"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$(zero_pad ${sn})" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "$(zero_pad ${sn})" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: sort_2d_array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: sort_2d_array =~ ^#.* ]]
+ extracted_markdown+='# Function: sort_2d_array\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^#+ ]]
+ extracted_markdown+='`sort_2d_array` - Sort a Two-Dimensional Array\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^#+ ]]
+ extracted_markdown+='  - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^#+ ]]
+ extracted_markdown+='  - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^#+ ]]
+ extracted_markdown+='  - `array_name`: The name of the array variable that needs to be sorted.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The original array sorted based on the specified criteria. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The original array sorted based on the specified criteria. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The original array sorted based on the specified criteria. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The original array sorted based on the specified criteria. =~ ^#+ ]]
+ extracted_markdown+='  - The original array sorted based on the specified criteria.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^#+ ]]
+ extracted_markdown+='  - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ sort_2d_array() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ sort_2d_array() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ sort_2d_array() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ sort_2d_array() { =~ ^#+ ]]
+ [[ sort_2d_array() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=sort_2d_array
+ function_name=sort_2d_array
+ write_function_doc sort_2d_array util_funcs.sh bin/shinclude/util_funcs.sh '# Function: sort_2d_array\n`sort_2d_array` - Sort a Two-Dimensional Array\n## Description\n- **Purpose**:\n  - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.\n- **Usage**: \n  - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.\n- **Input Parameters**: \n  - `array_name`: The name of the array variable that needs to be sorted.\n- **Output**: \n  - The original array sorted based on the specified criteria.\n- **Exceptions**: \n  - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).\n'
+ local function_name=sort_2d_array
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: sort_2d_array\n`sort_2d_array` - Sort a Two-Dimensional Array\n## Description\n- **Purpose**:\n  - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.\n- **Usage**: \n  - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.\n- **Input Parameters**: \n  - `array_name`: The name of the array variable that needs to be sorted.\n- **Output**: \n  - The original array sorted based on the specified criteria.\n- **Exceptions**: \n  - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/sort_2d_array.md
+ echo -e '## sort_2d_array'
+ echo -e '# Function: sort_2d_array\n`sort_2d_array` - Sort a Two-Dimensional Array\n## Description\n- **Purpose**:\n  - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.\n- **Usage**: \n  - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.\n- **Input Parameters**: \n  - `array_name`: The name of the array variable that needs to be sorted.\n- **Output**: \n  - The original array sorted based on the specified criteria.\n- **Exceptions**: \n  - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/sort_2d_array.md
+ local file_path=docs/shdoc/bin/shinclude/functions/sort_2d_array.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry sort_2d_array util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=sort_2d_array
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/sort_2d_array.md
++ function_description sort_2d_array
++ local function_name=sort_2d_array
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/sort_2d_array.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/sort_2d_array.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/sort_2d_array.md
+++ tail -n 1
++ description='`sort_2d_array` - Sort a Two-Dimensional Array'
++ description='Sort a Two-Dimensional Array'
++ description='Sort a Two-Dimensional Array'
++ echo 'Sort a Two-Dimensional Array'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' sort_2d_array docs/shdoc/bin/shinclude/functions/sort_2d_array.md 'Sort a Two-Dimensional Array'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local array_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local array_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local array_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local array_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local array_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local i j temp1 temp2 len temp_array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local array_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local array_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local i j temp1 temp2 len temp_array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local i j temp1 temp2 len temp_array =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local i j temp1 temp2 len temp_array'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local i j temp1 temp2 len temp_array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local i j temp1 temp2 len temp_array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Assign named array to local array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Assign named array to local array =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign named array to local array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Assign named array to local array =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Assign named array to local array'
+ continue
+ IFS=
+ read -r line
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign named array to local array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Assign named array to local array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    eval "temp_array=(\"\${${array_name}[@]}\")"'
+ continue
+ IFS=
+ read -r line
+ [[     len=${#temp_array[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     len=${#temp_array[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     len=${#temp_array[@]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    len=${#temp_array[@]}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     len=${#temp_array[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     len=${#temp_array[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     for ((i=2; i<len; i+=2)); do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for ((i=2; i<len; i+=2)); do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for ((i=2; i<len; i+=2)); do'
+ continue
+ IFS=
+ read -r line
+ [[         temp1=${temp_array[i]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp1=${temp_array[i]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp1=${temp_array[i]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        temp1=${temp_array[i]}'
+ continue
+ IFS=
+ read -r line
+ [[         temp2=${temp_array[i+1]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp1=${temp_array[i]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp1=${temp_array[i]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp2=${temp_array[i+1]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp2=${temp_array[i+1]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        temp2=${temp_array[i+1]}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp2=${temp_array[i+1]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp2=${temp_array[i+1]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Find the correct position for temp1, temp2 by comparing with all preceding pairs'
+ continue
+ IFS=
+ read -r line
+ [[         j=i =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         j=i =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         j=i =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        j=i'
+ continue
+ IFS=
+ read -r line
+ [[         while [[ j -ge 2 ]]; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         j=i =~ ^}$ ]]
+ [[ false == false ]]
+ [[         j=i =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while [[ j -ge 2 ]]; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         while [[ j -ge 2 ]]; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        while [[ j -ge 2 ]]; do'
+ continue
+ IFS=
+ read -r line
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while [[ j -ge 2 ]]; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[         while [[ j -ge 2 ]]; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            if [[ ${temp_array[j-2]} > "$temp1" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Shift the pair at j-2 forward to make room for temp1, temp2'
+ continue
+ IFS=
+ read -r line
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 temp_array[j]=${temp_array[j-2]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                temp_array[j]=${temp_array[j-2]}'
+ continue
+ IFS=
+ read -r line
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 temp_array[j+1]=${temp_array[j-1]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                temp_array[j+1]=${temp_array[j-1]}'
+ continue
+ IFS=
+ read -r line
+ [[                 j=$((j-2)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 j=$((j-2)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 j=$((j-2)) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                j=$((j-2))'
+ continue
+ IFS=
+ read -r line
+ [[             else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 j=$((j-2)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 j=$((j-2)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            else'
+ continue
+ IFS=
+ read -r line
+ [[                 # Correct position found, break the loop =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^}$ ]]
+ [[ false == false ]]
+ [[             else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct position found, break the loop =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Correct position found, break the loop =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                # Correct position found, break the loop'
+ continue
+ IFS=
+ read -r line
+ [[                 break =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct position found, break the loop =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Correct position found, break the loop =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 break =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 break =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                break'
+ continue
+ IFS=
+ read -r line
+ [[             fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 break =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 break =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            fi'
+ continue
+ IFS=
+ read -r line
+ [[         done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[             fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        done'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^}$ ]]
+ [[ false == false ]]
+ [[         done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Place temp1, temp2 in their correct position =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Place temp1, temp2 in their correct position =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Place temp1, temp2 in their correct position'
+ continue
+ IFS=
+ read -r line
+ [[         temp_array[j]=$temp1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j]=$temp1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp_array[j]=$temp1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        temp_array[j]=$temp1'
+ continue
+ IFS=
+ read -r line
+ [[         temp_array[j+1]=$temp2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j]=$temp1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp_array[j]=$temp1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j+1]=$temp2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp_array[j+1]=$temp2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        temp_array[j+1]=$temp2'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j+1]=$temp2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp_array[j+1]=$temp2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Assign sorted local array back to original named array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Assign sorted local array back to original named array =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign sorted local array back to original named array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Assign sorted local array back to original named array =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Assign sorted local array back to original named array'
+ continue
+ IFS=
+ read -r line
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign sorted local array back to original named array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Assign sorted local array back to original named array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    eval "${array_name}=(\"\${temp_array[@]}\")"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: push_stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: push_stack =~ ^#.* ]]
+ extracted_markdown+='# Function: push_stack\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^#+ ]]
+ extracted_markdown+='`push_stack` - Push a Value onto a Named Stack\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^#+ ]]
+ extracted_markdown+='  - Pushes a value onto a named stack (added to the end of the stack). \n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `push_stack "stack_name" "value"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `push_stack "stack_name" "value"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_stack "stack_name" "value"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_stack "stack_name" "value"` =~ ^#+ ]]
+ extracted_markdown+='  - `push_stack "stack_name" "value"`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#+ ]]
+ extracted_markdown+='  - `stack_name`: The name of the stack array.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `value`: The value to push onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack. =~ ^#+ ]]
+ extracted_markdown+='  - `value`: The value to push onto the stack.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Modifies the named stack by adding a new element. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Modifies the named stack by adding a new element. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the named stack by adding a new element. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the named stack by adding a new element. =~ ^#+ ]]
+ extracted_markdown+='  - Modifies the named stack by adding a new element.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ push_stack() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ push_stack() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_stack() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_stack() { =~ ^#+ ]]
+ [[ push_stack() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=push_stack
+ function_name=push_stack
+ write_function_doc push_stack util_funcs.sh bin/shinclude/util_funcs.sh '# Function: push_stack\n`push_stack` - Push a Value onto a Named Stack\n## Description\n- **Purpose**:\n  - Pushes a value onto a named stack (added to the end of the stack). \n- **Usage**: \n  - `push_stack "stack_name" "value"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack.\n- **Output**: \n  - Modifies the named stack by adding a new element.\n- **Exceptions**: \n  - None.\n'
+ local function_name=push_stack
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: push_stack\n`push_stack` - Push a Value onto a Named Stack\n## Description\n- **Purpose**:\n  - Pushes a value onto a named stack (added to the end of the stack). \n- **Usage**: \n  - `push_stack "stack_name" "value"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack.\n- **Output**: \n  - Modifies the named stack by adding a new element.\n- **Exceptions**: \n  - None.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/push_stack.md
+ echo -e '## push_stack'
+ echo -e '# Function: push_stack\n`push_stack` - Push a Value onto a Named Stack\n## Description\n- **Purpose**:\n  - Pushes a value onto a named stack (added to the end of the stack). \n- **Usage**: \n  - `push_stack "stack_name" "value"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack.\n- **Output**: \n  - Modifies the named stack by adding a new element.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/push_stack.md
+ local file_path=docs/shdoc/bin/shinclude/functions/push_stack.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry push_stack util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=push_stack
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/push_stack.md
++ function_description push_stack
++ local function_name=push_stack
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/push_stack.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/push_stack.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/push_stack.md
+++ tail -n 1
++ description='`push_stack` - Push a Value onto a Named Stack'
++ description='Push a Value onto a Named Stack'
++ description='Push a Value onto a Named Stack'
++ echo 'Push a Value onto a Named Stack'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' push_stack docs/shdoc/bin/shinclude/functions/push_stack.md 'Push a Value onto a Named Stack'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local stack_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local stack_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local stack_value="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value="$2" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local stack_value="$2"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "${stack_name}+=(\"$stack_value\")" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    eval "${stack_name}+=(\"$stack_value\")"'
+ continue
+ IFS=
+ read -r line
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # echo "PUSH ${stack_name}: ${stack_value}" >&2'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: pop_stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pop_stack =~ ^#.* ]]
+ extracted_markdown+='# Function: pop_stack\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^#+ ]]
+ extracted_markdown+='`pop_stack` - Pop a Value from a Named Stack\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Pops a value from a named stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pops a value from a named stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops a value from a named stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops a value from a named stack. =~ ^#+ ]]
+ extracted_markdown+='  - Pops a value from a named stack.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `pop_stack "stack_name"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pop_stack "stack_name"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_stack "stack_name"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_stack "stack_name"` =~ ^#+ ]]
+ extracted_markdown+='  - `pop_stack "stack_name"`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#+ ]]
+ extracted_markdown+='  - `stack_name`: The name of the stack array.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Removes and returns the top element from the named stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Removes and returns the top element from the named stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes and returns the top element from the named stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes and returns the top element from the named stack. =~ ^#+ ]]
+ extracted_markdown+='  - Removes and returns the top element from the named stack.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^#+ ]]
+ extracted_markdown+='  - Returns an error message and error code 1 if the stack is empty.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ pop_stack() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pop_stack() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_stack() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_stack() { =~ ^#+ ]]
+ [[ pop_stack() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=pop_stack
+ function_name=pop_stack
+ write_function_doc pop_stack util_funcs.sh bin/shinclude/util_funcs.sh '# Function: pop_stack\n`pop_stack` - Pop a Value from a Named Stack\n## Description\n- **Purpose**:\n  - Pops a value from a named stack.\n- **Usage**: \n  - `pop_stack "stack_name"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n- **Output**: \n  - Removes and returns the top element from the named stack.\n- **Exceptions**: \n  - Returns an error message and error code 1 if the stack is empty.\n'
+ local function_name=pop_stack
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: pop_stack\n`pop_stack` - Pop a Value from a Named Stack\n## Description\n- **Purpose**:\n  - Pops a value from a named stack.\n- **Usage**: \n  - `pop_stack "stack_name"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n- **Output**: \n  - Removes and returns the top element from the named stack.\n- **Exceptions**: \n  - Returns an error message and error code 1 if the stack is empty.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/pop_stack.md
+ echo -e '## pop_stack'
+ echo -e '# Function: pop_stack\n`pop_stack` - Pop a Value from a Named Stack\n## Description\n- **Purpose**:\n  - Pops a value from a named stack.\n- **Usage**: \n  - `pop_stack "stack_name"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n- **Output**: \n  - Removes and returns the top element from the named stack.\n- **Exceptions**: \n  - Returns an error message and error code 1 if the stack is empty.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/pop_stack.md
+ local file_path=docs/shdoc/bin/shinclude/functions/pop_stack.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry pop_stack util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=pop_stack
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/pop_stack.md
++ function_description pop_stack
++ local function_name=pop_stack
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pop_stack.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pop_stack.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pop_stack.md
+++ tail -n 1
++ description='`pop_stack` - Pop a Value from a Named Stack'
++ description='Pop a Value from a Named Stack'
++ description='Pop a Value from a Named Stack'
++ echo 'Pop a Value from a Named Stack'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' pop_stack docs/shdoc/bin/shinclude/functions/pop_stack.md 'Pop a Value from a Named Stack'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local stack_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local stack_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local popped_value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local popped_value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local popped_value =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local popped_value'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local popped_value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local popped_value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Dynamically get the length of the stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Dynamically get the length of the stack =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Dynamically get the length of the stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Dynamically get the length of the stack =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Dynamically get the length of the stack'
+ continue
+ IFS=
+ read -r line
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Dynamically get the length of the stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Dynamically get the length of the stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "local stack_length=\${#${stack_name}[@]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    eval "local stack_length=\${#${stack_name}[@]}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Check if the stack is empty =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the stack is empty =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the stack is empty =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the stack is empty =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Check if the stack is empty'
+ continue
+ IFS=
+ read -r line
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the stack is empty =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the stack is empty =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${stack_length}" -eq 0 ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ "${stack_length}" -eq 0 ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Stack is empty" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Stack is empty" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Stack is empty" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Stack is empty" >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Stack is empty" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Stack is empty" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Pop the last value and store to return top stack value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Pop the last value and store to return top stack value =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop the last value and store to return top stack value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Pop the last value and store to return top stack value =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Pop the last value and store to return top stack value'
+ continue
+ IFS=
+ read -r line
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop the last value and store to return top stack value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Pop the last value and store to return top stack value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "popped_value=\${${stack_name}[-1]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    eval "popped_value=\${${stack_name}[-1]}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Calculate the index of the last element =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Calculate the index of the last element =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate the index of the last element =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Calculate the index of the last element =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Calculate the index of the last element'
+ continue
+ IFS=
+ read -r line
+ [[     local last_index=$((stack_length - 1)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate the index of the last element =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Calculate the index of the last element =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_index=$((stack_length - 1)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local last_index=$((stack_length - 1)) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local last_index=$((stack_length - 1))'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_index=$((stack_length - 1)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local last_index=$((stack_length - 1)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Remove the last element from the stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Remove the last element from the stack =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove the last element from the stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Remove the last element from the stack =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Remove the last element from the stack'
+ continue
+ IFS=
+ read -r line
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove the last element from the stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Remove the last element from the stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${last_index}" -eq 0 ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ "${last_index}" -eq 0 ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        eval "unset ${stack_name} && declare -a ${stack_name}"'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     __sv__="${popped_value}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __sv__="${popped_value}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __sv__="${popped_value}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __sv__="${popped_value}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __sv__="${popped_value}"'
+ continue
+ IFS=
+ read -r line
+ [[     __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __sv__="${popped_value}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __sv__="${popped_value}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __rc__=0'
+ continue
+ IFS=
+ read -r line
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: stack_op =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: stack_op =~ ^#.* ]]
+ extracted_markdown+='# Function: stack_op\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `stack_op` - Perform Stack Operations =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `stack_op` - Perform Stack Operations =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stack_op` - Perform Stack Operations =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stack_op` - Perform Stack Operations =~ ^#+ ]]
+ extracted_markdown+='`stack_op` - Perform Stack Operations\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^#+ ]]
+ extracted_markdown+='  - Performs stack operations such as push, pop, and debug on a given stack.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^#+ ]]
+ extracted_markdown+='  - `stack_op <action> <stack_name> [value]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^#+ ]]
+ extracted_markdown+='  - `action`: The action to perform on the stack (`push`, `pop`, `debug`).\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#+ ]]
+ extracted_markdown+='  - `stack_name`: The name of the stack array.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^#+ ]]
+ extracted_markdown+='  - `value`: The value to push onto the stack (required for `push` action).\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Executes the specified stack operation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Executes the specified stack operation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the specified stack operation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the specified stack operation. =~ ^#+ ]]
+ extracted_markdown+='  - Executes the specified stack operation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns an error if an invalid action is provided. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns an error if an invalid action is provided. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error if an invalid action is provided. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error if an invalid action is provided. =~ ^#+ ]]
+ extracted_markdown+='  - Returns an error if an invalid action is provided.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ stack_op() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ stack_op() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stack_op() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stack_op() { =~ ^#+ ]]
+ [[ stack_op() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=stack_op
+ function_name=stack_op
+ write_function_doc stack_op util_funcs.sh bin/shinclude/util_funcs.sh '# Function: stack_op\n`stack_op` - Perform Stack Operations\n## Description\n- **Purpose**:\n  - Performs stack operations such as push, pop, and debug on a given stack.\n- **Usage**: \n  - `stack_op <action> <stack_name> [value]`\n- **Input Parameters**: \n  - `action`: The action to perform on the stack (`push`, `pop`, `debug`).\n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack (required for `push` action).\n- **Output**: \n  - Executes the specified stack operation.\n- **Exceptions**: \n  - Returns an error if an invalid action is provided.\n'
+ local function_name=stack_op
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: stack_op\n`stack_op` - Perform Stack Operations\n## Description\n- **Purpose**:\n  - Performs stack operations such as push, pop, and debug on a given stack.\n- **Usage**: \n  - `stack_op <action> <stack_name> [value]`\n- **Input Parameters**: \n  - `action`: The action to perform on the stack (`push`, `pop`, `debug`).\n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack (required for `push` action).\n- **Output**: \n  - Executes the specified stack operation.\n- **Exceptions**: \n  - Returns an error if an invalid action is provided.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/stack_op.md
+ echo -e '## stack_op'
+ echo -e '# Function: stack_op\n`stack_op` - Perform Stack Operations\n## Description\n- **Purpose**:\n  - Performs stack operations such as push, pop, and debug on a given stack.\n- **Usage**: \n  - `stack_op <action> <stack_name> [value]`\n- **Input Parameters**: \n  - `action`: The action to perform on the stack (`push`, `pop`, `debug`).\n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack (required for `push` action).\n- **Output**: \n  - Executes the specified stack operation.\n- **Exceptions**: \n  - Returns an error if an invalid action is provided.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/stack_op.md
+ local file_path=docs/shdoc/bin/shinclude/functions/stack_op.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry stack_op util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=stack_op
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/stack_op.md
++ function_description stack_op
++ local function_name=stack_op
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/stack_op.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/stack_op.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/stack_op.md
+++ tail -n 1
++ description='`stack_op` - Perform Stack Operations'
++ description='Perform Stack Operations'
++ description='Perform Stack Operations'
++ echo 'Perform Stack Operations'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' stack_op docs/shdoc/bin/shinclude/functions/stack_op.md 'Perform Stack Operations'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local action="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local action="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local action="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local action="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local stack_name="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local action="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_name="$2" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local stack_name="$2"'
+ continue
+ IFS=
+ read -r line
+ [[     local stack_value="$3" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_name="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$3" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value="$3" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local stack_value="$3"'
+ continue
+ IFS=
+ read -r line
+ [[     case "$action" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$3" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value="$3" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$action" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "$action" in =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    case "$action" in'
+ continue
+ IFS=
+ read -r line
+ [[         "push") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$action" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "$action" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "push") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "push") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "push")'
+ continue
+ IFS=
+ read -r line
+ [[             push_stack "$stack_name" "$stack_value" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "push") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "push") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             push_stack "$stack_name" "$stack_value" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             push_stack "$stack_name" "$stack_value" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            push_stack "$stack_name" "$stack_value"'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             push_stack "$stack_name" "$stack_value" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             push_stack "$stack_name" "$stack_value" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         "pop") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "pop") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "pop") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "pop")'
+ continue
+ IFS=
+ read -r line
+ [[             pop_stack "$stack_name" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "pop") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "pop") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_stack "$stack_name" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             pop_stack "$stack_name" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            pop_stack "$stack_name"'
+ continue
+ IFS=
+ read -r line
+ [[             echo "${__sv__}"      # Return the popped value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_stack "$stack_name" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             pop_stack "$stack_name" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "${__sv__}"      # Return the popped value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "${__sv__}"      # Return the popped value =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "${__sv__}"      # Return the popped value'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "${__sv__}"      # Return the popped value =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "${__sv__}"      # Return the popped value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         "debug") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "debug") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "debug") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        "debug")'
+ continue
+ IFS=
+ read -r line
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "debug") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "debug") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "***************************** STACK: ${stack_name} *****************************" >&2'
+ continue
+ IFS=
+ read -r line
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            eval "echo \"\${${stack_name}[@]}\"" >&2 '
+ continue
+ IFS=
+ read -r line
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^}$ ]]
+ [[ false == false ]]
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "***************************** STACK *****************************" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "***************************** STACK *****************************" >&2'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ [[             errno_warn 78 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             errno_warn 78 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             errno_warn 78 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            errno_warn 78'
+ continue
+ IFS=
+ read -r line
+ [[             return $? =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             errno_warn 78 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             errno_warn 78 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return $? =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             return $? =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            return $?'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return $? =~ ^}$ ]]
+ [[ false == false ]]
+ [[             return $? =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: stringclean =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: stringclean =~ ^#.* ]]
+ extracted_markdown+='# Function: stringclean\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^#+ ]]
+ extracted_markdown+='`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^#+ ]]
+ extracted_markdown+='  - Sanitizes a string by removing all characters except alphabets and numbers.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^#+ ]]
+ extracted_markdown+='  - `cleaned_str=$(stringclean "Hello, World!")`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `str`: The string to sanitize. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to sanitize. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to sanitize. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to sanitize. =~ ^#+ ]]
+ extracted_markdown+='  - `str`: The string to sanitize.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^#+ ]]
+ extracted_markdown+='  - The sanitized string containing only alphanumeric characters.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ stringclean() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ stringclean() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stringclean() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stringclean() { =~ ^#+ ]]
+ [[ stringclean() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=stringclean
+ function_name=stringclean
+ write_function_doc stringclean util_funcs.sh bin/shinclude/util_funcs.sh '# Function: stringclean\n`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters\n## Description\n- **Purpose**:\n  - Sanitizes a string by removing all characters except alphabets and numbers.\n- **Usage**: \n  - `cleaned_str=$(stringclean "Hello, World!")`\n- **Input Parameters**: \n  - `str`: The string to sanitize.\n- **Output**: \n  - The sanitized string containing only alphanumeric characters.\n- **Exceptions**: \n  - None.\n'
+ local function_name=stringclean
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: stringclean\n`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters\n## Description\n- **Purpose**:\n  - Sanitizes a string by removing all characters except alphabets and numbers.\n- **Usage**: \n  - `cleaned_str=$(stringclean "Hello, World!")`\n- **Input Parameters**: \n  - `str`: The string to sanitize.\n- **Output**: \n  - The sanitized string containing only alphanumeric characters.\n- **Exceptions**: \n  - None.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/stringclean.md
+ echo -e '## stringclean'
+ echo -e '# Function: stringclean\n`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters\n## Description\n- **Purpose**:\n  - Sanitizes a string by removing all characters except alphabets and numbers.\n- **Usage**: \n  - `cleaned_str=$(stringclean "Hello, World!")`\n- **Input Parameters**: \n  - `str`: The string to sanitize.\n- **Output**: \n  - The sanitized string containing only alphanumeric characters.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/stringclean.md
+ local file_path=docs/shdoc/bin/shinclude/functions/stringclean.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:57'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:57'
+ write_script_function_entry stringclean util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=stringclean
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/stringclean.md
++ function_description stringclean
++ local function_name=stringclean
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/stringclean.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/stringclean.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/stringclean.md
+++ tail -n 1
++ description='`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters'
++ description='Sanitize a String by Removing Non-Alphanumeric Characters'
++ description='Sanitize a String by Removing Non-Alphanumeric Characters'
++ echo 'Sanitize a String by Removing Non-Alphanumeric Characters'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' stringclean docs/shdoc/bin/shinclude/functions/stringclean.md 'Sanitize a String by Removing Non-Alphanumeric Characters'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local str="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local str="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local str="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local str="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local str="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${str//[^a-zA-Z0-9]/}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${str//[^a-zA-Z0-9]/}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: to_upper =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: to_upper =~ ^#.* ]]
+ extracted_markdown+='# Function: to_upper\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^#+ ]]
+ extracted_markdown+='`to_upper` - Convert a String to Uppercase\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Converts a string to uppercase. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Converts a string to uppercase. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Converts a string to uppercase. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Converts a string to uppercase. =~ ^#+ ]]
+ extracted_markdown+='  - Converts a string to uppercase.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^#+ ]]
+ extracted_markdown+='  - `upper_str=$(to_upper "hello")`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `str`: The string to convert. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to convert. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to convert. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to convert. =~ ^#+ ]]
+ extracted_markdown+='  - `str`: The string to convert.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The uppercase version of the input string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The uppercase version of the input string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The uppercase version of the input string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The uppercase version of the input string. =~ ^#+ ]]
+ extracted_markdown+='  - The uppercase version of the input string.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ to_upper() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ to_upper() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ to_upper() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ to_upper() { =~ ^#+ ]]
+ [[ to_upper() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=to_upper
+ function_name=to_upper
+ write_function_doc to_upper util_funcs.sh bin/shinclude/util_funcs.sh '# Function: to_upper\n`to_upper` - Convert a String to Uppercase\n## Description\n- **Purpose**:\n  - Converts a string to uppercase.\n- **Usage**: \n  - `upper_str=$(to_upper "hello")`\n- **Input Parameters**: \n  - `str`: The string to convert.\n- **Output**: \n  - The uppercase version of the input string.\n- **Exceptions**: \n  - None.\n'
+ local function_name=to_upper
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: to_upper\n`to_upper` - Convert a String to Uppercase\n## Description\n- **Purpose**:\n  - Converts a string to uppercase.\n- **Usage**: \n  - `upper_str=$(to_upper "hello")`\n- **Input Parameters**: \n  - `str`: The string to convert.\n- **Output**: \n  - The uppercase version of the input string.\n- **Exceptions**: \n  - None.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/to_upper.md
+ echo -e '## to_upper'
+ echo -e '# Function: to_upper\n`to_upper` - Convert a String to Uppercase\n## Description\n- **Purpose**:\n  - Converts a string to uppercase.\n- **Usage**: \n  - `upper_str=$(to_upper "hello")`\n- **Input Parameters**: \n  - `str`: The string to convert.\n- **Output**: \n  - The uppercase version of the input string.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/to_upper.md
+ local file_path=docs/shdoc/bin/shinclude/functions/to_upper.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry to_upper util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=to_upper
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/to_upper.md
++ function_description to_upper
++ local function_name=to_upper
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/to_upper.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/to_upper.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/to_upper.md
+++ tail -n 1
++ description='`to_upper` - Convert a String to Uppercase'
++ description='Convert a String to Uppercase'
++ description='Convert a String to Uppercase'
++ echo 'Convert a String to Uppercase'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' to_upper docs/shdoc/bin/shinclude/functions/to_upper.md 'Convert a String to Uppercase'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local str="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local str="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local str="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local str="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     echo "${str^^}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local str="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str^^}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${str^^}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${str^^}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str^^}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${str^^}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: ptree =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: ptree =~ ^#.* ]]
+ extracted_markdown+='# Function: ptree\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^#+ ]]
+ extracted_markdown+='`ptree` - Display the Process Tree for a Given PID\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^#+ ]]
+ extracted_markdown+='  - Recursively displays the process tree starting from a given PID.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `ptree 1234` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `ptree 1234` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ptree 1234` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ptree 1234` =~ ^#+ ]]
+ extracted_markdown+='  - `ptree 1234`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^#+ ]]
+ extracted_markdown+='  - `pid`: The Process ID to start the tree from.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^#+ ]]
+ extracted_markdown+='  - `indent` (optional): Indentation string for formatting.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^#+ ]]
+ extracted_markdown+='  - A hierarchical display of processes starting from the specified PID.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ ptree() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ptree() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ptree() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ptree() { =~ ^#+ ]]
+ [[ ptree() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=ptree
+ function_name=ptree
+ write_function_doc ptree util_funcs.sh bin/shinclude/util_funcs.sh '# Function: ptree\n`ptree` - Display the Process Tree for a Given PID\n## Description\n- **Purpose**:\n  - Recursively displays the process tree starting from a given PID.\n- **Usage**: \n  - `ptree 1234`\n- **Input Parameters**: \n  - `pid`: The Process ID to start the tree from.\n  - `indent` (optional): Indentation string for formatting.\n- **Output**: \n  - A hierarchical display of processes starting from the specified PID.\n- **Exceptions**: \n  - None.\n'
+ local function_name=ptree
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: ptree\n`ptree` - Display the Process Tree for a Given PID\n## Description\n- **Purpose**:\n  - Recursively displays the process tree starting from a given PID.\n- **Usage**: \n  - `ptree 1234`\n- **Input Parameters**: \n  - `pid`: The Process ID to start the tree from.\n  - `indent` (optional): Indentation string for formatting.\n- **Output**: \n  - A hierarchical display of processes starting from the specified PID.\n- **Exceptions**: \n  - None.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/ptree.md
+ echo -e '## ptree'
+ echo -e '# Function: ptree\n`ptree` - Display the Process Tree for a Given PID\n## Description\n- **Purpose**:\n  - Recursively displays the process tree starting from a given PID.\n- **Usage**: \n  - `ptree 1234`\n- **Input Parameters**: \n  - `pid`: The Process ID to start the tree from.\n  - `indent` (optional): Indentation string for formatting.\n- **Output**: \n  - A hierarchical display of processes starting from the specified PID.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/ptree.md
+ local file_path=docs/shdoc/bin/shinclude/functions/ptree.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry ptree util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=ptree
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/ptree.md
++ function_description ptree
++ local function_name=ptree
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/ptree.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/ptree.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/ptree.md
+++ tail -n 1
++ description='`ptree` - Display the Process Tree for a Given PID'
++ description='Display the Process Tree for a Given PID'
++ description='Display the Process Tree for a Given PID'
++ echo 'Display the Process Tree for a Given PID'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' ptree docs/shdoc/bin/shinclude/functions/ptree.md 'Display the Process Tree for a Given PID'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local pid="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local pid="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local pid="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local pid="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local pid="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local indent="${2:-" "}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local pid="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local pid="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local indent="${2:-" "}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local indent="${2:-" "}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local indent="${2:-" "}"'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local indent="${2:-" "}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local indent="${2:-" "}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     # Get terminal width =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Get terminal width =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get terminal width =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Get terminal width =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Get terminal width'
+ continue
+ IFS=
+ read -r line
+ [[     local term_width=$(tput cols) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get terminal width =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Get terminal width =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local term_width=$(tput cols) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local term_width=$(tput cols) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local term_width=$(tput cols)'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local term_width=$(tput cols) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local term_width=$(tput cols) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Calculate effective width for command output =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Calculate effective width for command output =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate effective width for command output =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Calculate effective width for command output =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Calculate effective width for command output'
+ continue
+ IFS=
+ read -r line
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate effective width for command output =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Calculate effective width for command output =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local effective_width=$((term_width - ${#indent} - 14)) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local effective_width=$((term_width - ${#indent} - 14))'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Display the current process with indentation and truncate command based on effective width =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Display the current process with indentation and truncate command based on effective width'
+ continue
+ IFS=
+ read -r line
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" '\''NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}'\'''
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Get child processes =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Get child processes =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get child processes =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Get child processes =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Get child processes'
+ continue
+ IFS=
+ read -r line
+ [[     local children =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get child processes =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Get child processes =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local children =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local children =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local children'
+ continue
+ IFS=
+ read -r line
+ [[     children=$(pgrep -P "$pid") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local children =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local children =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     children=$(pgrep -P "$pid") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     children=$(pgrep -P "$pid") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    children=$(pgrep -P "$pid")'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     children=$(pgrep -P "$pid") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     children=$(pgrep -P "$pid") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Recurse for each child process =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Recurse for each child process =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Recurse for each child process =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Recurse for each child process =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Recurse for each child process'
+ continue
+ IFS=
+ read -r line
+ [[     for child in $children; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Recurse for each child process =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Recurse for each child process =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for child in $children; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for child in $children; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    for child in $children; do'
+ continue
+ IFS=
+ read -r line
+ [[         ptree "$child" "  $indent" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for child in $children; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for child in $children; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ptree "$child" "  $indent" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ptree "$child" "  $indent" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        ptree "$child" "  $indent"'
+ continue
+ IFS=
+ read -r line
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ptree "$child" "  $indent" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ptree "$child" "  $indent" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: var_type =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: var_type =~ ^#.* ]]
+ extracted_markdown+='# Function: var_type\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `var_type` - Get the Type of a Variable =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `var_type` - Get the Type of a Variable =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `var_type` - Get the Type of a Variable =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `var_type` - Get the Type of a Variable =~ ^#+ ]]
+ extracted_markdown+='`var_type` - Get the Type of a Variable\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Retrieves the type of a variable. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the type of a variable. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the type of a variable. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the type of a variable. =~ ^#+ ]]
+ extracted_markdown+='  - Retrieves the type of a variable.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^#+ ]]
+ extracted_markdown+='  - `var_type=$(var_type "var_name")`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `var_name`: The name of the variable. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `var_name`: The name of the variable. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_name`: The name of the variable. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_name`: The name of the variable. =~ ^#+ ]]
+ extracted_markdown+='  - `var_name`: The name of the variable.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^#+ ]]
+ extracted_markdown+='  - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ [[ var_type() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ var_type() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ var_type() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ var_type() { =~ ^#+ ]]
+ [[ var_type() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=var_type
+ function_name=var_type
+ write_function_doc var_type util_funcs.sh bin/shinclude/util_funcs.sh '# Function: var_type\n`var_type` - Get the Type of a Variable\n## Description\n- **Purpose**:\n  - Retrieves the type of a variable.\n- **Usage**: \n  - `var_type=$(var_type "var_name")`\n- **Input Parameters**: \n  - `var_name`: The name of the variable.\n- **Output**: \n  - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.\n- **Exceptions**: \n  - None.\n'
+ local function_name=var_type
+ shift
+ local script_name=util_funcs.sh
+ shift
+ local script_dir=bin/shinclude/util_funcs.sh
+ shift
+ local 'function_markdown=# Function: var_type\n`var_type` - Get the Type of a Variable\n## Description\n- **Purpose**:\n  - Retrieves the type of a variable.\n- **Usage**: \n  - `var_type=$(var_type "var_name")`\n- **Input Parameters**: \n  - `var_name`: The name of the variable.\n- **Output**: \n  - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.\n- **Exceptions**: \n  - None.\n'
+ local script_readme_file=util_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/var_type.md
+ echo -e '## var_type'
+ echo -e '# Function: var_type\n`var_type` - Get the Type of a Variable\n## Description\n- **Purpose**:\n  - Retrieves the type of a variable.\n- **Usage**: \n  - `var_type=$(var_type "var_name")`\n- **Input Parameters**: \n  - `var_name`: The name of the variable.\n- **Output**: \n  - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [util_funcs.sh](/bin/shinclude/util_funcs.sh/util_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/var_type.md
+ local file_path=docs/shdoc/bin/shinclude/functions/var_type.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry var_type util_funcs.sh bin/shinclude/util_funcs.sh
+ local function_name=var_type
+ local script_name=util_funcs.sh
+ local script_dir=bin/shinclude/util_funcs.sh
+ local script_readme_file=bin/shinclude/util_funcs.sh/util_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/var_type.md
++ function_description var_type
++ local function_name=var_type
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/var_type.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/var_type.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/var_type.md
+++ tail -n 1
++ description='`var_type` - Get the Type of a Variable'
++ description='Get the Type of a Variable'
++ description='Get the Type of a Variable'
++ echo 'Get the Type of a Variable'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' var_type docs/shdoc/bin/shinclude/functions/var_type.md 'Get the Type of a Variable'
bash: bin/shinclude/util_funcs.sh/util_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local var_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local var_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local var_name="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local var_name="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local var_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d '\'' '\'' -f 2) '
+ continue
+ IFS=
+ read -r line
+ [[     case "$var_type" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$var_type" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "$var_type" in =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    case "$var_type" in'
+ continue
+ IFS=
+ read -r line
+ [[         -a) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$var_type" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "$var_type" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -a) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         -a) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        -a)'
+ continue
+ IFS=
+ read -r line
+ [[             echo "array" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -a) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         -a) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "array" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "array" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "array"'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "array" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "array" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         -A) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -A) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         -A) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        -A)'
+ continue
+ IFS=
+ read -r line
+ [[             echo "associative" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -A) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         -A) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "associative" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "associative" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "associative"'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "associative" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "associative" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         --) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         --) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         --) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        --)'
+ continue
+ IFS=
+ read -r line
+ [[             echo "scalar" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         --) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         --) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "scalar" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "scalar" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "scalar"'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "scalar" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "scalar" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ [[             echo "unknown" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "unknown" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "unknown" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "unknown"'
+ continue
+ IFS=
+ read -r line
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "unknown" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "unknown" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ [[ -n } ]]
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ write_table_footer bin/shinclude/util_funcs_sh.md
+ local file_path=bin/shinclude/util_funcs_sh.md
+ echo -e '</table></pre>'
+ write_page_footer bin/shinclude/util_funcs_sh.md
+ local file_path=bin/shinclude/util_funcs_sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ for script_path in "${script_files[@]}"
+ local script_name
++ basename bin/shinclude/venv_funcs.sh
+ script_name=venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs_sh.md
+ log_message INFO 'Generating markdown for script: venv_funcs.sh'
+ local message_level=INFO
+ shift
+ local 'message_out=Generating markdown for script: venv_funcs.sh'
+ [[ -z _ ]]
+ '[' 30 -le 20 ']'
+ local in_script_doc=false
+ local in_function_doc=false
+ local script_entry=false
+ local previous_line
+ local extracted_markdown=
+ local function_name=
+ IFS=
+ read -r line
+ [[ #!/bin/bash =~ ^#! ]]
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # # Script: venv_funcs.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: venv_funcs.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: venv_funcs.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: venv_funcs.sh =~ ^#+ ]]
+ extracted_markdown+='# Script: venv_funcs.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #  venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts =~ ^#+ ]]
+ extracted_markdown+=' venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #  ## Description =~ ^#+ ]]
+ extracted_markdown+=' ## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #  - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+=' - **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #    - This script provides a collection of functions to manage conda virtual environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #    - This script provides a collection of functions to manage conda virtual environments. =~ ^#+ ]]
+ extracted_markdown+='   - This script provides a collection of functions to manage conda virtual environments.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #    - Functions include creating, deleting, switching, and cloning environments, among others. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #    - Functions include creating, deleting, switching, and cloning environments, among others. =~ ^#+ ]]
+ extracted_markdown+='   - Functions include creating, deleting, switching, and cloning environments, among others.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  ## Usage =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #  ## Usage =~ ^#+ ]]
+ extracted_markdown+=' ## Usage\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  - Source this script in other bash scripts to import the virtual environment management functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #  - Source this script in other bash scripts to import the virtual environment management functions. =~ ^#+ ]]
+ extracted_markdown+=' - Source this script in other bash scripts to import the virtual environment management functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #  - For example, in another script: `source venv_funcs.sh`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #  - For example, in another script: `source venv_funcs.sh`. =~ ^#+ ]]
+ extracted_markdown+=' - For example, in another script: `source venv_funcs.sh`.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - None. All input is handled by the individual functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. All input is handled by the individual functions. =~ ^#+ ]]
+ extracted_markdown+='  - None. All input is handled by the individual functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - The script provides various virtual environment management functions for use in other bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - The script provides various virtual environment management functions for use in other bash scripts. =~ ^#+ ]]
+ extracted_markdown+='  - The script provides various virtual environment management functions for use in other bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#+ ]]
+ extracted_markdown+='  - Some functions may return specific error codes or print error messages to STDERR.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Refer to individual function documentation for details. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Refer to individual function documentation for details. =~ ^#+ ]]
+ extracted_markdown+='  - Refer to individual function documentation for details.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Internal Variables** =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Internal Variables** =~ ^#+ ]]
+ extracted_markdown+='- **Internal Variables**\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series. =~ ^#+ ]]
+ extracted_markdown+='  - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - __VENV_PREFIX The prefix of the VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - __VENV_PREFIX The prefix of the VENV =~ ^#+ ]]
+ extracted_markdown+='  - __VENV_PREFIX The prefix of the VENV\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - __VENV_DESC   A very short description of the VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - __VENV_DESC   A very short description of the VENV. =~ ^#+ ]]
+ extracted_markdown+='  - __VENV_DESC   A very short description of the VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Functions**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Functions**: =~ ^#+ ]]
+ extracted_markdown+='- **Functions**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `push_venv()`: Specialized push the default VENV onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `push_venv()`: Specialized push the default VENV onto the stack. =~ ^#+ ]]
+ extracted_markdown+='  - `push_venv()`: Specialized push the default VENV onto the stack.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `pop_venv()`: Specialized pop the VENV off the stack and decrement. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv()`: Specialized pop the VENV off the stack and decrement. =~ ^#+ ]]
+ extracted_markdown+='  - `pop_venv()`: Specialized pop the VENV off the stack and decrement.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `__set_venv_vars()`: Sets internal VENV variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars()`: Sets internal VENV variables. =~ ^#+ ]]
+ extracted_markdown+='  - `__set_venv_vars()`: Sets internal VENV variables.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `snum()`: Force set the VENV Sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `snum()`: Force set the VENV Sequence number. =~ ^#+ ]]
+ extracted_markdown+='  - `snum()`: Force set the VENV Sequence number.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vpfx()`: Return the current VENV prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `vpfx()`: Return the current VENV prefix. =~ ^#+ ]]
+ extracted_markdown+='  - `vpfx()`: Return the current VENV prefix.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vnum()`: Return the current VENV sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `vnum()`: Return the current VENV sequence number. =~ ^#+ ]]
+ extracted_markdown+='  - `vnum()`: Return the current VENV sequence number.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vdsc()`: Return the current VENV description. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `vdsc()`: Return the current VENV description. =~ ^#+ ]]
+ extracted_markdown+='  - `vdsc()`: Return the current VENV description.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `cact()`: Change active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `cact()`: Change active VENV. =~ ^#+ ]]
+ extracted_markdown+='  - `cact()`: Change active VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `dact()`: Deactivate the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `dact()`: Deactivate the current VENV. =~ ^#+ ]]
+ extracted_markdown+='  - `dact()`: Deactivate the current VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `pact()`: Switch to the Previous Active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `pact()`: Switch to the Previous Active VENV. =~ ^#+ ]]
+ extracted_markdown+='  - `pact()`: Switch to the Previous Active VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `lenv()`: List All Current VENVs. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `lenv()`: List All Current VENVs. =~ ^#+ ]]
+ extracted_markdown+='  - `lenv()`: List All Current VENVs.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `lastenv()`: Retrieve the Last Environment with a Given Prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `lastenv()`: Retrieve the Last Environment with a Given Prefix. =~ ^#+ ]]
+ extracted_markdown+='  - `lastenv()`: Retrieve the Last Environment with a Given Prefix.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `benv()`: Create a New Base Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `benv()`: Create a New Base Virtual Environment. =~ ^#+ ]]
+ extracted_markdown+='  - `benv()`: Create a New Base Virtual Environment.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - `nenv()`: Create a New Virtual Environment in a Series. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `nenv()`: Create a New Virtual Environment in a Series. =~ ^#+ ]]
+ extracted_markdown+='  - `nenv()`: Create a New Virtual Environment in a Series.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage Example**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage Example**: =~ ^#+ ]]
+ extracted_markdown+='- **Usage Example**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   ```shellscript =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   ```shellscript =~ ^#+ ]]
+ extracted_markdown+='  ```shellscript\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   source venv_funcs.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   source venv_funcs.sh =~ ^#+ ]]
+ extracted_markdown+='  source venv_funcs.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   benv myenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   benv myenv =~ ^#+ ]]
+ extracted_markdown+='  benv myenv\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   cact myenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   cact myenv =~ ^#+ ]]
+ extracted_markdown+='  cact myenv\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   ``` =~ ^#+ ]]
+ extracted_markdown+='  ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Dependencies**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Dependencies**:  =~ ^#+ ]]
+ extracted_markdown+='- **Dependencies**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - This script depends on the `conda` command-line tool for managing virtual environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - This script depends on the `conda` command-line tool for managing virtual environments. =~ ^#+ ]]
+ extracted_markdown+='  - This script depends on the `conda` command-line tool for managing virtual environments.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - The `util_funcs.sh` script is also required and should be located in the same directory as this script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - The `util_funcs.sh` script is also required and should be located in the same directory as this script. =~ ^#+ ]]
+ extracted_markdown+='  - The `util_funcs.sh` script is also required and should be located in the same directory as this script.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Notes**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Notes**: =~ ^#+ ]]
+ extracted_markdown+='- **Notes**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - This script assumes that the `conda` command is available in the system's PATH. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - This script assumes that the `conda` command is available in the system's PATH. =~ ^#+ ]]
+ extracted_markdown+='  - This script assumes that the `conda` command is available in the system'\''s PATH.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - It is recommended to source this script in other scripts rather than executing it directly. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - It is recommended to source this script in other scripts rather than executing it directly. =~ ^#+ ]]
+ extracted_markdown+='  - It is recommended to source this script in other scripts rather than executing it directly.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Make sure to set the appropriate permissions on this script to allow execution. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Make sure to set the appropriate permissions on this script to allow execution. =~ ^#+ ]]
+ extracted_markdown+='  - Make sure to set the appropriate permissions on this script to allow execution.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Author**: [Your Name] =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Author**: [Your Name] =~ ^#+ ]]
+ extracted_markdown+='- **Author**: [Your Name]\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Last Modified**: [Date] =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Last Modified**: [Date] =~ ^#+ ]]
+ extracted_markdown+='- **Last Modified**: [Date]\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Version**: [Version Number] =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Version**: [Version Number] =~ ^#+ ]]
+ extracted_markdown+='- **Version**: [Version Number]\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ write_script_doc venv_funcs.sh bin/shinclude '# Script: venv_funcs.sh\n venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts\n ## Description\n - **Purpose**: \n   - This script provides a collection of functions to manage conda virtual environments.\n   - Functions include creating, deleting, switching, and cloning environments, among others.\n#\n ## Usage\n - Source this script in other bash scripts to import the virtual environment management functions.\n - For example, in another script: `source venv_funcs.sh`.\n#\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n#\n- **Output**: \n  - The script provides various virtual environment management functions for use in other bash scripts.\n#\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n#\n- **Internal Variables**\n  - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.\n  - __VENV_PREFIX The prefix of the VENV\n  - __VENV_DESC   A very short description of the VENV.\n#\n- **Functions**:\n  - `push_venv()`: Specialized push the default VENV onto the stack.\n  - `pop_venv()`: Specialized pop the VENV off the stack and decrement.\n  - `__set_venv_vars()`: Sets internal VENV variables.\n  - `snum()`: Force set the VENV Sequence number.\n  - `vpfx()`: Return the current VENV prefix.\n  - `vnum()`: Return the current VENV sequence number.\n  - `vdsc()`: Return the current VENV description.\n  - `cact()`: Change active VENV.\n  - `dact()`: Deactivate the current VENV.\n  - `pact()`: Switch to the Previous Active VENV.\n  - `lenv()`: List All Current VENVs.\n  - `lastenv()`: Retrieve the Last Environment with a Given Prefix.\n  - `benv()`: Create a New Base Virtual Environment.\n  - `nenv()`: Create a New Virtual Environment in a Series.\n#\n- **Usage Example**:\n  ```shellscript\n  source venv_funcs.sh\n  benv myenv\n  cact myenv\n  ```\n#\n- **Dependencies**: \n  - This script depends on the `conda` command-line tool for managing virtual environments.\n  - The `util_funcs.sh` script is also required and should be located in the same directory as this script.\n#\n- **Notes**:\n  - This script assumes that the `conda` command is available in the system'\''s PATH.\n  - It is recommended to source this script in other scripts rather than executing it directly.\n  - Make sure to set the appropriate permissions on this script to allow execution.\n#\n- **Author**: [Your Name]\n- **Last Modified**: [Date]\n#\n- **Version**: [Version Number]\n#\n'
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude
+ shift
+ local 'script_markdown=# Script: venv_funcs.sh\n venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts\n ## Description\n - **Purpose**: \n   - This script provides a collection of functions to manage conda virtual environments.\n   - Functions include creating, deleting, switching, and cloning environments, among others.\n#\n ## Usage\n - Source this script in other bash scripts to import the virtual environment management functions.\n - For example, in another script: `source venv_funcs.sh`.\n#\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n#\n- **Output**: \n  - The script provides various virtual environment management functions for use in other bash scripts.\n#\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n#\n- **Internal Variables**\n  - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.\n  - __VENV_PREFIX The prefix of the VENV\n  - __VENV_DESC   A very short description of the VENV.\n#\n- **Functions**:\n  - `push_venv()`: Specialized push the default VENV onto the stack.\n  - `pop_venv()`: Specialized pop the VENV off the stack and decrement.\n  - `__set_venv_vars()`: Sets internal VENV variables.\n  - `snum()`: Force set the VENV Sequence number.\n  - `vpfx()`: Return the current VENV prefix.\n  - `vnum()`: Return the current VENV sequence number.\n  - `vdsc()`: Return the current VENV description.\n  - `cact()`: Change active VENV.\n  - `dact()`: Deactivate the current VENV.\n  - `pact()`: Switch to the Previous Active VENV.\n  - `lenv()`: List All Current VENVs.\n  - `lastenv()`: Retrieve the Last Environment with a Given Prefix.\n  - `benv()`: Create a New Base Virtual Environment.\n  - `nenv()`: Create a New Virtual Environment in a Series.\n#\n- **Usage Example**:\n  ```shellscript\n  source venv_funcs.sh\n  benv myenv\n  cact myenv\n  ```\n#\n- **Dependencies**: \n  - This script depends on the `conda` command-line tool for managing virtual environments.\n  - The `util_funcs.sh` script is also required and should be located in the same directory as this script.\n#\n- **Notes**:\n  - This script assumes that the `conda` command is available in the system'\''s PATH.\n  - It is recommended to source this script in other scripts rather than executing it directly.\n  - Make sure to set the appropriate permissions on this script to allow execution.\n#\n- **Author**: [Your Name]\n- **Last Modified**: [Date]\n#\n- **Version**: [Version Number]\n#\n'
+ local markdown_file_name=docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
+ local script_readme_file=bin/shinclude/venv_funcs_sh.md
+ echo -e '# Script: venv_funcs.sh\n venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts\n ## Description\n - **Purpose**: \n   - This script provides a collection of functions to manage conda virtual environments.\n   - Functions include creating, deleting, switching, and cloning environments, among others.\n#\n ## Usage\n - Source this script in other bash scripts to import the virtual environment management functions.\n - For example, in another script: `source venv_funcs.sh`.\n#\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n#\n- **Output**: \n  - The script provides various virtual environment management functions for use in other bash scripts.\n#\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n#\n- **Internal Variables**\n  - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.\n  - __VENV_PREFIX The prefix of the VENV\n  - __VENV_DESC   A very short description of the VENV.\n#\n- **Functions**:\n  - `push_venv()`: Specialized push the default VENV onto the stack.\n  - `pop_venv()`: Specialized pop the VENV off the stack and decrement.\n  - `__set_venv_vars()`: Sets internal VENV variables.\n  - `snum()`: Force set the VENV Sequence number.\n  - `vpfx()`: Return the current VENV prefix.\n  - `vnum()`: Return the current VENV sequence number.\n  - `vdsc()`: Return the current VENV description.\n  - `cact()`: Change active VENV.\n  - `dact()`: Deactivate the current VENV.\n  - `pact()`: Switch to the Previous Active VENV.\n  - `lenv()`: List All Current VENVs.\n  - `lastenv()`: Retrieve the Last Environment with a Given Prefix.\n  - `benv()`: Create a New Base Virtual Environment.\n  - `nenv()`: Create a New Virtual Environment in a Series.\n#\n- **Usage Example**:\n  ```shellscript\n  source venv_funcs.sh\n  benv myenv\n  cact myenv\n  ```\n#\n- **Dependencies**: \n  - This script depends on the `conda` command-line tool for managing virtual environments.\n  - The `util_funcs.sh` script is also required and should be located in the same directory as this script.\n#\n- **Notes**:\n  - This script assumes that the `conda` command is available in the system'\''s PATH.\n  - It is recommended to source this script in other scripts rather than executing it directly.\n  - Make sure to set the appropriate permissions on this script to allow execution.\n#\n- **Author**: [Your Name]\n- **Last Modified**: [Date]\n#\n- **Version**: [Version Number]\n#\n'
+ echo -e '\n'
+ echo -e '## Function Defniitions\n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
+ local file_path=docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_readme_header venv_funcs.sh bin/shinclude
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude
+ local script_doc_file=docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
+ local script_readme_file
++ get_script_readme_file venv_funcs.sh bin/shinclude
++ local script_name=venv_funcs.sh
++ local script_dir=bin/shinclude
++ local script_readme_file=bin/shinclude/venv_funcs_sh.md
++ echo bin/shinclude/venv_funcs_sh.md
+ script_readme_file=bin/shinclude/venv_funcs_sh.md
+ echo -e '# Functions Defined in Script: venv_funcs.sh\n'
+ echo -e '\n'
++ script_description venv_funcs.sh
++ local script_name=venv_funcs.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
+++ tail -n 1
++ description=' venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts'
++ description='Virtual Environment Management Functions for Bash Scripts'
++ description='Virtual Environment Management Functions for Bash Scripts'
++ echo 'Virtual Environment Management Functions for Bash Scripts'
+ echo -e '### [venv_funcs.sh](/docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md) - Virtual Environment Management Functions for Bash Scripts\n'
+ echo -e '\n'
+ echo -e '## List of Functions Defined:\n'
+ echo -e '\n'
+ printf '<pre><table>\n'
+ write_scripts_readme_entry venv_funcs.sh bin/shinclude
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude
+ local script_readme_file
++ script_readme_file venv_funcs.sh bin/shinclude
bash: script_readme_file: command not found
+ script_readme_file=
++ script_description venv_funcs.sh
++ local script_name=venv_funcs.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
+++ tail -n 1
++ description=' venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts'
++ description='Virtual Environment Management Functions for Bash Scripts'
++ description='Virtual Environment Management Functions for Bash Scripts'
++ echo 'Virtual Environment Management Functions for Bash Scripts'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' '' venv_funcs.sh 'Virtual Environment Management Functions for Bash Scripts'
++ get_scripts_readme_file ''
++ local readme_dir=
++ local scripts_readme_file=docs/shdoc/README.md
++ echo docs/shdoc/README.md
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Capture the fully qualified path of the sourced script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Capture the fully qualified path of the sourced script =~ ^#.* ]]
+ extracted_markdown+='Capture the fully qualified path of the sourced script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Extract script name, directory, and arguments =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Extract script name, directory, and arguments =~ ^#.* ]]
+ extracted_markdown+='Extract script name, directory, and arguments\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^#+ ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='MY_NAME=$(basename ${THIS_SCRIPT})'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#+ ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#+ ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_BASE=$(dirname "${__VENV_BIN}")'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_ARGS=$* =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#+ ]]
+ [[ __VENV_ARGS=$* =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_ARGS=$* =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_ARGS=$*'
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_ARGS=$* =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#+ ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \'
+ continue
+ IFS=
+ read -r line
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 )'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ continue
+ IFS=
+ read -r line
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ [[     "push_venv" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "push_venv" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "push_venv" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "push_venv"'
+ continue
+ IFS=
+ read -r line
+ [[     "pop_venv" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "push_venv" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "push_venv" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "pop_venv" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "pop_venv" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "pop_venv"'
+ continue
+ IFS=
+ read -r line
+ [[     "__set_venv_vars" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "pop_venv" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "pop_venv" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "__set_venv_vars" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "__set_venv_vars" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "__set_venv_vars"'
+ continue
+ IFS=
+ read -r line
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "__set_venv_vars" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "__set_venv_vars" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # This is so we can pass a return code up through sub-shells since set values are lost in subshells. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # This is so we can pass a return code up through sub-shells since set values are lost in subshells. =~ ^#.* ]]
+ extracted_markdown+='This is so we can pass a return code up through sub-shells since set values are lost in subshells.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^#+ ]]
+ extracted_markdown+='May or may not be a good ide, but we might want to pass get the return value of our function calls,\n'
+ continue
+ IFS=
+ read -r line
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^#+ ]]
+ extracted_markdown+='and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd\n'
+ continue
+ IFS=
+ read -r line
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^#+ ]]
+ extracted_markdown+='when it'\''s the last command in th efunction and we want the return code of the function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^#+ ]]
+ extracted_markdown+='This is something we would like where the echo sattement will return a value lik ethe last item\n'
+ continue
+ IFS=
+ read -r line
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^#+ ]]
+ extracted_markdown+='poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use\n'
+ continue
+ IFS=
+ read -r line
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^#+ ]]
+ extracted_markdown+='this to set the return code and exit the function passing thie to return or exit.  echo would be\n'
+ continue
+ IFS=
+ read -r line
+ [[ # the last command in the function and we would get the return code of the function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # the last command in the function and we would get the return code of the function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # the last command in the function and we would get the return code of the function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # the last command in the function and we would get the return code of the function. =~ ^#+ ]]
+ extracted_markdown+='the last command in the function and we would get the return code of the function.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^#+ ]]
+ extracted_markdown+='#__rc__ is internal aand is in a our function shell includes.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^#+ ]]
+ extracted_markdown+='It woudl be nice to come up with a fairly "automatuc" way to do this.\n'
+ continue
+ IFS=
+ read -r line
+ [[ __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __rc__=0 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __rc__=0 =~ ^#+ ]]
+ [[ __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __rc__=0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=__rc__=0
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Initialize the stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize the stack =~ ^#.* ]]
+ extracted_markdown+='Initialize the stack\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_STACK=() =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_STACK=() =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_STACK=() =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_STACK=() =~ ^#+ ]]
+ [[ __VENV_STACK=() =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_STACK=() =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_STACK=()'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_STACK=() =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: push_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: push_venv =~ ^#.* ]]
+ extracted_markdown+='# Function: push_venv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^#+ ]]
+ extracted_markdown+='`push_venv` - Specialized push the default VENV onto the stack.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^#+ ]]
+ extracted_markdown+='  - Pushes the default virtual environment onto the stack.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `push_venv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `push_venv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_venv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_venv` =~ ^#+ ]]
+ extracted_markdown+='  - `push_venv`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Modifies the stack to include the current environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to include the current environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to include the current environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to include the current environment. =~ ^#+ ]]
+ extracted_markdown+='  - Modifies the stack to include the current environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ push_venv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ push_venv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_venv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_venv() { =~ ^#+ ]]
+ [[ push_venv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=push_venv
+ function_name=push_venv
+ write_function_doc push_venv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: push_venv\n`push_venv` - Specialized push the default VENV onto the stack.\n## Description\n- **Purpose**: \n  - Pushes the default virtual environment onto the stack.\n- **Usage**: \n  - `push_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to include the current environment.\n- **Exceptions**: \n  - None\n'
+ local function_name=push_venv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: push_venv\n`push_venv` - Specialized push the default VENV onto the stack.\n## Description\n- **Purpose**: \n  - Pushes the default virtual environment onto the stack.\n- **Usage**: \n  - `push_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to include the current environment.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/push_venv.md
+ echo -e '## push_venv'
+ echo -e '# Function: push_venv\n`push_venv` - Specialized push the default VENV onto the stack.\n## Description\n- **Purpose**: \n  - Pushes the default virtual environment onto the stack.\n- **Usage**: \n  - `push_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to include the current environment.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/push_venv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/push_venv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry push_venv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=push_venv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/push_venv.md
++ function_description push_venv
++ local function_name=push_venv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/push_venv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/push_venv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/push_venv.md
+++ tail -n 1
++ description='`push_venv` - Specialized push the default VENV onto the stack.'
++ description='Specialized push the default VENV onto the stack.'
++ description='Specialized push the default VENV onto the stack.'
++ echo 'Specialized push the default VENV onto the stack.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' push_venv docs/shdoc/bin/shinclude/functions/push_venv.md 'Specialized push the default VENV onto the stack.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pop_venv =~ ^#.* ]]
+ extracted_markdown+='# Function: pop_venv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^#+ ]]
+ extracted_markdown+='`pop_venv` - Specialized pop the VENV off the stack and decrement.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^#+ ]]
+ extracted_markdown+='  - Pops the virtual environment off the stack and decrements.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `pop_venv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv` =~ ^#+ ]]
+ extracted_markdown+='  - `pop_venv`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Modifies the stack to remove the current environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to remove the current environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to remove the current environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to remove the current environment. =~ ^#+ ]]
+ extracted_markdown+='  - Modifies the stack to remove the current environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ pop_venv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pop_venv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_venv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_venv() { =~ ^#+ ]]
+ [[ pop_venv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=pop_venv
+ function_name=pop_venv
+ write_function_doc pop_venv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: pop_venv\n`pop_venv` - Specialized pop the VENV off the stack and decrement.\n## Description\n- **Purpose**: \n  - Pops the virtual environment off the stack and decrements.\n- **Usage**: \n  - `pop_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to remove the current environment.\n- **Exceptions**: \n  - None\n'
+ local function_name=pop_venv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: pop_venv\n`pop_venv` - Specialized pop the VENV off the stack and decrement.\n## Description\n- **Purpose**: \n  - Pops the virtual environment off the stack and decrements.\n- **Usage**: \n  - `pop_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to remove the current environment.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/pop_venv.md
+ echo -e '## pop_venv'
+ echo -e '# Function: pop_venv\n`pop_venv` - Specialized pop the VENV off the stack and decrement.\n## Description\n- **Purpose**: \n  - Pops the virtual environment off the stack and decrements.\n- **Usage**: \n  - `pop_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to remove the current environment.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/pop_venv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/pop_venv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry pop_venv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=pop_venv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/pop_venv.md
++ function_description pop_venv
++ local function_name=pop_venv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pop_venv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pop_venv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pop_venv.md
+++ tail -n 1
++ description='`pop_venv` - Specialized pop the VENV off the stack and decrement.'
++ description='Specialized pop the VENV off the stack and decrement.'
++ description='Specialized pop the VENV off the stack and decrement.'
++ echo 'Specialized pop the VENV off the stack and decrement.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' pop_venv docs/shdoc/bin/shinclude/functions/pop_venv.md 'Specialized pop the VENV off the stack and decrement.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local stack_value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_value =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local stack_value'
+ continue
+ IFS=
+ read -r line
+ [[     pop_stack __VENV_STACK =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_stack __VENV_STACK =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     pop_stack __VENV_STACK =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    pop_stack __VENV_STACK'
+ continue
+ IFS=
+ read -r line
+ [[     stack_value=${__sv__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_stack __VENV_STACK =~ ^}$ ]]
+ [[ false == false ]]
+ [[     pop_stack __VENV_STACK =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value=${__sv__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     stack_value=${__sv__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    stack_value=${__sv__}'
+ continue
+ IFS=
+ read -r line
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value=${__sv__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     stack_value=${__sv__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: __set_venv_vars =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: __set_venv_vars =~ ^#.* ]]
+ extracted_markdown+='# Function: __set_venv_vars\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^#+ ]]
+ extracted_markdown+='`__set_venv_vars` - Sets internal VENV variables.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^#+ ]]
+ extracted_markdown+='  - Sets internal variables related to virtual environment management.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `__set_venv_vars` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars` =~ ^#+ ]]
+ extracted_markdown+='  - `__set_venv_vars`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Initializes internal VENV variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Initializes internal VENV variables. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes internal VENV variables. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes internal VENV variables. =~ ^#+ ]]
+ extracted_markdown+='  - Initializes internal VENV variables.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ __set_venv_vars() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __set_venv_vars() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __set_venv_vars() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __set_venv_vars() { =~ ^#+ ]]
+ [[ __set_venv_vars() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=__set_venv_vars
+ function_name=__set_venv_vars
+ write_function_doc __set_venv_vars venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: __set_venv_vars\n`__set_venv_vars` - Sets internal VENV variables.\n## Description\n- **Purpose**: \n  - Sets internal variables related to virtual environment management.\n- **Usage**: \n  - `__set_venv_vars`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Initializes internal VENV variables.\n- **Exceptions**: \n  - None\n'
+ local function_name=__set_venv_vars
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: __set_venv_vars\n`__set_venv_vars` - Sets internal VENV variables.\n## Description\n- **Purpose**: \n  - Sets internal variables related to virtual environment management.\n- **Usage**: \n  - `__set_venv_vars`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Initializes internal VENV variables.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/__set_venv_vars.md
+ echo -e '## __set_venv_vars'
+ echo -e '# Function: __set_venv_vars\n`__set_venv_vars` - Sets internal VENV variables.\n## Description\n- **Purpose**: \n  - Sets internal variables related to virtual environment management.\n- **Usage**: \n  - `__set_venv_vars`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Initializes internal VENV variables.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/__set_venv_vars.md
+ local file_path=docs/shdoc/bin/shinclude/functions/__set_venv_vars.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry __set_venv_vars venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=__set_venv_vars
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/__set_venv_vars.md
++ function_description __set_venv_vars
++ local function_name=__set_venv_vars
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/__set_venv_vars.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/__set_venv_vars.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/__set_venv_vars.md
+++ tail -n 1
++ description='`__set_venv_vars` - Sets internal VENV variables.'
++ description='Sets internal VENV variables.'
++ description='Sets internal VENV variables.'
++ echo 'Sets internal VENV variables.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' __set_venv_vars docs/shdoc/bin/shinclude/functions/__set_venv_vars.md 'Sets internal VENV variables.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_PREFIX=$(echo "$*" | cut -d '\''.'\'' -f 1)'
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_DESC=$(echo "$*" | cut -d '\''.'\'' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '\''.'\'' -f 2)'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: snum =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: snum =~ ^#.* ]]
+ extracted_markdown+='# Function: snum\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^#+ ]]
+ extracted_markdown+='`snum` - Force set the VENV Sequence number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^#+ ]]
+ extracted_markdown+='  - Forces the setting of the VENV sequence number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `snum [number]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `snum [number]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `snum [number]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `snum [number]` =~ ^#+ ]]
+ extracted_markdown+='  - `snum [number]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^#+ ]]
+ extracted_markdown+='  - `number` (integer) - The sequence number to set.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Updates the sequence number for the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Updates the sequence number for the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Updates the sequence number for the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Updates the sequence number for the current VENV. =~ ^#+ ]]
+ extracted_markdown+='  - Updates the sequence number for the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ snum() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ snum() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ snum() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ snum() { =~ ^#+ ]]
+ [[ snum() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=snum
+ function_name=snum
+ write_function_doc snum venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: snum\n`snum` - Force set the VENV Sequence number.\n## Description\n- **Purpose**: \n  - Forces the setting of the VENV sequence number.\n- **Usage**: \n  - `snum [number]`\n- **Input Parameters**: \n  - `number` (integer) - The sequence number to set.\n- **Output**: \n  - Updates the sequence number for the current VENV.\n- **Exceptions**: \n  - None\n'
+ local function_name=snum
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: snum\n`snum` - Force set the VENV Sequence number.\n## Description\n- **Purpose**: \n  - Forces the setting of the VENV sequence number.\n- **Usage**: \n  - `snum [number]`\n- **Input Parameters**: \n  - `number` (integer) - The sequence number to set.\n- **Output**: \n  - Updates the sequence number for the current VENV.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/snum.md
+ echo -e '## snum'
+ echo -e '# Function: snum\n`snum` - Force set the VENV Sequence number.\n## Description\n- **Purpose**: \n  - Forces the setting of the VENV sequence number.\n- **Usage**: \n  - `snum [number]`\n- **Input Parameters**: \n  - `number` (integer) - The sequence number to set.\n- **Output**: \n  - Updates the sequence number for the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/snum.md
+ local file_path=docs/shdoc/bin/shinclude/functions/snum.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry snum venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=snum
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/snum.md
++ function_description snum
++ local function_name=snum
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/snum.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/snum.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/snum.md
+++ tail -n 1
++ description='`snum` - Force set the VENV Sequence number.'
++ description='Force set the VENV Sequence number.'
++ description='Force set the VENV Sequence number.'
++ echo 'Force set the VENV Sequence number.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' snum docs/shdoc/bin/shinclude/functions/snum.md 'Force set the VENV Sequence number.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local new_num=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local new_num=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_num=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local new_num=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local new_num=$1'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_num=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local new_num=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     # Validate that a number is actually provided =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Validate that a number is actually provided =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that a number is actually provided =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate that a number is actually provided =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Validate that a number is actually provided'
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${new_num}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that a number is actually provided =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate that a number is actually provided =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${new_num}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${new_num}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${new_num}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: No sequence number provided." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${new_num}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${new_num}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No sequence number provided." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No sequence number provided." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: No sequence number provided." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No sequence number provided." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No sequence number provided." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     # Validate that the provided number is numeric =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Validate that the provided number is numeric =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is numeric =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate that the provided number is numeric =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Validate that the provided number is numeric'
+ continue
+ IFS=
+ read -r line
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is numeric =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate that the provided number is numeric =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Sequence number must be numeric." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Sequence number must be numeric." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate that the provided number is within a valid range (00-99) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Validate that the provided number is within a valid range (00-99)'
+ continue
+ IFS=
+ read -r line
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Sequence number must be between 00 and 99." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_NUM=$( zero_pad "${new_num}" )'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: vpfx =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vpfx =~ ^#.* ]]
+ extracted_markdown+='# Function: vpfx\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^#+ ]]
+ extracted_markdown+='`vpfx` - Return the current VENV prefix.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the prefix of the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vpfx` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vpfx` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vpfx` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vpfx` =~ ^#+ ]]
+ extracted_markdown+='  - `vpfx`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The prefix of the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The prefix of the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The prefix of the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The prefix of the current VENV. =~ ^#+ ]]
+ extracted_markdown+='  - The prefix of the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ vpfx() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vpfx() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vpfx() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vpfx() { =~ ^#+ ]]
+ [[ vpfx() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=vpfx
+ function_name=vpfx
+ write_function_doc vpfx venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: vpfx\n`vpfx` - Return the current VENV prefix.\n## Description\n- **Purpose**: \n  - Returns the prefix of the current virtual environment.\n- **Usage**: \n  - `vpfx`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The prefix of the current VENV.\n- **Exceptions**: \n  - None\n'
+ local function_name=vpfx
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: vpfx\n`vpfx` - Return the current VENV prefix.\n## Description\n- **Purpose**: \n  - Returns the prefix of the current virtual environment.\n- **Usage**: \n  - `vpfx`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The prefix of the current VENV.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/vpfx.md
+ echo -e '## vpfx'
+ echo -e '# Function: vpfx\n`vpfx` - Return the current VENV prefix.\n## Description\n- **Purpose**: \n  - Returns the prefix of the current virtual environment.\n- **Usage**: \n  - `vpfx`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The prefix of the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/vpfx.md
+ local file_path=docs/shdoc/bin/shinclude/functions/vpfx.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry vpfx venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=vpfx
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/vpfx.md
++ function_description vpfx
++ local function_name=vpfx
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vpfx.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vpfx.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vpfx.md
+++ tail -n 1
++ description='`vpfx` - Return the current VENV prefix.'
++ description='Return the current VENV prefix.'
++ description='Return the current VENV prefix.'
++ echo 'Return the current VENV prefix.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' vpfx docs/shdoc/bin/shinclude/functions/vpfx.md 'Return the current VENV prefix.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${__VENV_PREFIX}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${__VENV_PREFIX}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV prefix has been set." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: No VENV prefix has been set." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     echo "${__VENV_PREFIX}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${__VENV_PREFIX}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${__VENV_PREFIX}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: vnum =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vnum =~ ^#.* ]]
+ extracted_markdown+='# Function: vnum\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^#+ ]]
+ extracted_markdown+='`vnum` - Return the current VENV sequence number.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the sequence number of the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vnum` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vnum` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vnum` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vnum` =~ ^#+ ]]
+ extracted_markdown+='  - `vnum`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The sequence number of the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The sequence number of the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sequence number of the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sequence number of the current VENV. =~ ^#+ ]]
+ extracted_markdown+='  - The sequence number of the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ vnum() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vnum() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vnum() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vnum() { =~ ^#+ ]]
+ [[ vnum() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=vnum
+ function_name=vnum
+ write_function_doc vnum venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: vnum\n`vnum` - Return the current VENV sequence number.\n## Description\n- **Purpose**: \n  - Returns the sequence number of the current virtual environment.\n- **Usage**: \n  - `vnum`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The sequence number of the current VENV.\n- **Exceptions**: \n  - None\n'
+ local function_name=vnum
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: vnum\n`vnum` - Return the current VENV sequence number.\n## Description\n- **Purpose**: \n  - Returns the sequence number of the current virtual environment.\n- **Usage**: \n  - `vnum`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The sequence number of the current VENV.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/vnum.md
+ echo -e '## vnum'
+ echo -e '# Function: vnum\n`vnum` - Return the current VENV sequence number.\n## Description\n- **Purpose**: \n  - Returns the sequence number of the current virtual environment.\n- **Usage**: \n  - `vnum`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The sequence number of the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/vnum.md
+ local file_path=docs/shdoc/bin/shinclude/functions/vnum.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry vnum venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=vnum
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/vnum.md
++ function_description vnum
++ local function_name=vnum
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vnum.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vnum.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vnum.md
+++ tail -n 1
++ description='`vnum` - Return the current VENV sequence number.'
++ description='Return the current VENV sequence number.'
++ description='Return the current VENV sequence number.'
++ echo 'Return the current VENV sequence number.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' vnum docs/shdoc/bin/shinclude/functions/vnum.md 'Return the current VENV sequence number.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${__VENV_NUM}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${__VENV_NUM}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV sequence number has been set." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: No VENV sequence number has been set." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     echo "${__VENV_NUM}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     echo "${__VENV_NUM}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_NUM}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${__VENV_NUM}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${__VENV_NUM}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_NUM}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${__VENV_NUM}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: vdsc =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vdsc =~ ^#.* ]]
+ extracted_markdown+='# Function: vdsc\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `vdsc` - Return the current VENV description. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `vdsc` - Return the current VENV description. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vdsc` - Return the current VENV description. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vdsc` - Return the current VENV description. =~ ^#+ ]]
+ extracted_markdown+='`vdsc` - Return the current VENV description.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Returns the description of the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the current virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Returns the description of the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `vdsc` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vdsc` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vdsc` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vdsc` =~ ^#+ ]]
+ extracted_markdown+='  - `vdsc`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The description of the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The description of the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The description of the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The description of the current VENV. =~ ^#+ ]]
+ extracted_markdown+='  - The description of the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ vdsc() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vdsc() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vdsc() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vdsc() { =~ ^#+ ]]
+ [[ vdsc() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=vdsc
+ function_name=vdsc
+ write_function_doc vdsc venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: vdsc\n`vdsc` - Return the current VENV description.\n## Description\n- **Purpose**: \n  - Returns the description of the current virtual environment.\n- **Usage**: \n  - `vdsc`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The description of the current VENV.\n- **Exceptions**: \n  - None\n'
+ local function_name=vdsc
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: vdsc\n`vdsc` - Return the current VENV description.\n## Description\n- **Purpose**: \n  - Returns the description of the current virtual environment.\n- **Usage**: \n  - `vdsc`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The description of the current VENV.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/vdsc.md
+ echo -e '## vdsc'
+ echo -e '# Function: vdsc\n`vdsc` - Return the current VENV description.\n## Description\n- **Purpose**: \n  - Returns the description of the current virtual environment.\n- **Usage**: \n  - `vdsc`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The description of the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/vdsc.md
+ local file_path=docs/shdoc/bin/shinclude/functions/vdsc.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry vdsc venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=vdsc
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/vdsc.md
++ function_description vdsc
++ local function_name=vdsc
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vdsc.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vdsc.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/vdsc.md
+++ tail -n 1
++ description='`vdsc` - Return the current VENV description.'
++ description='Return the current VENV description.'
++ description='Return the current VENV description.'
++ echo 'Return the current VENV description.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' vdsc docs/shdoc/bin/shinclude/functions/vdsc.md 'Return the current VENV description.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${__VENV_DESC}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${__VENV_DESC}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV sequence number has been set." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: No VENV sequence number has been set." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     echo "${__VENV_DESC}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     echo "${__VENV_DESC}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_DESC}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${__VENV_DESC}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${__VENV_DESC}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_DESC}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${__VENV_DESC}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: cact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: cact =~ ^#.* ]]
+ extracted_markdown+='# Function: cact\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `cact` - Change active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `cact` - Change active VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `cact` - Change active VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `cact` - Change active VENV. =~ ^#+ ]]
+ extracted_markdown+='`cact` - Change active VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^#+ ]]
+ extracted_markdown+='  - Changes the active virtual environment to the specified one.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `cact [env_name]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `cact [env_name]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cact [env_name]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cact [env_name]` =~ ^#+ ]]
+ extracted_markdown+='  - `cact [env_name]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^#+ ]]
+ extracted_markdown+='  - `env_name` (string) - The name of the environment to activate.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Activates the specified virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Activates the specified virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the specified virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the specified virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Activates the specified virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors if the environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#+ ]]
+ extracted_markdown+='  - Errors if the environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ cact() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ cact() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ cact() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ cact() { =~ ^#+ ]]
+ [[ cact() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=cact
+ function_name=cact
+ write_function_doc cact venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: cact\n`cact` - Change active VENV.\n## Description\n- **Purpose**: \n  - Changes the active virtual environment to the specified one.\n- **Usage**: \n  - `cact [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to activate.\n- **Output**: \n  - Activates the specified virtual environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ local function_name=cact
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: cact\n`cact` - Change active VENV.\n## Description\n- **Purpose**: \n  - Changes the active virtual environment to the specified one.\n- **Usage**: \n  - `cact [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to activate.\n- **Output**: \n  - Activates the specified virtual environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/cact.md
+ echo -e '## cact'
+ echo -e '# Function: cact\n`cact` - Change active VENV.\n## Description\n- **Purpose**: \n  - Changes the active virtual environment to the specified one.\n- **Usage**: \n  - `cact [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to activate.\n- **Output**: \n  - Activates the specified virtual environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/cact.md
+ local file_path=docs/shdoc/bin/shinclude/functions/cact.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry cact venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=cact
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/cact.md
++ function_description cact
++ local function_name=cact
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/cact.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/cact.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/cact.md
+++ tail -n 1
++ description='`cact` - Change active VENV.'
++ description='Change active VENV.'
++ description='Change active VENV.'
++ echo 'Change active VENV.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' cact docs/shdoc/bin/shinclude/functions/cact.md 'Change active VENV.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local new_env="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local new_env="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_env="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local new_env="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local new_env="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     # Validate input =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_env="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local new_env="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate input =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate input =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Validate input'
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "$1" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate input =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate input =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$1" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "$1" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$1" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV name provided." 1>&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: No VENV name provided." 1>&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Environment ${new_env} is already active." 1>&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Environment ${new_env} is already active." 1>&2'
+ continue
+ IFS=
+ read -r line
+ [[         return 0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return 0 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return 0'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return 0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Pop from stack if top of stack matches the new environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Pop from stack if top of stack matches the new environment =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Pop from stack if top of stack matches the new environment'
+ continue
+ IFS=
+ read -r line
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         pop_venv =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        pop_venv'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[         pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Set variables =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Set variables =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set variables =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Set variables =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Set variables'
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_NAME=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set variables =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Set variables =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NAME=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_NAME=$1'
+ continue
+ IFS=
+ read -r line
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NAME=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __set_venv_vars ${__VENV_NAME} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __set_venv_vars ${__VENV_NAME}'
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_PARMS=$(echo "$*" | cut -d '\''.'\'' -f 4-)'
+ continue
+ IFS=
+ read -r line
+ [[     # Push new environment to stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Push new environment to stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Push new environment to stack =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Push new environment to stack'
+ continue
+ IFS=
+ read -r line
+ [[     push_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Push new environment to stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Push new environment to stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     push_venv =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    push_venv'
+ continue
+ IFS=
+ read -r line
+ [[     # Deactivate current environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[     push_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Deactivate current environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Deactivate current environment =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Deactivate current environment'
+ continue
+ IFS=
+ read -r line
+ [[     # dact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Deactivate current environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Deactivate current environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # dact =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # dact =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # dact'
+ continue
+ IFS=
+ read -r line
+ [[     # Activate new environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # dact =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # dact =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate new environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Activate new environment =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Activate new environment'
+ continue
+ IFS=
+ read -r line
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate new environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Activate new environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Activating new environment: ${__VENV_NAME}..." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Activating new environment: ${__VENV_NAME}..."'
+ continue
+ IFS=
+ read -r line
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; }'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: dact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: dact =~ ^#.* ]]
+ extracted_markdown+='# Function: dact\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `dact` - Deactivate the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `dact` - Deactivate the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `dact` - Deactivate the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `dact` - Deactivate the current VENV. =~ ^#+ ]]
+ extracted_markdown+='`dact` - Deactivate the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Deactivates the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Deactivates the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `dact` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `dact` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dact` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dact` =~ ^#+ ]]
+ extracted_markdown+='  - `dact`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Deactivates the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current VENV. =~ ^#+ ]]
+ extracted_markdown+='  - Deactivates the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ dact() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ dact() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ dact() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ dact() { =~ ^#+ ]]
+ [[ dact() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=dact
+ function_name=dact
+ write_function_doc dact venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: dact\n`dact` - Deactivate the current VENV.\n## Description\n- **Purpose**: \n  - Deactivates the current virtual environment.\n- **Usage**: \n  - `dact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Deactivates the current VENV.\n- **Exceptions**: \n  - None\n'
+ local function_name=dact
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: dact\n`dact` - Deactivate the current VENV.\n## Description\n- **Purpose**: \n  - Deactivates the current virtual environment.\n- **Usage**: \n  - `dact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Deactivates the current VENV.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/dact.md
+ echo -e '## dact'
+ echo -e '# Function: dact\n`dact` - Deactivate the current VENV.\n## Description\n- **Purpose**: \n  - Deactivates the current virtual environment.\n- **Usage**: \n  - `dact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Deactivates the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/dact.md
+ local file_path=docs/shdoc/bin/shinclude/functions/dact.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry dact venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=dact
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/dact.md
++ function_description dact
++ local function_name=dact
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/dact.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/dact.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/dact.md
+++ tail -n 1
++ description='`dact` - Deactivate the current VENV.'
++ description='Deactivate the current VENV.'
++ description='Deactivate the current VENV.'
++ echo 'Deactivate the current VENV.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' dact docs/shdoc/bin/shinclude/functions/dact.md 'Deactivate the current VENV.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local stack_value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_value =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local stack_value'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${CONDA_DEFAULT_ENV}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "No conda environment is currently activated." 1>&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "No conda environment is currently activated." 1>&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ [[     # Check if the environment actually exists =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Check if the environment actually exists =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the environment actually exists =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the environment actually exists =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Check if the environment actually exists'
+ continue
+ IFS=
+ read -r line
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the environment actually exists =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the environment actually exists =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if ! conda info --envs | awk '\''{print $1}'\'' | grep -q -w "${CONDA_DEFAULT_ENV}"; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2'
+ continue
+ IFS=
+ read -r line
+ [[         # Optionally pop from stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Optionally pop from stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Optionally pop from stack =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Optionally pop from stack'
+ continue
+ IFS=
+ read -r line
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Optionally pop from stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Optionally pop from stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[             pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             pop_venv =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            pop_venv'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[             pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[         return 17 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 17 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return 17 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return 17'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 17 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return 17 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2'
+ continue
+ IFS=
+ read -r line
+ [[     conda deactivate =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda deactivate =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda deactivate =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    conda deactivate'
+ continue
+ IFS=
+ read -r line
+ [[     pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda deactivate =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda deactivate =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     pop_venv =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    pop_venv'
+ continue
+ IFS=
+ read -r line
+ [[     stack_value="${__sv__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[     pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value="${__sv__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     stack_value="${__sv__}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    stack_value="${__sv__}"'
+ continue
+ IFS=
+ read -r line
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value="${__sv__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     stack_value="${__sv__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: pact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pact =~ ^#.* ]]
+ extracted_markdown+='# Function: pact\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^#+ ]]
+ extracted_markdown+='`pact` - Switch to the Previous Active VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Switches to the previous active virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Switches to the previous active virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Switches to the previous active virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Switches to the previous active virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Switches to the previous active virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `pact` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pact` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pact` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pact` =~ ^#+ ]]
+ extracted_markdown+='  - `pact`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Activates the previous VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Activates the previous VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the previous VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the previous VENV. =~ ^#+ ]]
+ extracted_markdown+='  - Activates the previous VENV.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors if no previous environment exists. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if no previous environment exists. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if no previous environment exists. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if no previous environment exists. =~ ^#+ ]]
+ extracted_markdown+='  - Errors if no previous environment exists.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ pact() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pact() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pact() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pact() { =~ ^#+ ]]
+ [[ pact() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=pact
+ function_name=pact
+ write_function_doc pact venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: pact\n`pact` - Switch to the Previous Active VENV.\n## Description\n- **Purpose**: \n  - Switches to the previous active virtual environment.\n- **Usage**: \n  - `pact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Activates the previous VENV.\n- **Exceptions**: \n  - Errors if no previous environment exists.\n'
+ local function_name=pact
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: pact\n`pact` - Switch to the Previous Active VENV.\n## Description\n- **Purpose**: \n  - Switches to the previous active virtual environment.\n- **Usage**: \n  - `pact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Activates the previous VENV.\n- **Exceptions**: \n  - Errors if no previous environment exists.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/pact.md
+ echo -e '## pact'
+ echo -e '# Function: pact\n`pact` - Switch to the Previous Active VENV.\n## Description\n- **Purpose**: \n  - Switches to the previous active virtual environment.\n- **Usage**: \n  - `pact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Activates the previous VENV.\n- **Exceptions**: \n  - Errors if no previous environment exists.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/pact.md
+ local file_path=docs/shdoc/bin/shinclude/functions/pact.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry pact venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=pact
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/pact.md
++ function_description pact
++ local function_name=pact
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pact.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pact.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pact.md
+++ tail -n 1
++ description='`pact` - Switch to the Previous Active VENV.'
++ description='Switch to the Previous Active VENV.'
++ description='Switch to the Previous Active VENV.'
++ echo 'Switch to the Previous Active VENV.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' pact docs/shdoc/bin/shinclude/functions/pact.md 'Switch to the Previous Active VENV.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     pop_venv =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     pop_venv =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    pop_venv'
+ continue
+ IFS=
+ read -r line
+ [[     local previous_env=${__sv__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[     pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__sv__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local previous_env=${__sv__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local previous_env=${__sv__}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__sv__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local previous_env=${__sv__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Change to previous VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Change to previous VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Change to previous VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Change to previous VENV =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Change to previous VENV'
+ continue
+ IFS=
+ read -r line
+ [[     if [ $? -eq 0 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Change to previous VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Change to previous VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ $? -eq 0 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ $? -eq 0 ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ $? -eq 0 ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         cact "$previous_env" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ $? -eq 0 ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ $? -eq 0 ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cact "$previous_env" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         cact "$previous_env" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        cact "$previous_env"'
+ continue
+ IFS=
+ read -r line
+ [[         pop_venv > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cact "$previous_env" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         cact "$previous_env" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         pop_venv > /dev/null =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        pop_venv > /dev/null'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[         pop_venv > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         echo "No previous environment to switch to." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No previous environment to switch to." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "No previous environment to switch to." =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "No previous environment to switch to."'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No previous environment to switch to." =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "No previous environment to switch to." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: lenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: lenv =~ ^#.* ]]
+ extracted_markdown+='# Function: lenv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^#+ ]]
+ extracted_markdown+='`lenv` - List All Current VENVs with last modification date.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^#+ ]]
+ extracted_markdown+='  - Lists all the currently available conda virtual environments with their last modification date.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `lenv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `lenv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lenv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lenv` =~ ^#+ ]]
+ extracted_markdown+='  - `lenv`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^#+ ]]
+ extracted_markdown+='  - A list of all existing conda virtual environments with their last modification date.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   ```bash =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   ```bash =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   ```bash =~ ^#+ ]]
+ extracted_markdown+='  ```bash\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   2024-11-30    pa1                                 ~/miniconda3/envs/pa1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    pa1                                 ~/miniconda3/envs/pa1 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    pa1                                 ~/miniconda3/envs/pa1 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    pa1                                 ~/miniconda3/envs/pa1 =~ ^#+ ]]
+ extracted_markdown+='  2024-11-30    pa1                                 ~/miniconda3/envs/pa1\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10 =~ ^#+ ]]
+ extracted_markdown+='  2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics =~ ^#+ ]]
+ extracted_markdown+='  2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics =~ ^#+ ]]
+ extracted_markdown+='  2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   ``` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   ``` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   ``` =~ ^#+ ]]
+ extracted_markdown+='  ```\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^#+ ]]
+ extracted_markdown+='  - If no environments are available, the output from `conda info -e` will indicate this.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ lenv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ lenv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lenv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lenv() { =~ ^#+ ]]
+ [[ lenv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=lenv
+ function_name=lenv
+ write_function_doc lenv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: lenv\n`lenv` - List All Current VENVs with last modification date.\n## Description\n- **Purpose**: \n  - Lists all the currently available conda virtual environments with their last modification date.\n- **Usage**: \n  - `lenv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - A list of all existing conda virtual environments with their last modification date.\n  ```bash\n  2024-11-30    pa1                                 ~/miniconda3/envs/pa1\n  2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10\n  2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics\n  2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics\n  ```\n- **Exceptions**: \n  - If no environments are available, the output from `conda info -e` will indicate this.\n'
+ local function_name=lenv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: lenv\n`lenv` - List All Current VENVs with last modification date.\n## Description\n- **Purpose**: \n  - Lists all the currently available conda virtual environments with their last modification date.\n- **Usage**: \n  - `lenv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - A list of all existing conda virtual environments with their last modification date.\n  ```bash\n  2024-11-30    pa1                                 ~/miniconda3/envs/pa1\n  2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10\n  2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics\n  2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics\n  ```\n- **Exceptions**: \n  - If no environments are available, the output from `conda info -e` will indicate this.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/lenv.md
+ echo -e '## lenv'
+ echo -e '# Function: lenv\n`lenv` - List All Current VENVs with last modification date.\n## Description\n- **Purpose**: \n  - Lists all the currently available conda virtual environments with their last modification date.\n- **Usage**: \n  - `lenv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - A list of all existing conda virtual environments with their last modification date.\n  ```bash\n  2024-11-30    pa1                                 ~/miniconda3/envs/pa1\n  2024-11-30    pa1..base-3-10                      ~/miniconda3/envs/pa1..base-3-10\n  2024-11-30    seq311.00.case-analitics            ~/miniconda3/envs/seq311.00.case-analitics\n  2024-12-05    pa1.00.case-analytics               ~/miniconda3/envs/pa1.00.case-analytics\n  ```\n- **Exceptions**: \n  - If no environments are available, the output from `conda info -e` will indicate this.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/lenv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/lenv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry lenv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=lenv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/lenv.md
++ function_description lenv
++ local function_name=lenv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/lenv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/lenv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/lenv.md
+++ tail -n 1
++ description='`lenv` - List All Current VENVs with last modification date.'
++ description='List All Current VENVs with last modification date.'
++ description='List All Current VENVs with last modification date.'
++ echo 'List All Current VENVs with last modification date.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' lenv docs/shdoc/bin/shinclude/functions/lenv.md 'List All Current VENVs with last modification date.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     # Fetch environment information =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Fetch environment information =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Fetch environment information =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Fetch environment information =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Fetch environment information'
+ continue
+ IFS=
+ read -r line
+ [[     local envs_info =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Fetch environment information =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Fetch environment information =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local envs_info =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local envs_info =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local envs_info'
+ continue
+ IFS=
+ read -r line
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local envs_info =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local envs_info =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    envs_info=$(conda info --envs | grep -E -v '\''^#'\'')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Prepare a temporary file to store environment details =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Prepare a temporary file to store environment details =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Prepare a temporary file to store environment details =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Prepare a temporary file to store environment details =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Prepare a temporary file to store environment details'
+ continue
+ IFS=
+ read -r line
+ [[     local temp_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Prepare a temporary file to store environment details =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Prepare a temporary file to store environment details =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local temp_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local temp_file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local temp_file'
+ continue
+ IFS=
+ read -r line
+ [[     temp_file=$(mktemp) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local temp_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local temp_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     temp_file=$(mktemp) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     temp_file=$(mktemp) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    temp_file=$(mktemp)'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     temp_file=$(mktemp) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     temp_file=$(mktemp) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Iterate over each environment and fetch creation date =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Iterate over each environment and fetch creation date =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Iterate over each environment and fetch creation date'
+ continue
+ IFS=
+ read -r line
+ [[     while IFS= read -r line; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     while IFS= read -r line; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     while IFS= read -r line; do =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    while IFS= read -r line; do'
+ continue
+ IFS=
+ read -r line
+ [[         local env_name env_path creation_date active_marker =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     while IFS= read -r line; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     while IFS= read -r line; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local env_name env_path creation_date active_marker =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local env_name env_path creation_date active_marker =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local env_name env_path creation_date active_marker'
+ continue
+ IFS=
+ read -r line
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local env_name env_path creation_date active_marker =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local env_name env_path creation_date active_marker =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         env_name=$(echo "$line" | awk '{print $1}') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        env_name=$(echo "$line" | awk '\''{print $1}'\'')'
+ continue
+ IFS=
+ read -r line
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         env_path=$(echo "$line" | awk '{print $NF}') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        env_path=$(echo "$line" | awk '\''{print $NF}'\'')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Fetch creation date using stat =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Fetch creation date using stat =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Fetch creation date using stat =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Fetch creation date using stat =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Fetch creation date using stat'
+ continue
+ IFS=
+ read -r line
+ [[         if [ -d "$env_path" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Fetch creation date using stat =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Fetch creation date using stat =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [ -d "$env_path" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [ -d "$env_path" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [ -d "$env_path" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [ -d "$env_path" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [ -d "$env_path" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            creation_date=$(stat -c "%y" "$env_path" | cut -d'\'' '\'' -f1)'
+ continue
+ IFS=
+ read -r line
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ [[             creation_date="N/A" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date="N/A" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             creation_date="N/A" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            creation_date="N/A"'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date="N/A" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             creation_date="N/A" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Remove $HOME from the path =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Remove $HOME from the path =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Remove $HOME from the path =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Remove $HOME from the path =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Remove $HOME from the path'
+ continue
+ IFS=
+ read -r line
+ [[         env_path=${env_path/$HOME/\~} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Remove $HOME from the path =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Remove $HOME from the path =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=${env_path/$HOME/\~} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         env_path=${env_path/$HOME/\~} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        env_path=${env_path/$HOME/\~}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=${env_path/$HOME/\~} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         env_path=${env_path/$HOME/\~} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Handle active environment marker =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Handle active environment marker =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Handle active environment marker =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Handle active environment marker =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Handle active environment marker'
+ continue
+ IFS=
+ read -r line
+ [[         if [[ "$line" == *\** ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Handle active environment marker =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Handle active environment marker =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "$line" == *\** ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ "$line" == *\** ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if [[ "$line" == *\** ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[             active_marker="*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "$line" == *\** ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ "$line" == *\** ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker="*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             active_marker="*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            active_marker="*"'
+ continue
+ IFS=
+ read -r line
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker="*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             active_marker="*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ [[             active_marker=" " =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker=" " =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             active_marker=" " =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            active_marker=" "'
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker=" " =~ ^}$ ]]
+ [[ false == false ]]
+ [[             active_marker=" " =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Write to temporary file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Write to temporary file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Write to temporary file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Write to temporary file =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Write to temporary file'
+ continue
+ IFS=
+ read -r line
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Write to temporary file =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Write to temporary file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file"'
+ continue
+ IFS=
+ read -r line
+ [[     done <<< "$envs_info" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done <<< "$envs_info" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done <<< "$envs_info" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    done <<< "$envs_info"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done <<< "$envs_info" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done <<< "$envs_info" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Display the results =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Display the results =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the results =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Display the results =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Display the results'
+ continue
+ IFS=
+ read -r line
+ [[     column -t -s $'\t' < "$temp_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the results =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Display the results =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     column -t -s $'\t' < "$temp_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     column -t -s $'\t' < "$temp_file" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    column -t -s $'\''\t'\'' < "$temp_file"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     column -t -s $'\t' < "$temp_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     column -t -s $'\t' < "$temp_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Clean up =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Clean up =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clean up =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Clean up =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Clean up'
+ continue
+ IFS=
+ read -r line
+ [[     rm "$temp_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clean up =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Clean up =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     rm "$temp_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     rm "$temp_file" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    rm "$temp_file"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     rm "$temp_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     rm "$temp_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: lastenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: lastenv =~ ^#.* ]]
+ extracted_markdown+='# Function: lastenv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^#+ ]]
+ extracted_markdown+='`lastenv` - Retrieve the Last Environment with a Given Prefix.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^#+ ]]
+ extracted_markdown+='  - Retrieves the last environment with a specified prefix.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `lastenv [prefix]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `lastenv [prefix]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lastenv [prefix]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lastenv [prefix]` =~ ^#+ ]]
+ extracted_markdown+='  - `lastenv [prefix]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^#+ ]]
+ extracted_markdown+='  - `prefix` (string) - The prefix to search for.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The name of the last environment with the given prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The name of the last environment with the given prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The name of the last environment with the given prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The name of the last environment with the given prefix. =~ ^#+ ]]
+ extracted_markdown+='  - The name of the last environment with the given prefix.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ lastenv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ lastenv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lastenv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lastenv() { =~ ^#+ ]]
+ [[ lastenv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=lastenv
+ function_name=lastenv
+ write_function_doc lastenv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: lastenv\n`lastenv` - Retrieve the Last Environment with a Given Prefix.\n## Description\n- **Purpose**: \n  - Retrieves the last environment with a specified prefix.\n- **Usage**: \n  - `lastenv [prefix]`\n- **Input Parameters**: \n  - `prefix` (string) - The prefix to search for.\n- **Output**: \n  - The name of the last environment with the given prefix.\n- **Exceptions**: \n  - None\n'
+ local function_name=lastenv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: lastenv\n`lastenv` - Retrieve the Last Environment with a Given Prefix.\n## Description\n- **Purpose**: \n  - Retrieves the last environment with a specified prefix.\n- **Usage**: \n  - `lastenv [prefix]`\n- **Input Parameters**: \n  - `prefix` (string) - The prefix to search for.\n- **Output**: \n  - The name of the last environment with the given prefix.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/lastenv.md
+ echo -e '## lastenv'
+ echo -e '# Function: lastenv\n`lastenv` - Retrieve the Last Environment with a Given Prefix.\n## Description\n- **Purpose**: \n  - Retrieves the last environment with a specified prefix.\n- **Usage**: \n  - `lastenv [prefix]`\n- **Input Parameters**: \n  - `prefix` (string) - The prefix to search for.\n- **Output**: \n  - The name of the last environment with the given prefix.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/lastenv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/lastenv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry lastenv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=lastenv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/lastenv.md
++ function_description lastenv
++ local function_name=lastenv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/lastenv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/lastenv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/lastenv.md
+++ tail -n 1
++ description='`lastenv` - Retrieve the Last Environment with a Given Prefix.'
++ description='Retrieve the Last Environment with a Given Prefix.'
++ description='Retrieve the Last Environment with a Given Prefix.'
++ echo 'Retrieve the Last Environment with a Given Prefix.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' lastenv docs/shdoc/bin/shinclude/functions/lastenv.md 'Retrieve the Last Environment with a Given Prefix.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local prefix="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local prefix="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local prefix="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local prefix="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local prefix="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1)'
+ continue
+ IFS=
+ read -r line
+ [[     echo "${last_env}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${last_env}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${last_env}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "${last_env}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${last_env}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${last_env}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: benv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: benv =~ ^#.* ]]
+ extracted_markdown+='# Function: benv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^#+ ]]
+ extracted_markdown+='`benv` - Create a New Base Virtual Environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^#+ ]]
+ extracted_markdown+='  - Creates a new base conda virtual environment and activates it.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^#+ ]]
+ extracted_markdown+='  - `benv ENV_NAME [EXTRA_OPTIONS]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^#+ ]]
+ extracted_markdown+='  - `ENV_NAME` (string) - The name of the new environment to create.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^#+ ]]
+ extracted_markdown+='  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Creates and activates the new environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment. =~ ^#+ ]]
+ extracted_markdown+='  - Creates and activates the new environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#+ ]]
+ extracted_markdown+='  - Errors during environment creation are handled by conda.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ benv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ benv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ benv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ benv() { =~ ^#+ ]]
+ [[ benv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=benv
+ function_name=benv
+ write_function_doc benv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: benv\n`benv` - Create a New Base Virtual Environment.\n## Description\n- **Purpose**: \n  - Creates a new base conda virtual environment and activates it.\n- **Usage**: \n  - `benv ENV_NAME [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `ENV_NAME` (string) - The name of the new environment to create.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.\n- **Output**: \n  - Creates and activates the new environment.\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ local function_name=benv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: benv\n`benv` - Create a New Base Virtual Environment.\n## Description\n- **Purpose**: \n  - Creates a new base conda virtual environment and activates it.\n- **Usage**: \n  - `benv ENV_NAME [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `ENV_NAME` (string) - The name of the new environment to create.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.\n- **Output**: \n  - Creates and activates the new environment.\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/benv.md
+ echo -e '## benv'
+ echo -e '# Function: benv\n`benv` - Create a New Base Virtual Environment.\n## Description\n- **Purpose**: \n  - Creates a new base conda virtual environment and activates it.\n- **Usage**: \n  - `benv ENV_NAME [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `ENV_NAME` (string) - The name of the new environment to create.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.\n- **Output**: \n  - Creates and activates the new environment.\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/benv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/benv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry benv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=benv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/benv.md
++ function_description benv
++ local function_name=benv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/benv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/benv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/benv.md
+++ tail -n 1
++ description='`benv` - Create a New Base Virtual Environment.'
++ description='Create a New Base Virtual Environment.'
++ description='Create a New Base Virtual Environment.'
++ echo 'Create a New Base Virtual Environment.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' benv docs/shdoc/bin/shinclude/functions/benv.md 'Create a New Base Virtual Environment.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local env_name="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env_name="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_name="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_name="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env_name="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local extra_options="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_name="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_name="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local extra_options="$*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local extra_options="$*"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local extra_options="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Creating base virtual environment ${env_name} ${extra_options}"'
+ continue
+ IFS=
+ read -r line
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda create -n "${env_name}" ${extra_options} -y || { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    conda create -n "${env_name}" ${extra_options} -y || {'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Failed to create environment ${env_name}" >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    }'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "Base environment created - activating ${env_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Base environment created - activating ${env_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Base environment created - activating ${env_name}"'
+ continue
+ IFS=
+ read -r line
+ [[     cact "${env_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${env_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact "${env_name}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cact "${env_name}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${env_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact "${env_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: nenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: nenv =~ ^#.* ]]
+ extracted_markdown+='# Function: nenv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^#+ ]]
+ extracted_markdown+='`nenv` - Create a New Virtual Environment in a Series.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^#+ ]]
+ extracted_markdown+='  - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^#+ ]]
+ extracted_markdown+='  - `nenv PREFIX [EXTRA_OPTIONS]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^#+ ]]
+ extracted_markdown+='  - `PREFIX` (string) - The prefix to identify the series of environments.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^#+ ]]
+ extracted_markdown+='  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^#+ ]]
+ extracted_markdown+='  - Creates and activates the new environment with sequence number "00".\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#+ ]]
+ extracted_markdown+='  - Errors during environment creation are handled by conda.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ nenv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ nenv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ nenv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ nenv() { =~ ^#+ ]]
+ [[ nenv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=nenv
+ function_name=nenv
+ write_function_doc nenv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: nenv\n`nenv` - Create a New Virtual Environment in a Series.\n## Description\n- **Purpose**: \n  - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.\n- **Usage**: \n  - `nenv PREFIX [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `PREFIX` (string) - The prefix to identify the series of environments.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.\n- **Output**: \n  - Creates and activates the new environment with sequence number "00".\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ local function_name=nenv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: nenv\n`nenv` - Create a New Virtual Environment in a Series.\n## Description\n- **Purpose**: \n  - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.\n- **Usage**: \n  - `nenv PREFIX [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `PREFIX` (string) - The prefix to identify the series of environments.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.\n- **Output**: \n  - Creates and activates the new environment with sequence number "00".\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/nenv.md
+ echo -e '## nenv'
+ echo -e '# Function: nenv\n`nenv` - Create a New Virtual Environment in a Series.\n## Description\n- **Purpose**: \n  - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.\n- **Usage**: \n  - `nenv PREFIX [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `PREFIX` (string) - The prefix to identify the series of environments.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.\n- **Output**: \n  - Creates and activates the new environment with sequence number "00".\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/nenv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/nenv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry nenv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=nenv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/nenv.md
++ function_description nenv
++ local function_name=nenv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/nenv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/nenv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/nenv.md
+++ tail -n 1
++ description='`nenv` - Create a New Virtual Environment in a Series.'
++ description='Create a New Virtual Environment in a Series.'
++ description='Create a New Virtual Environment in a Series.'
++ echo 'Create a New Virtual Environment in a Series.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' nenv docs/shdoc/bin/shinclude/functions/nenv.md 'Create a New Virtual Environment in a Series.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local prefix="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local prefix="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local prefix="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local prefix="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local extra_options="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local prefix="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local extra_options="$*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local extra_options="$*"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local extra_options="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     [ -z "${prefix}" ] && { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     [ -z "${prefix}" ] && { =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -z "${prefix}" ] && { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -z "${prefix}" ] && { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    [ -z "${prefix}" ] && {'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Prefix is required." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -z "${prefix}" ] && { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -z "${prefix}" ] && { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Prefix is required." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Prefix is required." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Prefix is required." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Prefix is required." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Prefix is required." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    }'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Reset the sequence number to start from "00" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Reset the sequence number to start from "00" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Reset the sequence number to start from "00" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Reset the sequence number to start from "00" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Reset the sequence number to start from "00"'
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_NUM="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Reset the sequence number to start from "00" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Reset the sequence number to start from "00" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NUM="" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_NUM=""'
+ continue
+ IFS=
+ read -r line
+ [[     # Set the global prefix =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NUM="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set the global prefix =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Set the global prefix =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Set the global prefix'
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_PREFIX="${prefix}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set the global prefix =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Set the global prefix =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX="${prefix}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_PREFIX="${prefix}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_PREFIX="${prefix}"'
+ continue
+ IFS=
+ read -r line
+ [[     # Create a clone of the base environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX="${prefix}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_PREFIX="${prefix}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Create a clone of the base environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Create a clone of the base environment =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Create a clone of the base environment'
+ continue
+ IFS=
+ read -r line
+ [[     ccln "base" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Create a clone of the base environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Create a clone of the base environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ccln "base" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ccln "base" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    ccln "base"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ccln "base" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ccln "base" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: denv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: denv =~ ^#.* ]]
+ extracted_markdown+='# Function: denv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `denv` - Delete a Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `denv` - Delete a Virtual Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `denv` - Delete a Virtual Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `denv` - Delete a Virtual Environment. =~ ^#+ ]]
+ extracted_markdown+='`denv` - Delete a Virtual Environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Deletes the specified virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Deletes the specified virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `denv [env_name]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `denv [env_name]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `denv [env_name]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `denv [env_name]` =~ ^#+ ]]
+ extracted_markdown+='  - `denv [env_name]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^#+ ]]
+ extracted_markdown+='  - `env_name` (string) - The name of the environment to delete.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Deletes the specified environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified environment. =~ ^#+ ]]
+ extracted_markdown+='  - Deletes the specified environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors if the environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#+ ]]
+ extracted_markdown+='  - Errors if the environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ denv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ denv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ denv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ denv() { =~ ^#+ ]]
+ [[ denv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=denv
+ function_name=denv
+ write_function_doc denv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: denv\n`denv` - Delete a Virtual Environment.\n## Description\n- **Purpose**: \n  - Deletes the specified virtual environment.\n- **Usage**: \n  - `denv [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to delete.\n- **Output**: \n  - Deletes the specified environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ local function_name=denv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: denv\n`denv` - Delete a Virtual Environment.\n## Description\n- **Purpose**: \n  - Deletes the specified virtual environment.\n- **Usage**: \n  - `denv [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to delete.\n- **Output**: \n  - Deletes the specified environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/denv.md
+ echo -e '## denv'
+ echo -e '# Function: denv\n`denv` - Delete a Virtual Environment.\n## Description\n- **Purpose**: \n  - Deletes the specified virtual environment.\n- **Usage**: \n  - `denv [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to delete.\n- **Output**: \n  - Deletes the specified environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/denv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/denv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry denv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=denv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/denv.md
++ function_description denv
++ local function_name=denv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/denv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/denv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/denv.md
+++ tail -n 1
++ description='`denv` - Delete a Virtual Environment.'
++ description='Delete a Virtual Environment.'
++ description='Delete a Virtual Environment.'
++ echo 'Delete a Virtual Environment.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' denv docs/shdoc/bin/shinclude/functions/denv.md 'Delete a Virtual Environment.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local env_to_delete="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env_to_delete="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_to_delete="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env_to_delete="$1"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_to_delete="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${env_to_delete}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${env_to_delete}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Environment name is required for deletion." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: Environment name is required for deletion." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Removing environment -> ${env_to_delete}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Removing environment -> ${env_to_delete}"'
+ continue
+ IFS=
+ read -r line
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda remove --all -n ${env_to_delete} -y =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    conda remove --all -n ${env_to_delete} -y'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: renv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: renv =~ ^#.* ]]
+ extracted_markdown+='# Function: renv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^#+ ]]
+ extracted_markdown+='`renv` - Revert to Previous Virtual Environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^#+ ]]
+ extracted_markdown+='  - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `renv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `renv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `renv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `renv` =~ ^#+ ]]
+ extracted_markdown+='  - `renv`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^#+ ]]
+ extracted_markdown+='  - Removes the current environment and reverts to the previous one.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^#+ ]]
+ extracted_markdown+='  - Errors during deactivation or deletion are handled by conda.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ renv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ renv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ renv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ renv() { =~ ^#+ ]]
+ [[ renv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=renv
+ function_name=renv
+ write_function_doc renv venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: renv\n`renv` - Revert to Previous Virtual Environment.\n## Description\n- **Purpose**: \n  - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.\n- **Usage**: \n  - `renv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Removes the current environment and reverts to the previous one.\n- **Exceptions**: \n  - Errors during deactivation or deletion are handled by conda.\n'
+ local function_name=renv
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: renv\n`renv` - Revert to Previous Virtual Environment.\n## Description\n- **Purpose**: \n  - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.\n- **Usage**: \n  - `renv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Removes the current environment and reverts to the previous one.\n- **Exceptions**: \n  - Errors during deactivation or deletion are handled by conda.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/renv.md
+ echo -e '## renv'
+ echo -e '# Function: renv\n`renv` - Revert to Previous Virtual Environment.\n## Description\n- **Purpose**: \n  - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.\n- **Usage**: \n  - `renv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Removes the current environment and reverts to the previous one.\n- **Exceptions**: \n  - Errors during deactivation or deletion are handled by conda.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/renv.md
+ local file_path=docs/shdoc/bin/shinclude/functions/renv.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry renv venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=renv
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/renv.md
++ function_description renv
++ local function_name=renv
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/renv.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/renv.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/renv.md
+++ tail -n 1
++ description='`renv` - Revert to Previous Virtual Environment.'
++ description='Revert to Previous Virtual Environment.'
++ description='Revert to Previous Virtual Environment.'
++ echo 'Revert to Previous Virtual Environment.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' renv docs/shdoc/bin/shinclude/functions/renv.md 'Revert to Previous Virtual Environment.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env_to_delete=${CONDA_DEFAULT_ENV}'
+ continue
+ IFS=
+ read -r line
+ [[     local previous_env=${__VENV_PREV} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__VENV_PREV} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local previous_env=${__VENV_PREV} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local previous_env=${__VENV_PREV}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__VENV_PREV} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local previous_env=${__VENV_PREV} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${env_to_delete}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${env_to_delete}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Error: No active environment to remove." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No active environment to remove." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No active environment to remove." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Error: No active environment to remove." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No active environment to remove." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No active environment to remove." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "${previous_env}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${previous_env}" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "${previous_env}" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Warning: No previous environment to revert to. Reverting to base environment." >&2'
+ continue
+ IFS=
+ read -r line
+ [[         previous_env="base" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         previous_env="base" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         previous_env="base" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        previous_env="base"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         previous_env="base" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         previous_env="base" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     dact  # Deactivate the current environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     dact  # Deactivate the current environment =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact  # Deactivate the current environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     dact  # Deactivate the current environment =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    dact  # Deactivate the current environment'
+ continue
+ IFS=
+ read -r line
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact  # Deactivate the current environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     dact  # Deactivate the current environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     denv ${env_to_delete}  # Delete the environment =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    denv ${env_to_delete}  # Delete the environment'
+ continue
+ IFS=
+ read -r line
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact ${previous_env}  # Reactivate the previous environment =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cact ${previous_env}  # Reactivate the previous environment'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: ccln =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: ccln =~ ^#.* ]]
+ extracted_markdown+='# Function: ccln\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `ccln` - Clone a Conda Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `ccln` - Clone a Conda Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ccln` - Clone a Conda Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ccln` - Clone a Conda Environment. =~ ^#+ ]]
+ extracted_markdown+='`ccln` - Clone a Conda Environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Clones an existing conda environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Clones an existing conda environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Clones an existing conda environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Clones an existing conda environment. =~ ^#+ ]]
+ extracted_markdown+='  - Clones an existing conda environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `ccln [source_env] [target_env]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `ccln [source_env] [target_env]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ccln [source_env] [target_env]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ccln [source_env] [target_env]` =~ ^#+ ]]
+ extracted_markdown+='  - `ccln [source_env] [target_env]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^#+ ]]
+ extracted_markdown+='  - `source_env` (string) - The name of the environment to clone.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^#+ ]]
+ extracted_markdown+='  - `target_env` (string) - The name of the new cloned environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Creates a clone of the specified environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates a clone of the specified environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a clone of the specified environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a clone of the specified environment. =~ ^#+ ]]
+ extracted_markdown+='  - Creates a clone of the specified environment.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors if the source environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if the source environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the source environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the source environment does not exist. =~ ^#+ ]]
+ extracted_markdown+='  - Errors if the source environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ ccln() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ccln() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ccln() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ccln() { =~ ^#+ ]]
+ [[ ccln() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=ccln
+ function_name=ccln
+ write_function_doc ccln venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: ccln\n`ccln` - Clone a Conda Environment.\n## Description\n- **Purpose**: \n  - Clones an existing conda environment.\n- **Usage**: \n  - `ccln [source_env] [target_env]`\n- **Input Parameters**: \n  - `source_env` (string) - The name of the environment to clone.\n  - `target_env` (string) - The name of the new cloned environment.\n- **Output**: \n  - Creates a clone of the specified environment.\n- **Exceptions**: \n  - Errors if the source environment does not exist.\n'
+ local function_name=ccln
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: ccln\n`ccln` - Clone a Conda Environment.\n## Description\n- **Purpose**: \n  - Clones an existing conda environment.\n- **Usage**: \n  - `ccln [source_env] [target_env]`\n- **Input Parameters**: \n  - `source_env` (string) - The name of the environment to clone.\n  - `target_env` (string) - The name of the new cloned environment.\n- **Output**: \n  - Creates a clone of the specified environment.\n- **Exceptions**: \n  - Errors if the source environment does not exist.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/ccln.md
+ echo -e '## ccln'
+ echo -e '# Function: ccln\n`ccln` - Clone a Conda Environment.\n## Description\n- **Purpose**: \n  - Clones an existing conda environment.\n- **Usage**: \n  - `ccln [source_env] [target_env]`\n- **Input Parameters**: \n  - `source_env` (string) - The name of the environment to clone.\n  - `target_env` (string) - The name of the new cloned environment.\n- **Output**: \n  - Creates a clone of the specified environment.\n- **Exceptions**: \n  - Errors if the source environment does not exist.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/ccln.md
+ local file_path=docs/shdoc/bin/shinclude/functions/ccln.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry ccln venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=ccln
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/ccln.md
++ function_description ccln
++ local function_name=ccln
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/ccln.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/ccln.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/ccln.md
+++ tail -n 1
++ description='`ccln` - Clone a Conda Environment.'
++ description='Clone a Conda Environment.'
++ description='Clone a Conda Environment.'
++ echo 'Clone a Conda Environment.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' ccln docs/shdoc/bin/shinclude/functions/ccln.md 'Clone a Conda Environment.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     # If no description is provided, use the description of the current VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # If no description is provided, use the description of the current VENV =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # If no description is provided, use the description of the current VENV'
+ continue
+ IFS=
+ read -r line
+ [[     if [ -z "$1" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$1" ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ -z "$1" ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         __VENV_DESC=$( vdsc ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$1" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$( vdsc ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __VENV_DESC=$( vdsc ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __VENV_DESC=$( vdsc )'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$( vdsc ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __VENV_DESC=$( vdsc ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         __VENV_DESC=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __VENV_DESC=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __VENV_DESC=$1'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __VENV_DESC=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_NUM=$( next_step "$(vnum)" )'
+ continue
+ IFS=
+ read -r line
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Clone the VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Clone the VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clone the VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Clone the VENV =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Clone the VENV'
+ continue
+ IFS=
+ read -r line
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clone the VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Clone the VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $?'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Switch to the newly created VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Switch to the newly created VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Switch to the newly created VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Switch to the newly created VENV =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Switch to the newly created VENV'
+ continue
+ IFS=
+ read -r line
+ [[     cact "${__VENV_NAME}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Switch to the newly created VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Switch to the newly created VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${__VENV_NAME}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact "${__VENV_NAME}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cact "${__VENV_NAME}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${__VENV_NAME}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact "${__VENV_NAME}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: venvdiff =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: venvdiff =~ ^#.* ]]
+ extracted_markdown+='# Function: venvdiff\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^#+ ]]
+ extracted_markdown+='`venvdiff` - Compare Two Virtual Environments.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Compares two virtual environments and lists differences. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Compares two virtual environments and lists differences. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Compares two virtual environments and lists differences. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Compares two virtual environments and lists differences. =~ ^#+ ]]
+ extracted_markdown+='  - Compares two virtual environments and lists differences.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `venvdiff [env1] [env2]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `venvdiff [env1] [env2]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `venvdiff [env1] [env2]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `venvdiff [env1] [env2]` =~ ^#+ ]]
+ extracted_markdown+='  - `venvdiff [env1] [env2]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^#+ ]]
+ extracted_markdown+='  - `env1` (string) - The first environment to compare.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^#+ ]]
+ extracted_markdown+='  - `env2` (string) - The second environment to compare.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Lists the differences between the two environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists the differences between the two environments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the differences between the two environments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the differences between the two environments. =~ ^#+ ]]
+ extracted_markdown+='  - Lists the differences between the two environments.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Errors if either environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if either environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if either environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if either environment does not exist. =~ ^#+ ]]
+ extracted_markdown+='  - Errors if either environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ venvdiff() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ venvdiff() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ venvdiff() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ venvdiff() { =~ ^#+ ]]
+ [[ venvdiff() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=venvdiff
+ function_name=venvdiff
+ write_function_doc venvdiff venv_funcs.sh bin/shinclude/venv_funcs.sh '# Function: venvdiff\n`venvdiff` - Compare Two Virtual Environments.\n## Description\n- **Purpose**: \n  - Compares two virtual environments and lists differences.\n- **Usage**: \n  - `venvdiff [env1] [env2]`\n- **Input Parameters**: \n  - `env1` (string) - The first environment to compare.\n  - `env2` (string) - The second environment to compare.\n- **Output**: \n  - Lists the differences between the two environments.\n- **Exceptions**: \n  - Errors if either environment does not exist.\n'
+ local function_name=venvdiff
+ shift
+ local script_name=venv_funcs.sh
+ shift
+ local script_dir=bin/shinclude/venv_funcs.sh
+ shift
+ local 'function_markdown=# Function: venvdiff\n`venvdiff` - Compare Two Virtual Environments.\n## Description\n- **Purpose**: \n  - Compares two virtual environments and lists differences.\n- **Usage**: \n  - `venvdiff [env1] [env2]`\n- **Input Parameters**: \n  - `env1` (string) - The first environment to compare.\n  - `env2` (string) - The second environment to compare.\n- **Output**: \n  - Lists the differences between the two environments.\n- **Exceptions**: \n  - Errors if either environment does not exist.\n'
+ local script_readme_file=venv_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/venvdiff.md
+ echo -e '## venvdiff'
+ echo -e '# Function: venvdiff\n`venvdiff` - Compare Two Virtual Environments.\n## Description\n- **Purpose**: \n  - Compares two virtual environments and lists differences.\n- **Usage**: \n  - `venvdiff [env1] [env2]`\n- **Input Parameters**: \n  - `env1` (string) - The first environment to compare.\n  - `env2` (string) - The second environment to compare.\n- **Output**: \n  - Lists the differences between the two environments.\n- **Exceptions**: \n  - Errors if either environment does not exist.\n'
+ echo -e '## Defniition \n'
+ echo -e '* [venv_funcs.sh](/bin/shinclude/venv_funcs.sh/venv_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/venvdiff.md
+ local file_path=docs/shdoc/bin/shinclude/functions/venvdiff.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry venvdiff venv_funcs.sh bin/shinclude/venv_funcs.sh
+ local function_name=venvdiff
+ local script_name=venv_funcs.sh
+ local script_dir=bin/shinclude/venv_funcs.sh
+ local script_readme_file=bin/shinclude/venv_funcs.sh/venv_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/venvdiff.md
++ function_description venvdiff
++ local function_name=venvdiff
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/venvdiff.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/venvdiff.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/venvdiff.md
+++ tail -n 1
++ description='`venvdiff` - Compare Two Virtual Environments.'
++ description='Compare Two Virtual Environments.'
++ description='Compare Two Virtual Environments.'
++ echo 'Compare Two Virtual Environments.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' venvdiff docs/shdoc/bin/shinclude/functions/venvdiff.md 'Compare Two Virtual Environments.'
bash: bin/shinclude/venv_funcs.sh/venv_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     # Check that two arguments are provided =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check that two arguments are provided =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check that two arguments are provided =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check that two arguments are provided =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Check that two arguments are provided'
+ continue
+ IFS=
+ read -r line
+ [[     if [ "$#" -ne 2 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check that two arguments are provided =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check that two arguments are provided =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$#" -ne 2 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ "$#" -ne 2 ]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [ "$#" -ne 2 ]; then'
+ continue
+ IFS=
+ read -r line
+ [[         echo "Usage: venvdiff env1 env2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$#" -ne 2 ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ "$#" -ne 2 ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: venvdiff env1 env2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Usage: venvdiff env1 env2" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        echo "Usage: venvdiff env1 env2"'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: venvdiff env1 env2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Usage: venvdiff env1 env2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     local env1=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env1=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env1=$1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env1=$1'
+ continue
+ IFS=
+ read -r line
+ [[     local env2=$2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env1=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2=$2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env2=$2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env2=$2'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2=$2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env2=$2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Activate the first environment and get the list of packages =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Activate the first environment and get the list of packages =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate the first environment and get the list of packages =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Activate the first environment and get the list of packages =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Activate the first environment and get the list of packages'
+ continue
+ IFS=
+ read -r line
+ [[     cact $env1 > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate the first environment and get the list of packages =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Activate the first environment and get the list of packages =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env1 > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact $env1 > /dev/null =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cact $env1 > /dev/null'
+ continue
+ IFS=
+ read -r line
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env1 > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact $env1 > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env1_packages=$(pip list | tail -n +1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env1_packages=$(pip list | tail -n +1)'
+ continue
+ IFS=
+ read -r line
+ [[     dact > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     dact > /dev/null =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    dact > /dev/null'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     dact > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     cact $env2 > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     cact $env2 > /dev/null =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env2 > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact $env2 > /dev/null =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    cact $env2 > /dev/null'
+ continue
+ IFS=
+ read -r line
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env2 > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact $env2 > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env2_packages=$(pip list | tail -n +1) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env2_packages=$(pip list | tail -n +1)'
+ continue
+ IFS=
+ read -r line
+ [[     dact > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     dact > /dev/null =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    dact > /dev/null'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     dact > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Comparing packages in $env1 and $env2:" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    echo "Comparing packages in $env1 and $env2:"'
+ continue
+ IFS=
+ read -r line
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    diff -y <(echo "$env1_packages") <(echo "$env2_packages")'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ write_table_footer bin/shinclude/venv_funcs_sh.md
+ local file_path=bin/shinclude/venv_funcs_sh.md
+ echo -e '</table></pre>'
+ write_page_footer bin/shinclude/venv_funcs_sh.md
+ local file_path=bin/shinclude/venv_funcs_sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ for script_path in "${script_files[@]}"
+ local script_name
++ basename bin/shinclude/wrapper_funcs.sh
+ script_name=wrapper_funcs.sh
+ local script_readme_file=bin/shinclude/wrapper_funcs_sh.md
+ log_message INFO 'Generating markdown for script: wrapper_funcs.sh'
+ local message_level=INFO
+ shift
+ local 'message_out=Generating markdown for script: wrapper_funcs.sh'
+ [[ -z _ ]]
+ '[' 30 -le 20 ']'
+ local in_script_doc=false
+ local in_function_doc=false
+ local script_entry=false
+ local previous_line
+ local extracted_markdown=
+ local function_name=
+ IFS=
+ read -r line
+ [[ #!/bin/bash =~ ^#! ]]
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # # Script: wrapper_funcs.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: wrapper_funcs.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: wrapper_funcs.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: wrapper_funcs.sh =~ ^#+ ]]
+ extracted_markdown+='# Script: wrapper_funcs.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `wrapper_funcs.sh` - Python Package Manager Wrapper Functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `wrapper_funcs.sh` - Python Package Manager Wrapper Functions =~ ^#+ ]]
+ extracted_markdown+='`wrapper_funcs.sh` - Python Package Manager Wrapper Functions\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Provides enhanced functionality for managing Python package commands by wrapping pip and conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides enhanced functionality for managing Python package commands by wrapping pip and conda. =~ ^#+ ]]
+ extracted_markdown+='  - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff. =~ ^#+ ]]
+ extracted_markdown+='  - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Source this script in your command line environment to import the wrapper functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in your command line environment to import the wrapper functions. =~ ^#+ ]]
+ extracted_markdown+='  - Source this script in your command line environment to import the wrapper functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - For example, in another script: `source wrapper_funcs.sh`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - For example, in another script: `source wrapper_funcs.sh`. =~ ^#+ ]]
+ extracted_markdown+='  - For example, in another script: `source wrapper_funcs.sh`.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Features**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Features**: =~ ^#+ ]]
+ extracted_markdown+='- **Features**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Saves a `pip freeze` before any potentially destructive changes to a virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Saves a `pip freeze` before any potentially destructive changes to a virtual environment. =~ ^#+ ]]
+ extracted_markdown+='  - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Logs the complete command line to a log file for both conda and pip. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Logs the complete command line to a log file for both conda and pip. =~ ^#+ ]]
+ extracted_markdown+='  - Logs the complete command line to a log file for both conda and pip.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted. =~ ^#+ ]]
+ extracted_markdown+='  - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Dependencies**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Dependencies**:  =~ ^#+ ]]
+ extracted_markdown+='- **Dependencies**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Requires Bash and the Python package managers pip and conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Requires Bash and the Python package managers pip and conda. =~ ^#+ ]]
+ extracted_markdown+='  - Requires Bash and the Python package managers pip and conda.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#+ ]]
+ extracted_markdown+='  - Some functions may return specific error codes or print error messages to STDERR.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ #   - Refer to individual function documentation for details. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Refer to individual function documentation for details. =~ ^#+ ]]
+ extracted_markdown+='  - Refer to individual function documentation for details.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ write_script_doc wrapper_funcs.sh bin/shinclude '# Script: wrapper_funcs.sh\n`wrapper_funcs.sh` - Python Package Manager Wrapper Functions\n## Description\n- **Purpose**: \n  - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.\n  - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.\n- **Usage**: \n  - Source this script in your command line environment to import the wrapper functions.\n  - For example, in another script: `source wrapper_funcs.sh`.\n- **Features**:\n  - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.\n  - Logs the complete command line to a log file for both conda and pip.\n  - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.\n- **Dependencies**: \n  - Requires Bash and the Python package managers pip and conda.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n'
+ local script_name=wrapper_funcs.sh
+ shift
+ local script_dir=bin/shinclude
+ shift
+ local 'script_markdown=# Script: wrapper_funcs.sh\n`wrapper_funcs.sh` - Python Package Manager Wrapper Functions\n## Description\n- **Purpose**: \n  - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.\n  - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.\n- **Usage**: \n  - Source this script in your command line environment to import the wrapper functions.\n  - For example, in another script: `source wrapper_funcs.sh`.\n- **Features**:\n  - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.\n  - Logs the complete command line to a log file for both conda and pip.\n  - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.\n- **Dependencies**: \n  - Requires Bash and the Python package managers pip and conda.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n'
+ local markdown_file_name=docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
+ local script_readme_file=bin/shinclude/wrapper_funcs_sh.md
+ echo -e '# Script: wrapper_funcs.sh\n`wrapper_funcs.sh` - Python Package Manager Wrapper Functions\n## Description\n- **Purpose**: \n  - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.\n  - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.\n- **Usage**: \n  - Source this script in your command line environment to import the wrapper functions.\n  - For example, in another script: `source wrapper_funcs.sh`.\n- **Features**:\n  - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.\n  - Logs the complete command line to a log file for both conda and pip.\n  - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.\n- **Dependencies**: \n  - Requires Bash and the Python package managers pip and conda.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n'
+ echo -e '\n'
+ echo -e '## Function Defniitions\n'
+ echo -e '* [wrapper_funcs.sh](/bin/shinclude/wrapper_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
+ local file_path=docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_readme_header wrapper_funcs.sh bin/shinclude
+ local script_name=wrapper_funcs.sh
+ local script_dir=bin/shinclude
+ local script_doc_file=docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
+ local script_readme_file
++ get_script_readme_file wrapper_funcs.sh bin/shinclude
++ local script_name=wrapper_funcs.sh
++ local script_dir=bin/shinclude
++ local script_readme_file=bin/shinclude/wrapper_funcs_sh.md
++ echo bin/shinclude/wrapper_funcs_sh.md
+ script_readme_file=bin/shinclude/wrapper_funcs_sh.md
+ echo -e '# Functions Defined in Script: wrapper_funcs.sh\n'
+ echo -e '\n'
++ script_description wrapper_funcs.sh
++ local script_name=wrapper_funcs.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
+++ tail -n 1
++ description='`wrapper_funcs.sh` - Python Package Manager Wrapper Functions'
++ description='Python Package Manager Wrapper Functions'
++ description='Python Package Manager Wrapper Functions'
++ echo 'Python Package Manager Wrapper Functions'
+ echo -e '### [wrapper_funcs.sh](/docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md) - Python Package Manager Wrapper Functions\n'
+ echo -e '\n'
+ echo -e '## List of Functions Defined:\n'
+ echo -e '\n'
+ printf '<pre><table>\n'
+ write_scripts_readme_entry wrapper_funcs.sh bin/shinclude
+ local script_name=wrapper_funcs.sh
+ local script_dir=bin/shinclude
+ local script_readme_file
++ script_readme_file wrapper_funcs.sh bin/shinclude
bash: script_readme_file: command not found
+ script_readme_file=
++ script_description wrapper_funcs.sh
++ local script_name=wrapper_funcs.sh
++ local doc_file=docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
++ local description
++ [[ -f docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md ]]
+++ head -n 2 docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
+++ tail -n 1
++ description='`wrapper_funcs.sh` - Python Package Manager Wrapper Functions'
++ description='Python Package Manager Wrapper Functions'
++ description='Python Package Manager Wrapper Functions'
++ echo 'Python Package Manager Wrapper Functions'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' '' wrapper_funcs.sh 'Python Package Manager Wrapper Functions'
++ get_scripts_readme_file ''
++ local readme_dir=
++ local scripts_readme_file=docs/shdoc/README.md
++ echo docs/shdoc/README.md
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Declare and assign separately to avoid masking return values. shellcheck SC2155 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Declare and assign separately to avoid masking return values. shellcheck SC2155 =~ ^#.* ]]
+ extracted_markdown+='Declare and assign separately to avoid masking return values. shellcheck SC2155\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # shellcheck disable=SC2155 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2155 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2155 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2155 =~ ^#+ ]]
+ extracted_markdown+='shellcheck disable=SC2155\n'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Determine the real path of the script =~ ^#.* ]]
+ extracted_markdown+='Determine the real path of the script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^#+ ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")'
+ continue
+ IFS=
+ read -r line
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#.* ]]
+ extracted_markdown+='Define an array of internal functions to exclude from help and documentation\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#+ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ continue
+ IFS=
+ read -r line
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^#+ ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "${__VENV_INTERNAL_FUNCTIONS[@]}"'
+ continue
+ IFS=
+ read -r line
+ [[     "pip" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "pip" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "pip" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "pip" =~ ^#+ ]]
+ [[     "pip" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "pip" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "pip"'
+ continue
+ IFS=
+ read -r line
+ [[     "conda" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "pip" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "conda" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "conda" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "conda" =~ ^#+ ]]
+ [[     "conda" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "conda" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "conda"'
+ continue
+ IFS=
+ read -r line
+ [[     "get_function_hash" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "conda" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "get_function_hash" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "get_function_hash" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "get_function_hash" =~ ^#+ ]]
+ [[     "get_function_hash" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "get_function_hash" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "get_function_hash"'
+ continue
+ IFS=
+ read -r line
+ [[     "__venv_conda_check" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "get_function_hash" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "__venv_conda_check" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "__venv_conda_check" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "__venv_conda_check" =~ ^#+ ]]
+ [[     "__venv_conda_check" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "__venv_conda_check" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    "__venv_conda_check"'
+ continue
+ IFS=
+ read -r line
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "__venv_conda_check" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#+ ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: get_function_hash =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: get_function_hash =~ ^#.* ]]
+ extracted_markdown+='# Function: get_function_hash\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^#+ ]]
+ extracted_markdown+='`get_function_hash` - Get the hash of a function'\''s definition.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^#+ ]]
+ extracted_markdown+='  - Computes the hash of a function'\''s definition for integrity checks.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `get_function_hash [function_name]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `get_function_hash [function_name]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_function_hash [function_name]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_function_hash [function_name]` =~ ^#+ ]]
+ extracted_markdown+='  - `get_function_hash [function_name]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^#+ ]]
+ extracted_markdown+='  - `function_name` (string) - The name of the function to hash.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - The hash of the function's definition. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The hash of the function's definition. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The hash of the function's definition. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The hash of the function's definition. =~ ^#+ ]]
+ extracted_markdown+='  - The hash of the function'\''s definition.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ get_function_hash() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ get_function_hash() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_function_hash() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_function_hash() { =~ ^#+ ]]
+ [[ get_function_hash() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=get_function_hash
+ function_name=get_function_hash
+ write_function_doc get_function_hash wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh '# Function: get_function_hash\n`get_function_hash` - Get the hash of a function'\''s definition.\n## Description\n- **Purpose**: \n  - Computes the hash of a function'\''s definition for integrity checks.\n- **Usage**: \n  - `get_function_hash [function_name]`\n- **Input Parameters**: \n  - `function_name` (string) - The name of the function to hash.\n- **Output**: \n  - The hash of the function'\''s definition.\n- **Exceptions**: \n  - None\n'
+ local function_name=get_function_hash
+ shift
+ local script_name=wrapper_funcs.sh
+ shift
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ shift
+ local 'function_markdown=# Function: get_function_hash\n`get_function_hash` - Get the hash of a function'\''s definition.\n## Description\n- **Purpose**: \n  - Computes the hash of a function'\''s definition for integrity checks.\n- **Usage**: \n  - `get_function_hash [function_name]`\n- **Input Parameters**: \n  - `function_name` (string) - The name of the function to hash.\n- **Output**: \n  - The hash of the function'\''s definition.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=wrapper_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/get_function_hash.md
+ echo -e '## get_function_hash'
+ echo -e '# Function: get_function_hash\n`get_function_hash` - Get the hash of a function'\''s definition.\n## Description\n- **Purpose**: \n  - Computes the hash of a function'\''s definition for integrity checks.\n- **Usage**: \n  - `get_function_hash [function_name]`\n- **Input Parameters**: \n  - `function_name` (string) - The name of the function to hash.\n- **Output**: \n  - The hash of the function'\''s definition.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [wrapper_funcs.sh](/bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/get_function_hash.md
+ local file_path=docs/shdoc/bin/shinclude/functions/get_function_hash.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry get_function_hash wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh
+ local function_name=get_function_hash
+ local script_name=wrapper_funcs.sh
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ local script_readme_file=bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/get_function_hash.md
++ function_description get_function_hash
++ local function_name=get_function_hash
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_function_hash.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_function_hash.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/get_function_hash.md
+++ tail -n 1
++ description='`get_function_hash` - Get the hash of a function'\''s definition.'
++ description='Get the hash of a function'\''s definition.'
++ description='Get the hash of a function'\''s definition.'
++ echo 'Get the hash of a function'\''s definition.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' get_function_hash docs/shdoc/bin/shinclude/functions/get_function_hash.md 'Get the hash of a function'\''s definition.'
bash: bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    declare -f "$1" | md5 | cut -d'\'' '\'' -f1'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # Define the location of the venvutil config directory =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Define the location of the venvutil config directory =~ ^#.* ]]
+ extracted_markdown+='Define the location of the venvutil config directory\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^#+ ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"'
+ continue
+ IFS=
+ read -r line
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^#+ ]]
+ extracted_markdown+='Create the directory recursively for the frozen VENV'\''s for recovery.\n'
+ continue
+ IFS=
+ read -r line
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^#+ ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze"'
+ continue
+ IFS=
+ read -r line
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^#+ ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='[[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: do_wrapper =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: do_wrapper =~ ^#.* ]]
+ extracted_markdown+='# Function: do_wrapper\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^#+ ]]
+ extracted_markdown+='`do_wrapper` - General wrapper function for logging specific command actions.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^#+ ]]
+ extracted_markdown+='  - Executes a Python package manager command with optional logging based on the specified action.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^#+ ]]
+ extracted_markdown+='  - `do_wrapper <cmd> <additional parameters>`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^#+ ]]
+ extracted_markdown+='  - `cmd` (string) - The command to be executed.\n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^#+ ]]
+ extracted_markdown+='  - `additional parameters` (string) - Any additional parameters to be passed to the command.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ do_wrapper() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ do_wrapper() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ do_wrapper() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ do_wrapper() { =~ ^#+ ]]
+ [[ do_wrapper() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=do_wrapper
+ function_name=do_wrapper
+ write_function_doc do_wrapper wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh '# Function: do_wrapper\n`do_wrapper` - General wrapper function for logging specific command actions.\n## Description\n- **Purpose**: \n  - Executes a Python package manager command with optional logging based on the specified action.\n- **Usage**: \n  - `do_wrapper <cmd> <additional parameters>`\n- **Input Parameters**: \n  - `cmd` (string) - The command to be executed.\n  - `additional parameters` (string) - Any additional parameters to be passed to the command.\n- **Output**: \n  - None\n- **Exceptions**: \n  - None\n'
+ local function_name=do_wrapper
+ shift
+ local script_name=wrapper_funcs.sh
+ shift
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ shift
+ local 'function_markdown=# Function: do_wrapper\n`do_wrapper` - General wrapper function for logging specific command actions.\n## Description\n- **Purpose**: \n  - Executes a Python package manager command with optional logging based on the specified action.\n- **Usage**: \n  - `do_wrapper <cmd> <additional parameters>`\n- **Input Parameters**: \n  - `cmd` (string) - The command to be executed.\n  - `additional parameters` (string) - Any additional parameters to be passed to the command.\n- **Output**: \n  - None\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=wrapper_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/do_wrapper.md
+ echo -e '## do_wrapper'
+ echo -e '# Function: do_wrapper\n`do_wrapper` - General wrapper function for logging specific command actions.\n## Description\n- **Purpose**: \n  - Executes a Python package manager command with optional logging based on the specified action.\n- **Usage**: \n  - `do_wrapper <cmd> <additional parameters>`\n- **Input Parameters**: \n  - `cmd` (string) - The command to be executed.\n  - `additional parameters` (string) - Any additional parameters to be passed to the command.\n- **Output**: \n  - None\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [wrapper_funcs.sh](/bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/do_wrapper.md
+ local file_path=docs/shdoc/bin/shinclude/functions/do_wrapper.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry do_wrapper wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh
+ local function_name=do_wrapper
+ local script_name=wrapper_funcs.sh
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ local script_readme_file=bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/do_wrapper.md
++ function_description do_wrapper
++ local function_name=do_wrapper
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/do_wrapper.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/do_wrapper.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/do_wrapper.md
+++ tail -n 1
++ description='`do_wrapper` - General wrapper function for logging specific command actions.'
++ description='General wrapper function for logging specific command actions.'
++ description='General wrapper function for logging specific command actions.'
++ echo 'General wrapper function for logging specific command actions.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' do_wrapper docs/shdoc/bin/shinclude/functions/do_wrapper.md 'General wrapper function for logging specific command actions.'
bash: bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     local cmd="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local cmd="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local cmd="$1"; shift =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local cmd="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ [[     local action="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local cmd="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local action="$1" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local action="$1"'
+ continue
+ IFS=
+ read -r line
+ [[     local actions_to_log=("install" "uninstall" "remove" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local action="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_log=("install" "uninstall" "remove" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local actions_to_log=("install" "uninstall" "remove" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local actions_to_log=("install" "uninstall" "remove"'
+ continue
+ IFS=
+ read -r line
+ [[                           "rename" "update" "upgrade" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_log=("install" "uninstall" "remove" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local actions_to_log=("install" "uninstall" "remove" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                           "rename" "update" "upgrade" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                           "rename" "update" "upgrade" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                          "rename" "update" "upgrade"'
+ continue
+ IFS=
+ read -r line
+ [[                           "create" "clean" "config" "clone") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                           "rename" "update" "upgrade" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                           "rename" "update" "upgrade" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                           "create" "clean" "config" "clone") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                           "create" "clean" "config" "clone") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                          "create" "clean" "config" "clone")'
+ continue
+ IFS=
+ read -r line
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                           "create" "clean" "config" "clone") =~ ^}$ ]]
+ [[ false == false ]]
+ [[                           "create" "clean" "config" "clone") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local actions_to_exclude=("--help" "-h" "--dry-run")'
+ continue
+ IFS=
+ read -r line
+ [[     local cmd_args="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd_args="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local cmd_args="$*" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local cmd_args="$*"'
+ continue
+ IFS=
+ read -r line
+ [[     local env_vars =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd_args="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local cmd_args="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_vars =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_vars =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local env_vars'
+ continue
+ IFS=
+ read -r line
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_vars =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_vars =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    env_vars=$( env | sed -E '\''/^SHELL=/,$d'\'' | sed -E '\''s/^([A-Za-z_]+)=(.*)$/\1="\2"/'\'' | tr '\''\n'\'' '\'' '\'' )'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command'
+ continue
+ IFS=
+ read -r line
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    eval "conda() $(declare -f __venv_conda| sed '\''1d'\'')"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Make the command be how the user invoked it rather than with the wrappers. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Make the command be how the user invoked it rather than with the wrappers.'
+ continue
+ IFS=
+ read -r line
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed '\''s/__venv_//g'\'')'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Check if the command ${cmd} is a file or a function/alias. If it'\''s not a function,'
+ continue
+ IFS=
+ read -r line
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # we want to run it with the "command" builtin to bypass shell functions or aliases.'
+ continue
+ IFS=
+ read -r line
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if type -P "${cmd}" &>/dev/null; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if type -P "${cmd}" &>/dev/null; then'
+ continue
+ IFS=
+ read -r line
+ [[         cmd="command ${cmd}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cmd="command ${cmd}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         cmd="command ${cmd}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        cmd="command ${cmd}"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cmd="command ${cmd}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         cmd="command ${cmd}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # local cmd_line="${env_vars} ${cmd} ${cmd_args}"'
+ continue
+ IFS=
+ read -r line
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local user_line="${env_vars} ${user_cmd}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    local user_line="${env_vars} ${user_cmd}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     # Check if the action is potentially destructive and should be logged. Don't log =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the action is potentially destructive and should be logged. Don't log =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the action is potentially destructive and should be logged. Don't log =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the action is potentially destructive and should be logged. Don't log =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # Check if the action is potentially destructive and should be logged. Don'\''t log'
+ continue
+ IFS=
+ read -r line
+ [[     # --help, -h, or --dry-run. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the action is potentially destructive and should be logged. Don't log =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the action is potentially destructive and should be logged. Don't log =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # --help, -h, or --dry-run. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # --help, -h, or --dry-run. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    # --help, -h, or --dry-run.'
+ continue
+ IFS=
+ read -r line
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # --help, -h, or --dry-run. =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # --help, -h, or --dry-run. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ " ${actions_to_log[*]} " =~ ${action} ]] \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ " ${actions_to_log[*]} " =~ ${action} ]] \'
+ continue
+ IFS=
+ read -r line
+ [[                 && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         local log_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local log_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local log_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local log_date=$(date '\''+%Y-%m-%d %H:%M:%S'\'')'
+ continue
+ IFS=
+ read -r line
+ [[         local venv_log_dir="${VENVUTIL_CONFIG}/log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local log_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local log_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local venv_log_dir="${VENVUTIL_CONFIG}/log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local venv_log_dir="${VENVUTIL_CONFIG}/log" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local venv_log_dir="${VENVUTIL_CONFIG}/log"'
+ continue
+ IFS=
+ read -r line
+ [[         local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local venv_log_dir="${VENVUTIL_CONFIG}/log" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local venv_log_dir="${VENVUTIL_CONFIG}/log" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log"'
+ continue
+ IFS=
+ read -r line
+ [[         local venv_history_log="${venv_log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local venv_history_log="${venv_log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local venv_history_log="${venv_log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local venv_history_log="${venv_log_dir}/${CONDA_DEFAULT_ENV}.log"'
+ continue
+ IFS=
+ read -r line
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local venv_history_log="${venv_log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local venv_history_log="${venv_log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local freeze_date=$(date "+%Y%m%d%H%M%S")'
+ continue
+ IFS=
+ read -r line
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local freeze_dir="${VENVUTIL_CONFIG}/freeze"'
+ continue
+ IFS=
+ read -r line
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"'
+ continue
+ IFS=
+ read -r line
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Freeze the state of the environment before a potentially destructive command is executed.'
+ continue
+ IFS=
+ read -r line
+ [[         command pip freeze > "${freeze_state}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         command pip freeze > "${freeze_state}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         command pip freeze > "${freeze_state}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        command pip freeze > "${freeze_state}"'
+ continue
+ IFS=
+ read -r line
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         command pip freeze > "${freeze_state}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         command pip freeze > "${freeze_state}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        if eval " ${env_vars} ${cmd} ${cmd_args} "; then'
+ continue
+ IFS=
+ read -r line
+ [[             # Logging the command invocation if it completed successfully. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Logging the command invocation if it completed successfully. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Logging the command invocation if it completed successfully. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            # Logging the command invocation if it completed successfully.'
+ continue
+ IFS=
+ read -r line
+ [[             { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Logging the command invocation if it completed successfully. =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Logging the command invocation if it completed successfully. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            {'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: Success - prefreeze state: ${freeze_state}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             { =~ ^}$ ]]
+ [[ false == false ]]
+ [[             { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Success - prefreeze state: ${freeze_state}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: Success - prefreeze state: ${freeze_state}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: Success - prefreeze state: ${freeze_state}"'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Success - prefreeze state: ${freeze_state}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: Success - prefreeze state: ${freeze_state}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: ${user_line}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: ${user_line}"'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: Current working directory: ${PWD}"'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: $(${cmd} --version)" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: $(${cmd} --version)"'
+ continue
+ IFS=
+ read -r line
+ [[             } >> "${venv_history_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             } >> "${venv_history_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             } >> "${venv_history_log}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            } >> "${venv_history_log}"'
+ continue
+ IFS=
+ read -r line
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             } >> "${venv_history_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             } >> "${venv_history_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}"'
+ continue
+ IFS=
+ read -r line
+ [[             # Freeze it again to get the current state, after any potentially destructive command =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Freeze it again to get the current state, after any potentially destructive command =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Freeze it again to get the current state, after any potentially destructive command =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            # Freeze it again to get the current state, after any potentially destructive command'
+ continue
+ IFS=
+ read -r line
+ [[             # is executed. Sleep 2 second to ensure the filename is unique. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Freeze it again to get the current state, after any potentially destructive command =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Freeze it again to get the current state, after any potentially destructive command =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # is executed. Sleep 2 second to ensure the filename is unique. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # is executed. Sleep 2 second to ensure the filename is unique. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            # is executed. Sleep 2 second to ensure the filename is unique.'
+ continue
+ IFS=
+ read -r line
+ [[             sleep 2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # is executed. Sleep 2 second to ensure the filename is unique. =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # is executed. Sleep 2 second to ensure the filename is unique. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sleep 2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             sleep 2 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            sleep 2'
+ continue
+ IFS=
+ read -r line
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sleep 2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             sleep 2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            freeze_date=$(date "+%Y%m%d%H%M%S")'
+ continue
+ IFS=
+ read -r line
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^}$ ]]
+ [[ false == false ]]
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"'
+ continue
+ IFS=
+ read -r line
+ [[             command pip freeze > "${freeze_state}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             command pip freeze > "${freeze_state}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             command pip freeze > "${freeze_state}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            command pip freeze > "${freeze_state}"'
+ continue
+ IFS=
+ read -r line
+ [[             echo "# ${log_date}: Success - post-freeze state: ${freeze_state}" >> \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             command pip freeze > "${freeze_state}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             command pip freeze > "${freeze_state}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date}: Success - post-freeze state: ${freeze_state}" >> \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "# ${log_date}: Success - post-freeze state: ${freeze_state}" >> \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "# ${log_date}: Success - post-freeze state: ${freeze_state}" >> \'
+ continue
+ IFS=
+ read -r line
+ [[                     "${venv_history_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date}: Success - post-freeze state: ${freeze_state}" >> \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "# ${log_date}: Success - post-freeze state: ${freeze_state}" >> \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     "${venv_history_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     "${venv_history_log}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    "${venv_history_log}"'
+ continue
+ IFS=
+ read -r line
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     "${venv_history_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     "${venv_history_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Make a symlink so the currecnt state is allways up-to-date. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            # Make a symlink so the currecnt state is allways up-to-date.'
+ continue
+ IFS=
+ read -r line
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt"'
+ continue
+ IFS=
+ read -r line
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ [[             # Cleanup and log the failure and presrve the return code =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Cleanup and log the failure and presrve the return code =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Cleanup and log the failure and presrve the return code =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            # Cleanup and log the failure and presrve the return code'
+ continue
+ IFS=
+ read -r line
+ [[             __rc__="$?" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Cleanup and log the failure and presrve the return code =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Cleanup and log the failure and presrve the return code =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             __rc__="$?" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             __rc__="$?" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            __rc__="$?"'
+ continue
+ IFS=
+ read -r line
+ [[             { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             __rc__="$?" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             __rc__="$?" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            {'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: Command failure: $(errno ${__rc__})" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             { =~ ^}$ ]]
+ [[ false == false ]]
+ [[             { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Command failure: $(errno ${__rc__})" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: Command failure: $(errno ${__rc__})" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: Command failure: $(errno ${__rc__})"'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Command failure: $(errno ${__rc__})" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: Command failure: $(errno ${__rc__})" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: ${user_line}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: ${user_line}"'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: ${user_line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: Current working directory: ${PWD}"'
+ continue
+ IFS=
+ read -r line
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: Current working directory: ${PWD}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${log_date}: $(${cmd} --version)" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                echo "# ${log_date}: $(${cmd} --version)"'
+ continue
+ IFS=
+ read -r line
+ [[             } >> "${venv_history_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${log_date}: $(${cmd} --version)" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             } >> "${venv_history_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             } >> "${venv_history_log}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            } >> "${venv_history_log}"'
+ continue
+ IFS=
+ read -r line
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             } >> "${venv_history_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             } >> "${venv_history_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}"'
+ continue
+ IFS=
+ read -r line
+ [[             echo "# ${log_date}: Command failed with return code $(errno ${__rc__})" >> \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "# ${log_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date}: Command failed with return code $(errno ${__rc__})" >> \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "# ${log_date}: Command failed with return code $(errno ${__rc__})" >> \ =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            echo "# ${log_date}: Command failed with return code $(errno ${__rc__})" >> \'
+ continue
+ IFS=
+ read -r line
+ [[                     "${venv_history_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${log_date}: Command failed with return code $(errno ${__rc__})" >> \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "# ${log_date}: Command failed with return code $(errno ${__rc__})" >> \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     "${venv_history_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     "${venv_history_log}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='                    "${venv_history_log}"'
+ continue
+ IFS=
+ read -r line
+ [[             rm "${freeze_state}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     "${venv_history_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     "${venv_history_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             rm "${freeze_state}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             rm "${freeze_state}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            rm "${freeze_state}"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             rm "${freeze_state}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             rm "${freeze_state}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         fi =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ [[         # Execute the command without logging. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Execute the command without logging. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Execute the command without logging. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Execute the command without logging.'
+ continue
+ IFS=
+ read -r line
+ [[         # shellcheck disable=SC2086 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Execute the command without logging. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Execute the command without logging. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # shellcheck disable=SC2086 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # shellcheck disable=SC2086 =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # shellcheck disable=SC2086'
+ continue
+ IFS=
+ read -r line
+ [[         ${cmd} ${cmd_args} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # shellcheck disable=SC2086 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # shellcheck disable=SC2086 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ${cmd} ${cmd_args} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ${cmd} ${cmd_args} =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        ${cmd} ${cmd_args}'
+ continue
+ IFS=
+ read -r line
+ [[         __rc__="$?" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ${cmd} ${cmd_args} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ${cmd} ${cmd_args} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__="$?" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__="$?" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __rc__="$?"'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__="$?" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__="$?" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[     return "${__rc__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     return "${__rc__}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return "${__rc__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return "${__rc__}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    return "${__rc__}"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return "${__rc__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return "${__rc__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: pip =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pip =~ ^#.* ]]
+ extracted_markdown+='# Function: pip\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `pip` - Wrapper function for pip commands. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pip` - Wrapper function for pip commands. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pip` - Wrapper function for pip commands. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pip` - Wrapper function for pip commands. =~ ^#+ ]]
+ extracted_markdown+='`pip` - Wrapper function for pip commands.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. provides logging =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. provides logging =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. provides logging =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. provides logging =~ ^#+ ]]
+ extracted_markdown+='  - Wraps pip commands to ensure environment variables are preserved. provides logging\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     for pip commands and the virtual environment affected =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     for pip commands and the virtual environment affected =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     for pip commands and the virtual environment affected =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     for pip commands and the virtual environment affected =~ ^#+ ]]
+ extracted_markdown+='    for pip commands and the virtual environment affected\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `pip [arguments]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pip [arguments]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pip [arguments]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pip [arguments]` =~ ^#+ ]]
+ extracted_markdown+='  - `pip [arguments]`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^#+ ]]
+ extracted_markdown+='  - `arguments` (string) - Arguments to pass to pip.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Executes the pip command with the provided arguments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Executes the pip command with the provided arguments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the pip command with the provided arguments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the pip command with the provided arguments. =~ ^#+ ]]
+ extracted_markdown+='  - Executes the pip command with the provided arguments.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ pip() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pip() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pip() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pip() { =~ ^#+ ]]
+ [[ pip() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=pip
+ function_name=pip
+ write_function_doc pip wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh '# Function: pip\n`pip` - Wrapper function for pip commands.\n## Description\n- **Purpose**: \n  - Wraps pip commands to ensure environment variables are preserved. provides logging\n    for pip commands and the virtual environment affected\n- **Usage**: \n  - `pip [arguments]`\n- **Input Parameters**: \n  - `arguments` (string) - Arguments to pass to pip.\n- **Output**: \n  - Executes the pip command with the provided arguments.\n- **Exceptions**: \n  - None\n'
+ local function_name=pip
+ shift
+ local script_name=wrapper_funcs.sh
+ shift
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ shift
+ local 'function_markdown=# Function: pip\n`pip` - Wrapper function for pip commands.\n## Description\n- **Purpose**: \n  - Wraps pip commands to ensure environment variables are preserved. provides logging\n    for pip commands and the virtual environment affected\n- **Usage**: \n  - `pip [arguments]`\n- **Input Parameters**: \n  - `arguments` (string) - Arguments to pass to pip.\n- **Output**: \n  - Executes the pip command with the provided arguments.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=wrapper_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/pip.md
+ echo -e '## pip'
+ echo -e '# Function: pip\n`pip` - Wrapper function for pip commands.\n## Description\n- **Purpose**: \n  - Wraps pip commands to ensure environment variables are preserved. provides logging\n    for pip commands and the virtual environment affected\n- **Usage**: \n  - `pip [arguments]`\n- **Input Parameters**: \n  - `arguments` (string) - Arguments to pass to pip.\n- **Output**: \n  - Executes the pip command with the provided arguments.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [wrapper_funcs.sh](/bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/pip.md
+ local file_path=docs/shdoc/bin/shinclude/functions/pip.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry pip wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh
+ local function_name=pip
+ local script_name=wrapper_funcs.sh
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ local script_readme_file=bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/pip.md
++ function_description pip
++ local function_name=pip
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pip.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pip.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/pip.md
+++ tail -n 1
++ description='`pip` - Wrapper function for pip commands.'
++ description='Wrapper function for pip commands.'
++ description='Wrapper function for pip commands.'
++ echo 'Wrapper function for pip commands.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' pip docs/shdoc/bin/shinclude/functions/pip.md 'Wrapper function for pip commands.'
bash: bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     do_wrapper pip "$@" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     do_wrapper pip "$@" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     do_wrapper pip "$@" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     do_wrapper pip "$@" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    do_wrapper pip "$@"'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     do_wrapper pip "$@" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     do_wrapper pip "$@" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # # Function: __venv_conda_check =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: __venv_conda_check =~ ^#.* ]]
+ extracted_markdown+='# Function: __venv_conda_check\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^#+ ]]
+ extracted_markdown+='`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. Replaces =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. Replaces =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. Replaces =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. Replaces =~ ^#+ ]]
+ extracted_markdown+='  - Checks if the conda function definition has changed and re-hooks if necessary. Replaces\n'
+ continue
+ IFS=
+ read -r line
+ [[ #     the conda function with a wrapper that logs the command and environment affected. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     the conda function with a wrapper that logs the command and environment affected. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     the conda function with a wrapper that logs the command and environment affected. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     the conda function with a wrapper that logs the command and environment affected. =~ ^#+ ]]
+ extracted_markdown+='    the conda function with a wrapper that logs the command and environment affected.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - `__venv_conda_check` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `__venv_conda_check` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__venv_conda_check` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__venv_conda_check` =~ ^#+ ]]
+ extracted_markdown+='  - `__venv_conda_check`\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^#+ ]]
+ extracted_markdown+='  - Ensures the conda function is wrapped correctly.\n'
+ continue
+ IFS=
+ read -r line
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ continue
+ IFS=
+ read -r line
+ [[ __venv_conda_check() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_conda_check() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check() { =~ ^#+ ]]
+ [[ __venv_conda_check() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ function_name=__venv_conda_check
+ function_name=__venv_conda_check
+ write_function_doc __venv_conda_check wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh '# Function: __venv_conda_check\n`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.\n## Description\n- **Purpose**: \n  - Checks if the conda function definition has changed and re-hooks if necessary. Replaces\n    the conda function with a wrapper that logs the command and environment affected.\n- **Usage**: \n  - `__venv_conda_check`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Ensures the conda function is wrapped correctly.\n- **Exceptions**: \n  - None\n'
+ local function_name=__venv_conda_check
+ shift
+ local script_name=wrapper_funcs.sh
+ shift
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ shift
+ local 'function_markdown=# Function: __venv_conda_check\n`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.\n## Description\n- **Purpose**: \n  - Checks if the conda function definition has changed and re-hooks if necessary. Replaces\n    the conda function with a wrapper that logs the command and environment affected.\n- **Usage**: \n  - `__venv_conda_check`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Ensures the conda function is wrapped correctly.\n- **Exceptions**: \n  - None\n'
+ local script_readme_file=wrapper_funcs_sh.md
+ local function_markdown_file=docs/shdoc/bin/shinclude/functions/__venv_conda_check.md
+ echo -e '## __venv_conda_check'
+ echo -e '# Function: __venv_conda_check\n`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.\n## Description\n- **Purpose**: \n  - Checks if the conda function definition has changed and re-hooks if necessary. Replaces\n    the conda function with a wrapper that logs the command and environment affected.\n- **Usage**: \n  - `__venv_conda_check`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Ensures the conda function is wrapped correctly.\n- **Exceptions**: \n  - None\n'
+ echo -e '## Defniition \n'
+ echo -e '* [wrapper_funcs.sh](/bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md)'
+ write_page_footer docs/shdoc/bin/shinclude/functions/__venv_conda_check.md
+ local file_path=docs/shdoc/bin/shinclude/functions/__venv_conda_check.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_script_function_entry __venv_conda_check wrapper_funcs.sh bin/shinclude/wrapper_funcs.sh
+ local function_name=__venv_conda_check
+ local script_name=wrapper_funcs.sh
+ local script_dir=bin/shinclude/wrapper_funcs.sh
+ local script_readme_file=bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md
+ local function_markdown_path=docs/shdoc/bin/shinclude/functions/__venv_conda_check.md
++ function_description __venv_conda_check
++ local function_name=__venv_conda_check
++ local doc_file=/Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/__venv_conda_check.md
++ local description
++ [[ -f /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/__venv_conda_check.md ]]
+++ head -n 3 /Users/mps/projects/AI-PROJECTS/venv-build-checker/docs/shdoc/bin/shinclude/functions/__venv_conda_check.md
+++ tail -n 1
++ description='`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.'
++ description='Ensure conda function is wrapped and check for definition changes.'
++ description='Ensure conda function is wrapped and check for definition changes.'
++ echo 'Ensure conda function is wrapped and check for definition changes.'
+ printf '<tr><td><a href="%s">%s</a></td><td>%s</td></tr>\n' __venv_conda_check docs/shdoc/bin/shinclude/functions/__venv_conda_check.md 'Ensure conda function is wrapped and check for definition changes.'
bash: bin/shinclude/wrapper_funcs.sh/wrapper_funcs_sh.md: Not a directory
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[     current_hash=$(get_function_hash conda) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     current_hash=$(get_function_hash conda) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    current_hash=$(get_function_hash conda)'
+ continue
+ IFS=
+ read -r line
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Capture the current conda function definition and assign it to __venv_conda =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Capture the current conda function definition and assign it to __venv_conda'
+ continue
+ IFS=
+ read -r line
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        eval "__venv_conda() $(declare -f conda | sed '\''1d'\'')"'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Redefine the conda function to include the wrapper =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Redefine the conda function to include the wrapper =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Redefine the conda function to include the wrapper'
+ continue
+ IFS=
+ read -r line
+ [[         conda() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         conda() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         conda() { =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        conda() {'
+ continue
+ IFS=
+ read -r line
+ [[             do_wrapper "__venv_conda" "$@" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         conda() { =~ ^}$ ]]
+ [[ false == false ]]
+ [[         conda() { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             do_wrapper "__venv_conda" "$@" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             do_wrapper "__venv_conda" "$@" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='            do_wrapper "__venv_conda" "$@"'
+ continue
+ IFS=
+ read -r line
+ [[         } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             do_wrapper "__venv_conda" "$@" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             do_wrapper "__venv_conda" "$@" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        }'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         } =~ ^}$ ]]
+ [[ false == false ]]
+ [[         } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[         # Set the hash to be the new conda function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Set the hash to be the new conda function. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Set the hash to be the new conda function. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Set the hash to be the new conda function. =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        # Set the hash to be the new conda function.'
+ continue
+ IFS=
+ read -r line
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Set the hash to be the new conda function. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Set the hash to be the new conda function. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __venv_conda_hash=$(get_function_hash conda) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='        __venv_conda_hash=$(get_function_hash conda)'
+ continue
+ IFS=
+ read -r line
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ [[ # Run through the conda check function to ensure the conda function is wrapped =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Run through the conda check function to ensure the conda function is wrapped =~ ^#.* ]]
+ extracted_markdown+='Run through the conda check function to ensure the conda function is wrapped\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __venv_conda_check =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_conda_check =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check =~ ^#+ ]]
+ [[ __venv_conda_check =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __venv_conda_check =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line=__venv_conda_check
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __venv_conda_check =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Initial hash of the Conda function. Must always update with new hash after defining. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initial hash of the Conda function. Must always update with new hash after defining. =~ ^#.* ]]
+ extracted_markdown+='Initial hash of the Conda function. Must always update with new hash after defining.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^#+ ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __venv_conda_hash=$(get_function_hash conda) =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__venv_conda_hash=$(get_function_hash conda)'
+ continue
+ IFS=
+ read -r line
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ [[ # Modify the PROMPT_COMMAND to continuously check for function `conda` changes =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Modify the PROMPT_COMMAND to continuously check for function `conda` changes =~ ^#.* ]]
+ extracted_markdown+='Modify the PROMPT_COMMAND to continuously check for function `conda` changes\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^#+ ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __venv_prompt_command="${PROMPT_COMMAND}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='__venv_prompt_command="${PROMPT_COMMAND}"'
+ continue
+ IFS=
+ read -r line
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^#+ ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^[a-zA-Z_#[[:space:]]].* ]]
+ previous_line='PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ write_table_footer bin/shinclude/wrapper_funcs_sh.md
+ local file_path=bin/shinclude/wrapper_funcs_sh.md
+ echo -e '</table></pre>'
+ write_page_footer bin/shinclude/wrapper_funcs_sh.md
+ local file_path=bin/shinclude/wrapper_funcs_sh.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ write_table_footer docs/shdoc/README.md
+ local file_path=docs/shdoc/README.md
+ echo -e '</table></pre>'
+ write_page_footer docs/shdoc/README.md
+ local file_path=docs/shdoc/README.md
+ local date_mark
++ date '+Generated: %Y %m %d at %H:%M:%S'
+ date_mark='Generated: 2024 12 09 at 18:36:58'
+ echo -e '\n'
+ echo -e '---\n'
+ echo -e 'Generated Markdown Documentation\n'
+ echo -e 'Generated on:Generated: 2024 12 09 at 18:36:58'
+ mv docs/shdoc/.in-progress docs/shdoc/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE
+ find docs/shdoc -type f -name '*.md' '!' -newer docs/shdoc/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE -exec rm '{}' ';'
+ set +x
