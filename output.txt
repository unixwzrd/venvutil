Starting markdown generation...
********************** Processing script name: /Users/mps/projects/AI-PROJECTS/venv-build-checker/bin/shinclude/errno.sh
********************** Processing script markdown file: docs/shdoc/bin/shinclude/scripts/errno.sh.md
Generating markdown for script: errno.sh
+ IFS=
+ read -r line
+ echo 'LINE: #!/usr/bin/env bash'
LINE: #!/usr/bin/env bash
+ [[ #!/usr/bin/env bash =~ ^#! ]]
+ echo '**************************  Found shebang line'
**************************  Found shebang line
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Found blank or single comment line at beginning of script'
**************************  Found blank or single comment line at beginning of script
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Script: errno.sh'
LINE: # # Script: errno.sh
+ [[ # # Script: errno.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: errno.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: errno.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: errno.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='# Script: errno.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `errno.sh` - Provides POSIX errno codes and utilities for Bash scripts'
LINE: # `errno.sh` - Provides POSIX errno codes and utilities for Bash scripts
+ [[ # `errno.sh` - Provides POSIX errno codes and utilities for Bash scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `errno.sh` - Provides POSIX errno codes and utilities for Bash scripts =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Purpose**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Offers functions to retrieve and manage POSIX error codes within Bash scripts.'
LINE: #   - Offers functions to retrieve and manage POSIX error codes within Bash scripts.
+ [[ #   - Offers functions to retrieve and manage POSIX error codes within Bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Offers functions to retrieve and manage POSIX error codes within Bash scripts. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Offers functions to retrieve and manage POSIX error codes within Bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**:'
LINE: # - **Usage**:
+ [[ # - **Usage**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Usage**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Source this script in your Bash scripts to utilize error code utilities.'
LINE: #   - Source this script in your Bash scripts to utilize error code utilities.
+ [[ #   - Source this script in your Bash scripts to utilize error code utilities. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in your Bash scripts to utilize error code utilities. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Source this script in your Bash scripts to utilize error code utilities.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```bash'
LINE: #     ```bash
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     source /path/to/errno.sh'
LINE: #     source /path/to/errno.sh
+ [[ #     source /path/to/errno.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source /path/to/errno.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    source /path/to/errno.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```'
LINE: #     ```
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**:'
LINE: # - **Input Parameters**:
+ [[ # - **Input Parameters**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Input Parameters**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - None.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**:'
LINE: # - **Output**:
+ [[ # - **Output**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Output**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Functions that output error codes and messages.'
LINE: #   - Functions that output error codes and messages.
+ [[ #   - Functions that output error codes and messages. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Functions that output error codes and messages. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Functions that output error codes and messages.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**:'
LINE: # - **Exceptions**:
+ [[ # - **Exceptions**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Exceptions**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.'
LINE: #   - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.
+ [[ #   - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Initialization**:'
LINE: # - **Initialization**:
+ [[ # - **Initialization**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Initialization**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Initialization**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Ensures the script is sourced only once and initializes necessary variables.'
LINE: #   - Ensures the script is sourced only once and initializes necessary variables.
+ [[ #   - Ensures the script is sourced only once and initializes necessary variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Ensures the script is sourced only once and initializes necessary variables. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Ensures the script is sourced only once and initializes necessary variables.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Dependencies'
LINE: # ## Dependencies
+ [[ # ## Dependencies =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Dependencies =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## Dependencies\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - `util_funcs.sh` (for utility functions like `to_upper`)'
LINE: # - `util_funcs.sh` (for utility functions like `to_upper`)
+ [[ # - `util_funcs.sh` (for utility functions like `to_upper`) =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - `util_funcs.sh` (for utility functions like `to_upper`) =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- `util_funcs.sh` (for utility functions like `to_upper`)\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  End of script documentation'
**************************  End of script documentation
+ echo -e '# errno.sh\n## Description\n# Script: errno.sh\n`errno.sh` - Provides POSIX errno codes and utilities for Bash scripts\n## Description\n- **Purpose**:\n  - Offers functions to retrieve and manage POSIX error codes within Bash scripts.\n- **Usage**:\n  - Source this script in your Bash scripts to utilize error code utilities.\n    ```bash\n    source /path/to/errno.sh\n    ```\n- **Input Parameters**:\n  - None.\n- **Output**:\n  - Functions that output error codes and messages.\n- **Exceptions**:\n  - Returns specific error codes if system `errno.h` is not found or invalid errno codes are provided.\n- **Initialization**:\n  - Ensures the script is sourced only once and initializes necessary variables.\n#\n## Dependencies\n- `util_funcs.sh` (for utility functions like `to_upper`)\n'
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: errno'
LINE: # # Function: errno
+ [[ # # Function: errno =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errno =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: errno\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.'
LINE: #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.'
LINE: #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errno [errno_code|errno_number]`'
LINE: #   - `errno [errno_code|errno_number]`
+ [[ #   - `errno [errno_code|errno_number]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno [errno_code|errno_number]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno [errno_code|errno_number]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno [errno_code|errno_number]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `errno [errno_code|errno_number]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.'
LINE: #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code|errno_number`: The errno code (e.g., EACCES) or number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.'
LINE: #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - 2: Could not find system errno.h'
LINE: #   - 2: Could not find system errno.h
+ [[ #   - 2: Could not find system errno.h =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - 2: Could not find system errno.h =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 2: Could not find system errno.h =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 2: Could not find system errno.h =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - 2: Could not find system errno.h\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - 22: Invalid errno name'
LINE: #   - 22: Invalid errno name
+ [[ #   - 22: Invalid errno name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - 22: Invalid errno name =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 22: Invalid errno name =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - 22: Invalid errno name =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - 22: Invalid errno name\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: errno() {'
LINE: errno() {
+ [[ errno() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errno() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno() { =~ ^#+ ]]
+ [[ errno() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=errno
+ current_function_name=errno
+ extracted_markdown='## errno\n# Function: errno\n `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.\n## Description\n- **Purpose**: \n  - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.\n- **Usage**: \n  - `errno [errno_code|errno_number]`\n- **Input Parameters**: \n  - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.\n- **Output**: \n  - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.\n- **Exceptions**: \n  - 2: Could not find system errno.h\n  - 22: Invalid errno name\n'
+ echo -e '## errno\n# Function: errno\n `errno` - Provides POSIX errno codes and values for use in scripts or lookup of error codes on the command line.\n## Description\n- **Purpose**: \n  - This function takes an errno code or errno number and prints the corresponding error message to STDOUT. Sets the exit code to the errno value and returns, unless there is an internal error.\n- **Usage**: \n  - `errno [errno_code|errno_number]`\n- **Input Parameters**: \n  - `errno_code|errno_number`: The errno code (e.g., EACCES) or number.\n- **Output**: \n  - Outputs the error code and message in the format `(errno_code: errno_num): errno_text`.\n- **Exceptions**: \n  - 2: Could not find system errno.h\n  - 22: Invalid errno name\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then'
LINE:     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Usage: errno [errno_code|errno_number]"'
LINE:         echo "Usage: errno [errno_code|errno_number]"
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Usage: errno [errno_code|errno_number]" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Usage: errno [errno_code|errno_number]"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Example: errno EACCES"'
LINE:         echo "Example: errno EACCES"
+ [[         echo "Example: errno EACCES" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Usage: errno [errno_code|errno_number]" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Example: errno EACCES" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Example: errno EACCES" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Example: errno EACCES"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=0'
LINE:         __rc__=0
+ [[         __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Example: errno EACCES" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Example: errno EACCES" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=0 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=0'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local errno_code'
LINE:     local errno_code
+ [[     local errno_code =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local errno_code =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_code =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local errno_code =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local errno_code'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     errno_code="$(to_upper "$1")"'
LINE:     errno_code="$(to_upper "$1")"
+ [[     errno_code="$(to_upper "$1")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_code =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local errno_code =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_code="$(to_upper "$1")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     errno_code="$(to_upper "$1")" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    errno_code="$(to_upper "$1")"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local errno_file'
LINE:     local errno_file
+ [[     local errno_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_code="$(to_upper "$1")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     errno_code="$(to_upper "$1")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local errno_file =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local errno_file'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -f "/usr/include/sys/errno.h" ]; then'
LINE:     if [ -f "/usr/include/sys/errno.h" ]; then
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local errno_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -f "/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_file="/usr/include/sys/errno.h"'
LINE:         errno_file="/usr/include/sys/errno.h"
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/usr/include/sys/errno.h" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_file="/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then'
LINE:     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"'
LINE:         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Could not lookup error code '\''${errno_code}'\'' system errno.h not found." >&2'
LINE:         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Could not lookup error code '\''${errno_code}'\'' system errno.h not found." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=2'
LINE:         __rc__=2
+ [[         __rc__=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local line errno_num errno_text'
LINE:     local line errno_num errno_text
+ [[     local line errno_num errno_text =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local line errno_num errno_text =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line errno_num errno_text =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local line errno_num errno_text =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local line errno_num errno_text'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line errno_num errno_text =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local line errno_num errno_text =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then'
LINE:     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ "$errno_code" =~ ^[0-9]+$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file")'
LINE:         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file")
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "$errno_code" =~ ^[0-9]+$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_code=$(echo "$line" | awk '\''{print $2}'\'')'
LINE:         errno_code=$(echo "$line" | awk '{print $2}')
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         line=$(grep -wE "#define [A-Z_]*[ \t]*\b$errno_code\b" "$errno_file") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_code=$(echo "$line" | awk '\''{print $2}'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Not using braces for that, it'\''s a regular expression here.'
LINE:         # Not using braces for that, it's a regular expression here.
+ [[         # Not using braces for that, it's a regular expression here. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Not using braces for that, it's a regular expression here. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Not using braces for that, it's a regular expression here. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Not using braces for that, it'\''s a regular expression here.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet).'
LINE:         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet).
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Not using braces for that, it's a regular expression here. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Not using braces for that, it's a regular expression here. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet).'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # shellcheck disable=SC1087'
LINE:         # shellcheck disable=SC1087
+ [[         # shellcheck disable=SC1087 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet). =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # shellcheck disable=SC1087 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # shellcheck disable=SC1087 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # shellcheck disable=SC1087'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file")'
LINE:         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file")
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # shellcheck disable=SC1087 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # shellcheck disable=SC1087 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         line=$(grep -wE "#define $errno_code[ \t]*" "$errno_file") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     errno_num=$(echo "$line" | awk '\''{print $3}'\'')'
LINE:     errno_num=$(echo "$line" | awk '{print $3}')
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     errno_num=$(echo "$line" | awk '{print $3}') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    errno_num=$(echo "$line" | awk '\''{print $3}'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     errno_text=$(echo "$line" | sed -e '\''s/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/'\'')'
LINE:     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/')
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     errno_num=$(echo "$line" | awk '{print $3}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    errno_text=$(echo "$line" | sed -e '\''s/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "$errno_num" ]; then'
LINE:     if [ -z "$errno_num" ]; then
+ [[     if [ -z "$errno_num" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$errno_num" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "$errno_num" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Invalid errno code $errno_code" >&2'
LINE:         echo "Error: Invalid errno code $errno_code" >&2
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$errno_num" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Invalid errno code $errno_code" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Invalid errno code $errno_code" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=22'
LINE:         __rc__=22
+ [[         __rc__=22 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Invalid errno code $errno_code" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=22 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=22 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=22'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=22 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=22 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "($errno_code: $errno_num): $errno_text"'
LINE:         echo "($errno_code: $errno_num): $errno_text"
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "($errno_code: $errno_num): $errno_text" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "($errno_code: $errno_num): $errno_text"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__="$errno_num"'
LINE:         __rc__="$errno_num"
+ [[         __rc__="$errno_num" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__="$errno_num" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__="$errno_num" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__="$errno_num"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return "${__rc__}"'
LINE:         return "${__rc__}"
+ [[         return "${__rc__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__="$errno_num" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__="$errno_num" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return "${__rc__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return "${__rc__}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return "${__rc__}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return "${__rc__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return "${__rc__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: errfind'
LINE: # # Function: errfind
+ [[ # # Function: errfind =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errfind =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: errfind\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `errfind` - Find the error code for a given string.'
LINE: #  `errfind` - Find the error code for a given string.
+ [[ #  `errfind` - Find the error code for a given string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errfind` - Find the error code for a given string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errfind` - Find the error code for a given string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errfind` - Find the error code for a given string. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `errfind` - Find the error code for a given string.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.'
LINE: #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errfind <string>`'
LINE: #   - `errfind <string>`
+ [[ #   - `errfind <string>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errfind <string>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errfind <string>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errfind <string>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `errfind <string>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `string`: The string to search for within errno definitions.'
LINE: #   - `string`: The string to search for within errno definitions.
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `string`: The string to search for within errno definitions. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `string`: The string to search for within errno definitions.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Outputs matching error codes and their messages or a message indicating no matches found.'
LINE: #   - Outputs matching error codes and their messages or a message indicating no matches found.
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs matching error codes and their messages or a message indicating no matches found. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Outputs matching error codes and their messages or a message indicating no matches found.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: errfind() {'
LINE: errfind() {
+ [[ errfind() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errfind() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errfind() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errfind() { =~ ^#+ ]]
+ [[ errfind() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=errfind
+ current_function_name=errfind
+ extracted_markdown='## errfind\n# Function: errfind\n `errfind` - Find the error code for a given string.\n## Description\n- **Purpose**: \n  - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.\n- **Usage**: \n  - `errfind <string>`\n- **Input Parameters**: \n  - `string`: The string to search for within errno definitions.\n- **Output**: \n  - Outputs matching error codes and their messages or a message indicating no matches found.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## errfind\n# Function: errfind\n `errfind` - Find the error code for a given string.\n## Description\n- **Purpose**: \n  - Searches the POSIX errno.h file for a given string and returns any matching error codes and messages.\n- **Usage**: \n  - `errfind <string>`\n- **Input Parameters**: \n  - `string`: The string to search for within errno definitions.\n- **Output**: \n  - Outputs matching error codes and their messages or a message indicating no matches found.\n- **Exceptions**: \n  - None.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local errno_file'
LINE:     local errno_file
+ [[     local errno_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local errno_file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local errno_file =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local errno_file'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -f "/usr/include/sys/errno.h" ]; then'
LINE:     if [ -f "/usr/include/sys/errno.h" ]; then
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local errno_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local errno_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -f "/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_file="/usr/include/sys/errno.h"'
LINE:         errno_file="/usr/include/sys/errno.h"
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -f "/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/usr/include/sys/errno.h" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_file="/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then'
LINE:     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"'
LINE:         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     elif [ -f "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_file="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/errno.h" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Could not lookup error code '\''${errno_code}'\'' system errno.h not found." >&2'
LINE:         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Could not lookup error code '\''${errno_code}'\'' system errno.h not found." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=2'
LINE:         __rc__=2
+ [[         __rc__=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Could not lookup error code '${errno_code}' system errno.h not found." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local lines errno_code errno_num errno_text'
LINE:     local lines errno_code errno_num errno_text
+ [[     local lines errno_code errno_num errno_text =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local lines errno_code errno_num errno_text =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local lines errno_code errno_num errno_text =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local lines errno_code errno_num errno_text =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local lines errno_code errno_num errno_text'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local search_string="$1"'
LINE:     local search_string="$1"
+ [[     local search_string="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local lines errno_code errno_num errno_text =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local lines errno_code errno_num errno_text =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_string="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local search_string="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local search_string="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_string="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local search_string="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file")'
LINE:     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file")
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "$lines" ]; then'
LINE:     if [ -z "$lines" ]; then
+ [[     if [ -z "$lines" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     lines=$(grep -i "#define [A-Z_]*[ \t]*.*$search_string.*" "$errno_file") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$lines" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$lines" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "$lines" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "No error codes found for $search_string"'
LINE:         echo "No error codes found for $search_string"
+ [[         echo "No error codes found for $search_string" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$lines" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$lines" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No error codes found for $search_string" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "No error codes found for $search_string" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "No error codes found for $search_string"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=0'
LINE:         __rc__=0
+ [[         __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No error codes found for $search_string" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "No error codes found for $search_string" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=0 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=0'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "$lines" | while read -r line; do'
LINE:     echo "$lines" | while read -r line; do
+ [[     echo "$lines" | while read -r line; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "$lines" | while read -r line; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$lines" | while read -r line; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "$lines" | while read -r line; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "$lines" | while read -r line; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_code=$(echo "$line" | awk '\''{print $2}'\'')'
LINE:         errno_code=$(echo "$line" | awk '{print $2}')
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$lines" | while read -r line; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "$lines" | while read -r line; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_code=$(echo "$line" | awk '\''{print $2}'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_num=$(echo "$line" | awk '\''{print $3}'\'')'
LINE:         errno_num=$(echo "$line" | awk '{print $3}')
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_code=$(echo "$line" | awk '{print $2}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_num=$(echo "$line" | awk '{print $3}') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_num=$(echo "$line" | awk '\''{print $3}'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_text=$(echo "$line" | sed -e '\''s/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/'\'')'
LINE:         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/')
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_num=$(echo "$line" | awk '{print $3}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_text=$(echo "$line" | sed -e '\''s/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_text=$(echo "$line" | sed -e 's/#define[ \t]*[A-Z0-9_]*[ \t]*[0-9]*[ \t]*\/\* \(.*\) \*\//\1/') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "($errno_code: $errno_num): $errno_text"'
LINE:         echo "($errno_code: $errno_num): $errno_text"
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "($errno_code: $errno_num): $errno_text" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "($errno_code: $errno_num): $errno_text"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "($errno_code: $errno_num): $errno_text" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __rc__=0'
LINE:     __rc__=0
+ [[     __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __rc__=0 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=0 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __rc__=0'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     return ${__rc__}'
LINE:     return ${__rc__}
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: errno_warn'
LINE: # # Function: errno_warn
+ [[ # # Function: errno_warn =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errno_warn =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: errno_warn\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.'
LINE: #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.'
LINE: #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errno_warn <errno_code>`'
LINE: #   - `errno_warn <errno_code>`
+ [[ #   - `errno_warn <errno_code>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_warn <errno_code>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_warn <errno_code>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_warn <errno_code>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `errno_warn <errno_code>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errno_code`: The errno code to generate a warning for.'
LINE: #   - `errno_code`: The errno code to generate a warning for.
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate a warning for. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `errno_code`: The errno code to generate a warning for.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Outputs a warning message to STDERR.'
LINE: #   - Outputs a warning message to STDERR.
+ [[ #   - Outputs a warning message to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs a warning message to STDERR. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs a warning message to STDERR. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs a warning message to STDERR. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Outputs a warning message to STDERR.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns the error number associated with the provided errno code.'
LINE: #   - Returns the error number associated with the provided errno code.
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the error number associated with the provided errno code. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns the error number associated with the provided errno code.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: errno_warn() {'
LINE: errno_warn() {
+ [[ errno_warn() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errno_warn() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_warn() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_warn() { =~ ^#+ ]]
+ [[ errno_warn() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=errno_warn
+ current_function_name=errno_warn
+ extracted_markdown='## errno_warn\n# Function: errno_warn\n `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.\n## Description\n- **Purpose**: \n  - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.\n- **Usage**: \n  - `errno_warn <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate a warning for.\n- **Output**: \n  - Outputs a warning message to STDERR.\n- **Exceptions**: \n  - Returns the error number associated with the provided errno code.\n'
+ echo -e '## errno_warn\n# Function: errno_warn\n `errno_warn` - Prints a warning using the errno function to STDERR and returns the error number.\n## Description\n- **Purpose**: \n  - Prints a warning message to STDERR using the `errno` function and sets the return code. It will report the error without exiting the script.\n- **Usage**: \n  - `errno_warn <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate a warning for.\n- **Output**: \n  - Outputs a warning message to STDERR.\n- **Exceptions**: \n  - Returns the error number associated with the provided errno code.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __rc__=$1'
LINE:     __rc__=$1
+ [[     __rc__=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __rc__=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __rc__=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "WARNING: $(errno "${__rc__}")" >&2'
LINE:     echo "WARNING: $(errno "${__rc__}")" >&2
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "WARNING: $(errno "${__rc__}")" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     return "${__rc__}"'
LINE:     return "${__rc__}"
+ [[     return "${__rc__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "WARNING: $(errno "${__rc__}")" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return "${__rc__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return "${__rc__}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    return "${__rc__}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return "${__rc__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return "${__rc__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: errno_exit'
LINE: # # Function: errno_exit
+ [[ # # Function: errno_exit =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: errno_exit =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: errno_exit\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.'
LINE: #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.'
LINE: #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errno_exit <errno_code>`'
LINE: #   - `errno_exit <errno_code>`
+ [[ #   - `errno_exit <errno_code>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_exit <errno_code>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_exit <errno_code>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_exit <errno_code>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `errno_exit <errno_code>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errno_code`: The errno code to generate an error for.'
LINE: #   - `errno_code`: The errno code to generate an error for.
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `errno_code`: The errno code to generate an error for. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `errno_code`: The errno code to generate an error for.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Outputs an error message to STDERR and exits the script.'
LINE: #   - Outputs an error message to STDERR and exits the script.
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Outputs an error message to STDERR and exits the script. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Outputs an error message to STDERR and exits the script.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Exits the script with the provided error number.'
LINE: #   - Exits the script with the provided error number.
+ [[ #   - Exits the script with the provided error number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Exits the script with the provided error number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Exits the script with the provided error number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Exits the script with the provided error number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Exits the script with the provided error number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: errno_exit() {'
LINE: errno_exit() {
+ [[ errno_exit() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ errno_exit() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_exit() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ errno_exit() { =~ ^#+ ]]
+ [[ errno_exit() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=errno_exit
+ current_function_name=errno_exit
+ extracted_markdown='## errno_exit\n# Function: errno_exit\n `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.\n## Description\n- **Purpose**: \n  - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.\n- **Usage**: \n  - `errno_exit <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate an error for.\n- **Output**: \n  - Outputs an error message to STDERR and exits the script.\n- **Exceptions**: \n  - Exits the script with the provided error number.\n'
+ echo -e '## errno_exit\n# Function: errno_exit\n `errno_exit` - Prints an error to STDERR using the errno function and exits with the error number.\n## Description\n- **Purpose**: \n  - Prints an error message to STDERR using the `errno` function and exits the script with the corresponding error number.\n- **Usage**: \n  - `errno_exit <errno_code>`\n- **Input Parameters**: \n  - `errno_code`: The errno code to generate an error for.\n- **Output**: \n  - Outputs an error message to STDERR and exits the script.\n- **Exceptions**: \n  - Exits the script with the provided error number.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __rc__=$1'
LINE:     __rc__=$1
+ [[     __rc__=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __rc__=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __rc__=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "ERROR: $(errno "${__rc__}")" >&2'
LINE:     echo "ERROR: $(errno "${__rc__}")" >&2
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "ERROR: $(errno "${__rc__}")" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     exit "${__rc__}"'
LINE:     exit "${__rc__}"
+ [[     exit "${__rc__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "ERROR: $(errno "${__rc__}")" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     exit "${__rc__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     exit "${__rc__}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    exit "${__rc__}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     exit "${__rc__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     exit "${__rc__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `log_message` - Prints a message to STDERR based on the provided log level.'
LINE: #  `log_message` - Prints a message to STDERR based on the provided log level.
+ [[ #  `log_message` - Prints a message to STDERR based on the provided log level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ #  `log_message` - Prints a message to STDERR based on the provided log level. =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+=' `log_message` - Prints a message to STDERR based on the provided log level.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.'
LINE: #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `log_message <log_level> <message>`'
LINE: #   - `log_message <log_level> <message>`
+ [[ #   - `log_message <log_level> <message>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `log_message <log_level> <message>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_message <log_level> <message>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_message <log_level> <message>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `log_message <log_level> <message>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `log_level`: The log level to check against the debug level. Supported log levels are:'
LINE: #   - `log_level`: The log level to check against the debug level. Supported log levels are:
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `log_level`: The log level to check against the debug level. Supported log levels are: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `log_level`: The log level to check against the debug level. Supported log levels are:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `TRACE`'
LINE: #     - `TRACE`
+ [[ #     - `TRACE` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `TRACE` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `TRACE` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `TRACE` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `TRACE`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `DEBUG8`-`DEBUG0`'
LINE: #     - `DEBUG8`-`DEBUG0`
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG8`-`DEBUG0` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `DEBUG8`-`DEBUG0`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `DEBUG`'
LINE: #     - `DEBUG`
+ [[ #     - `DEBUG` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `DEBUG` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `DEBUG`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `INFO`'
LINE: #     - `INFO`
+ [[ #     - `INFO` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `INFO` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `INFO` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `INFO` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `INFO`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `WARNING`'
LINE: #     - `WARNING`
+ [[ #     - `WARNING` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `WARNING` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `WARNING` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `WARNING` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `WARNING`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `ERROR`'
LINE: #     - `ERROR`
+ [[ #     - `ERROR` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `ERROR` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `ERROR` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `ERROR` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `ERROR`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `CRITICAL`'
LINE: #     - `CRITICAL`
+ [[ #     - `CRITICAL` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `CRITICAL` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `CRITICAL` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `CRITICAL` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `CRITICAL`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     - `SILENT`'
LINE: #     - `SILENT`
+ [[ #     - `SILENT` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     - `SILENT` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `SILENT` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     - `SILENT` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    - `SILENT`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `message`: The message to print if the log level is greater than or equal to the current debug level.'
LINE: #   - `message`: The message to print if the log level is greater than or equal to the current debug level.
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `message`: The message to print if the log level is greater than or equal to the current debug level. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `message`: The message to print if the log level is greater than or equal to the current debug level.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.'
LINE: #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Prints a message to STDERR if the provided log level is greater than or equal to the current debug level.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: declare -A message_class=('
LINE: declare -A message_class=(
+ [[ declare -A message_class=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -A message_class=( =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -A message_class=( =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -A message_class=( =~ ^#+ ]]
+ [[ declare -A message_class=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -A message_class=( =~ ^[a-zA-Z_#] ]]
+ [[ declare -A message_class=( =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: declare -A message_class=('
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: declare -A message_class=('
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: declare -A message_class=('
venv_funcs.sh WARNING(30): Invalid line type found: declare -A message_class=(
+ previous_line='declare -A message_class=('
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG9"]=1'
LINE:     ["DEBUG9"]=1
+ [[     ["DEBUG9"]=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -A message_class=( =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG9"]=1 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG9"]=1 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG9"]=1 =~ ^#+ ]]
+ [[     ["DEBUG9"]=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG9"]=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG9"]=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG8"]=2'
LINE:     ["DEBUG8"]=2
+ [[     ["DEBUG8"]=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG9"]=1 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG8"]=2 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG8"]=2 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG8"]=2 =~ ^#+ ]]
+ [[     ["DEBUG8"]=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG8"]=2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG8"]=2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG7"]=2'
LINE:     ["DEBUG7"]=2
+ [[     ["DEBUG7"]=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG8"]=2 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG7"]=2 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG7"]=2 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG7"]=2 =~ ^#+ ]]
+ [[     ["DEBUG7"]=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG7"]=2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG7"]=2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG6"]=3'
LINE:     ["DEBUG6"]=3
+ [[     ["DEBUG6"]=3 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG7"]=2 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG6"]=3 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG6"]=3 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG6"]=3 =~ ^#+ ]]
+ [[     ["DEBUG6"]=3 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG6"]=3 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG6"]=3'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG5"]=4'
LINE:     ["DEBUG5"]=4
+ [[     ["DEBUG5"]=4 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG6"]=3 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG5"]=4 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG5"]=4 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG5"]=4 =~ ^#+ ]]
+ [[     ["DEBUG5"]=4 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG5"]=4 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG5"]=4'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG4"]=5'
LINE:     ["DEBUG4"]=5
+ [[     ["DEBUG4"]=5 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG5"]=4 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG4"]=5 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG4"]=5 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG4"]=5 =~ ^#+ ]]
+ [[     ["DEBUG4"]=5 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG4"]=5 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG4"]=5'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG3"]=6'
LINE:     ["DEBUG3"]=6
+ [[     ["DEBUG3"]=6 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG4"]=5 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG3"]=6 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG3"]=6 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG3"]=6 =~ ^#+ ]]
+ [[     ["DEBUG3"]=6 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG3"]=6 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG3"]=6'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG2"]=7'
LINE:     ["DEBUG2"]=7
+ [[     ["DEBUG2"]=7 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG3"]=6 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG2"]=7 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG2"]=7 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG2"]=7 =~ ^#+ ]]
+ [[     ["DEBUG2"]=7 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG2"]=7 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG2"]=7'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG1"]=8'
LINE:     ["DEBUG1"]=8
+ [[     ["DEBUG1"]=8 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG2"]=7 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG1"]=8 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG1"]=8 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG1"]=8 =~ ^#+ ]]
+ [[     ["DEBUG1"]=8 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG1"]=8 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG1"]=8'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG0"]=9'
LINE:     ["DEBUG0"]=9
+ [[     ["DEBUG0"]=9 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG1"]=8 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG0"]=9 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG0"]=9 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG0"]=9 =~ ^#+ ]]
+ [[     ["DEBUG0"]=9 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG0"]=9 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG0"]=9'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["DEBUG"]=10'
LINE:     ["DEBUG"]=10
+ [[     ["DEBUG"]=10 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG0"]=9 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["DEBUG"]=10 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG"]=10 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["DEBUG"]=10 =~ ^#+ ]]
+ [[     ["DEBUG"]=10 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["DEBUG"]=10 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["DEBUG"]=10'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["INFO"]=20'
LINE:     ["INFO"]=20
+ [[     ["INFO"]=20 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["DEBUG"]=10 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["INFO"]=20 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["INFO"]=20 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["INFO"]=20 =~ ^#+ ]]
+ [[     ["INFO"]=20 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["INFO"]=20 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["INFO"]=20'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["WARNING"]=30'
LINE:     ["WARNING"]=30
+ [[     ["WARNING"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["INFO"]=20 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["WARNING"]=30 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["WARNING"]=30 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["WARNING"]=30 =~ ^#+ ]]
+ [[     ["WARNING"]=30 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["WARNING"]=30 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["WARNING"]=30'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["WARN"]=30'
LINE:     ["WARN"]=30
+ [[     ["WARN"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["WARNING"]=30 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["WARN"]=30 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["WARN"]=30 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["WARN"]=30 =~ ^#+ ]]
+ [[     ["WARN"]=30 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["WARN"]=30 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["WARN"]=30'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["ERROR"]=40'
LINE:     ["ERROR"]=40
+ [[     ["ERROR"]=40 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["WARN"]=30 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["ERROR"]=40 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["ERROR"]=40 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["ERROR"]=40 =~ ^#+ ]]
+ [[     ["ERROR"]=40 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["ERROR"]=40 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["ERROR"]=40'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["CRITICAL"]=50'
LINE:     ["CRITICAL"]=50
+ [[     ["CRITICAL"]=50 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["ERROR"]=40 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["CRITICAL"]=50 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["CRITICAL"]=50 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["CRITICAL"]=50 =~ ^#+ ]]
+ [[     ["CRITICAL"]=50 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["CRITICAL"]=50 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["CRITICAL"]=50'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ["SILENT"]=99'
LINE:     ["SILENT"]=99
+ [[     ["SILENT"]=99 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["CRITICAL"]=50 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ["SILENT"]=99 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["SILENT"]=99 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ["SILENT"]=99 =~ ^#+ ]]
+ [[     ["SILENT"]=99 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ["SILENT"]=99 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ["SILENT"]=99'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: )'
LINE: )
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ["SILENT"]=99 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#+ ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: log_message() {'
LINE: log_message() {
+ [[ log_message() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ log_message() { =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ log_message() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=log_message
+ current_function_name=log_message
+ extracted_markdown='## log_message\n'
+ echo -e '## log_message\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local message_level="$1"; shift'
LINE:     local message_level="$1"; shift
+ [[     local message_level="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local message_level="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_level="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local message_level="$1"; shift =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local message_level="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local message_out="$*"'
LINE:     local message_out="$*"
+ [[     local message_out="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_level="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local message_level="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_out="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local message_out="$*" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local message_out="$*"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local message_out="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local message_out="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     declare -A message_class=('
LINE:     declare -A message_class=(
+ [[     declare -A message_class=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     declare -A message_class=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     declare -A message_class=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     declare -A message_class=( =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    declare -A message_class=('
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG9"]=1'
LINE:         ["DEBUG9"]=1
+ [[         ["DEBUG9"]=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     declare -A message_class=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[     declare -A message_class=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG9"]=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG9"]=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG9"]=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG8"]=2'
LINE:         ["DEBUG8"]=2
+ [[         ["DEBUG8"]=2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG9"]=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG9"]=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG8"]=2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG8"]=2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG8"]=2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG7"]=3'
LINE:         ["DEBUG7"]=3
+ [[         ["DEBUG7"]=3 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG8"]=2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG8"]=2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG7"]=3 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG7"]=3 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG7"]=3'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG6"]=4'
LINE:         ["DEBUG6"]=4
+ [[         ["DEBUG6"]=4 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG7"]=3 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG7"]=3 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG6"]=4 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG6"]=4 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG6"]=4'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG5"]=5'
LINE:         ["DEBUG5"]=5
+ [[         ["DEBUG5"]=5 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG6"]=4 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG6"]=4 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG5"]=5 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG5"]=5 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG5"]=5'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG4"]=6'
LINE:         ["DEBUG4"]=6
+ [[         ["DEBUG4"]=6 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG5"]=5 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG5"]=5 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG4"]=6 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG4"]=6 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG4"]=6'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG3"]=7'
LINE:         ["DEBUG3"]=7
+ [[         ["DEBUG3"]=7 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG4"]=6 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG4"]=6 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG3"]=7 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG3"]=7 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG3"]=7'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG2"]=8'
LINE:         ["DEBUG2"]=8
+ [[         ["DEBUG2"]=8 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG3"]=7 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG3"]=7 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG2"]=8 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG2"]=8 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG2"]=8'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG1"]=9'
LINE:         ["DEBUG1"]=9
+ [[         ["DEBUG1"]=9 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG2"]=8 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG2"]=8 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG1"]=9 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG1"]=9 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG1"]=9'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG0"]=10'
LINE:         ["DEBUG0"]=10
+ [[         ["DEBUG0"]=10 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG1"]=9 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG1"]=9 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG0"]=10 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG0"]=10 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG0"]=10'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["DEBUG"]=10'
LINE:         ["DEBUG"]=10
+ [[         ["DEBUG"]=10 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG0"]=10 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG0"]=10 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG"]=10 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["DEBUG"]=10 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["DEBUG"]=10'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["INFO"]=20'
LINE:         ["INFO"]=20
+ [[         ["INFO"]=20 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["DEBUG"]=10 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["DEBUG"]=10 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["INFO"]=20 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["INFO"]=20 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["INFO"]=20'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["WARNING"]=30'
LINE:         ["WARNING"]=30
+ [[         ["WARNING"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["INFO"]=20 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["INFO"]=20 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["WARNING"]=30 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["WARNING"]=30 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["WARNING"]=30'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["WARN"]=30'
LINE:         ["WARN"]=30
+ [[         ["WARN"]=30 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["WARNING"]=30 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["WARNING"]=30 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["WARN"]=30 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["WARN"]=30 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["WARN"]=30'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["ERROR"]=40'
LINE:         ["ERROR"]=40
+ [[         ["ERROR"]=40 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["WARN"]=30 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["WARN"]=30 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["ERROR"]=40 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["ERROR"]=40 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["ERROR"]=40'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["CRITICAL"]=50'
LINE:         ["CRITICAL"]=50
+ [[         ["CRITICAL"]=50 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["ERROR"]=40 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["ERROR"]=40 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["CRITICAL"]=50 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["CRITICAL"]=50 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["CRITICAL"]=50'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ["SILENT"]=99'
LINE:         ["SILENT"]=99
+ [[         ["SILENT"]=99 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["CRITICAL"]=50 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["CRITICAL"]=50 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["SILENT"]=99 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ["SILENT"]=99 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ["SILENT"]=99'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     )'
LINE:     )
+ [[     ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ["SILENT"]=99 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ["SILENT"]=99 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    )'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Define an associative array for message classes with standard logging levels'
LINE:     # Define an associative array for message classes with standard logging levels
+ [[     # Define an associative array for message classes with standard logging levels =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Define an associative array for message classes with standard logging levels =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Define an associative array for message classes with standard logging levels =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Define an associative array for message classes with standard logging levels'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Define an associative array for message classes with standard logging levels =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Define an associative array for message classes with standard logging levels =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Check if the provided message level exists in the message_class array'
LINE:     # Check if the provided message level exists in the message_class array
+ [[     # Check if the provided message level exists in the message_class array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the provided message level exists in the message_class array =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Check if the provided message level exists in the message_class array'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ -z "${message_class[$message_level]+_}" ]]; then'
LINE:     if [[ -z "${message_class[$message_level]+_}" ]]; then
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the provided message level exists in the message_class array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ -z "${message_class[$message_level]+_}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "($MY_NAME) WARNING: Unknown log level '\''$message_level'\''. Message: $message_out" >&2'
LINE:         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -z "${message_class[$message_level]+_}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "($MY_NAME) WARNING: Unknown log level '\''$message_level'\''. Message: $message_out" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         errno_exit 9'
LINE:         errno_exit 9
+ [[         errno_exit 9 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "($MY_NAME) WARNING: Unknown log level '$message_level'. Message: $message_out" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_exit 9 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         errno_exit 9 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        errno_exit 9'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         errno_exit 9 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         errno_exit 9 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2'
LINE:     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Compare the current debug_level with the message'\''s severity level'
LINE:     # Compare the current debug_level with the message's severity level
+ [[     # Compare the current debug_level with the message's severity level =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # echo " LOG_MESSAGE CALLED: ${message_level} ${debug_level} ($MY_NAME): ${message_out}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Compare the current debug_level with the message's severity level =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Compare the current debug_level with the message's severity level =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Compare the current debug_level with the message'\''s severity level'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then'
LINE:     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Compare the current debug_level with the message's severity level =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Compare the current debug_level with the message's severity level =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ "$debug_level" -le "${message_class[$message_level]}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2'
LINE:         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ "$debug_level" -le "${message_class[$message_level]}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "$MY_NAME ${message_level}($debug_level): ${message_out}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: ## Initialization'
LINE: ## Initialization
+ [[ ## Initialization =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ ## Initialization =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='## Initialization\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}'
LINE: __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^#+ ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}
+ previous_line='__VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""}'
+ IFS=
+ read -r line
+ echo 'LINE: # Determine the real path of the script'
LINE: # Determine the real path of the script
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Determine the real path of the script =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Determine the real path of the script =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Determine the real path of the script =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Determine the real path of the script\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_SOURCED_LIST=${__VENV_SOURCED_LIST:-""} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076'
LINE: # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076 =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Remove quotes from right-hand side of =~ to match as a regex rather than literally. shellcheck SC2076\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Don'\''t source this script if it'\''s already been sourced. The SC message is intentional the list is treated like'
LINE: # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. The SC message is intentional the list is treated like =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced. The SC message is intentional the list is treated like\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # string to search for the string in the list/array.'
LINE: # string to search for the string in the list/array.
+ [[ # string to search for the string in the list/array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # string to search for the string in the list/array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # string to search for the string in the list/array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # string to search for the string in the list/array. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='string to search for the string in the list/array.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # shellcheck disable=SC2076'
LINE: # shellcheck disable=SC2076
+ [[ # shellcheck disable=SC2076 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2076 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2076 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2076 =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='shellcheck disable=SC2076\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: echo "Sourcing: ${THIS_SCRIPT}"'
LINE: echo "Sourcing: ${THIS_SCRIPT}"
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Extract script name, directory, and arguments'
LINE: # Extract script name, directory, and arguments
+ [[ # Extract script name, directory, and arguments =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Extract script name, directory, and arguments =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Extract script name, directory, and arguments\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # MY_NAME appears unused. Verify use (or export if used externally).'
LINE: # MY_NAME appears unused. Verify use (or export if used externally).
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # MY_NAME appears unused. Verify use (or export if used externally). =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='MY_NAME appears unused. Verify use (or export if used externally).\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # shellcheck disable=SC2034'
LINE: # shellcheck disable=SC2034
+ [[ # shellcheck disable=SC2034 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2034 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2034 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2034 =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='shellcheck disable=SC2034\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: MY_NAME=$(basename "${THIS_SCRIPT}")'
LINE: MY_NAME=$(basename "${THIS_SCRIPT}")
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^#+ ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^[a-zA-Z_#] ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: MY_NAME=$(basename "${THIS_SCRIPT}")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: MY_NAME=$(basename "${THIS_SCRIPT}")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: MY_NAME=$(basename "${THIS_SCRIPT}")'
venv_funcs.sh WARNING(30): Invalid line type found: MY_NAME=$(basename "${THIS_SCRIPT}")
+ previous_line='MY_NAME=$(basename "${THIS_SCRIPT}")'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
LINE: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ MY_NAME=$(basename "${THIS_SCRIPT}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#+ ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")
+ previous_line='__VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_BASE=$(dirname "${__VENV_BIN}")'
LINE: __VENV_BASE=$(dirname "${__VENV_BIN}")
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#+ ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")
+ previous_line='__VENV_BASE=$(dirname "${__VENV_BIN}")'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_ARGS=$*'
LINE: __VENV_ARGS=$*
+ [[ __VENV_ARGS=$* =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#+ ]]
+ [[ __VENV_ARGS=$* =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_ARGS=$* =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_ARGS=$*'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_ARGS=$*'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_ARGS=$*'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_ARGS=$*
+ previous_line='__VENV_ARGS=$*'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
LINE: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_ARGS=$* =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#+ ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"
+ previous_line='__VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Add internal functions to the __VENV_INTERNAL_FUNCTIONS array.'
LINE: # Add internal functions to the __VENV_INTERNAL_FUNCTIONS array.
+ [[ # Add internal functions to the __VENV_INTERNAL_FUNCTIONS array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Add internal functions to the __VENV_INTERNAL_FUNCTIONS array. =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Add internal functions to the __VENV_INTERNAL_FUNCTIONS array.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a.'
LINE: # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a.
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # shellcheck disable=SC2206'
LINE: # shellcheck disable=SC2206
+ [[ # shellcheck disable=SC2206 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2206 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2206 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2206 =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='shellcheck disable=SC2206\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INTERNAL_FUNCTIONS=('
LINE: __VENV_INTERNAL_FUNCTIONS=(
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#+ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=(
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ IFS=
+ read -r line
+ echo 'LINE:    ${__VENV_INTERNAL_FUNCTIONS[@]}'
LINE:    ${__VENV_INTERNAL_FUNCTIONS[@]}
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#+ ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='   ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: )'
LINE: )
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[    ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#+ ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Set default debug level, if not already set.'
LINE: # Set default debug level, if not already set.
+ [[ # Set default debug level, if not already set. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Set default debug level, if not already set. =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Set default debug level, if not already set.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: debug_level=${debug_level:-30}'
LINE: debug_level=${debug_level:-30}
+ [[ debug_level=${debug_level:-30} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^#+ ]]
+ [[ debug_level=${debug_level:-30} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! debug_level=${debug_level:-30} =~ ^[a-zA-Z_#] ]]
+ [[ debug_level=${debug_level:-30} =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: debug_level=${debug_level:-30}'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: debug_level=${debug_level:-30}'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: debug_level=${debug_level:-30}'
venv_funcs.sh WARNING(30): Invalid line type found: debug_level=${debug_level:-30}
+ previous_line='debug_level=${debug_level:-30}'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ debug_level=${debug_level:-30} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Ensure util_funcs.sh is sourced for utility functions'
LINE: # Ensure util_funcs.sh is sourced for utility functions
+ [[ # Ensure util_funcs.sh is sourced for utility functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Ensure util_funcs.sh is sourced for utility functions =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Ensure util_funcs.sh is sourced for utility functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: if declare -f "source_util_script" >/dev/null 2>&1; then'
LINE: if declare -f "source_util_script" >/dev/null 2>&1; then
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^#+ ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^[a-zA-Z_#] ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: if declare -f "source_util_script" >/dev/null 2>&1; then'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: if declare -f "source_util_script" >/dev/null 2>&1; then'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: if declare -f "source_util_script" >/dev/null 2>&1; then'
venv_funcs.sh WARNING(30): Invalid line type found: if declare -f "source_util_script" >/dev/null 2>&1; then
+ previous_line='if declare -f "source_util_script" >/dev/null 2>&1; then'
+ IFS=
+ read -r line
+ echo 'LINE:     source_util_script "util_funcs"'
LINE:     source_util_script "util_funcs"
+ [[     source_util_script "util_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ if declare -f "source_util_script" >/dev/null 2>&1; then =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     source_util_script "util_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source_util_script "util_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source_util_script "util_funcs" =~ ^#+ ]]
+ [[     source_util_script "util_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     source_util_script "util_funcs" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    source_util_script "util_funcs"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     log_message "INFO" "Sourced util_funcs.sh"'
LINE:     log_message "INFO" "Sourced util_funcs.sh"
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     source_util_script "util_funcs" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^#+ ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     log_message "INFO" "Sourced util_funcs.sh" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    log_message "INFO" "Sourced util_funcs.sh"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: else'
LINE: else
+ [[ else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     log_message "INFO" "Sourced util_funcs.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ else =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#+ ]]
+ [[ else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! else =~ ^[a-zA-Z_#] ]]
+ [[ else =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: else'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: else'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: else'
venv_funcs.sh WARNING(30): Invalid line type found: else
+ previous_line=else
+ IFS=
+ read -r line
+ echo 'LINE:     # shellcheck source=/dev/null'
LINE:     # shellcheck source=/dev/null
+ [[     # shellcheck source=/dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ else =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     # shellcheck source=/dev/null =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     # shellcheck source=/dev/null =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     # shellcheck source=/dev/null =~ ^#+ ]]
+ [[     # shellcheck source=/dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # shellcheck source=/dev/null =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # shellcheck source=/dev/null'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     source "${__VENV_INCLUDE}/util_funcs.sh"'
LINE:     source "${__VENV_INCLUDE}/util_funcs.sh"
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # shellcheck source=/dev/null =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^#+ ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    source "${__VENV_INCLUDE}/util_funcs.sh"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh"'
LINE:     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh"
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     source "${__VENV_INCLUDE}/util_funcs.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^#+ ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: fi'
LINE: fi
+ [[ fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     log_message "INFO" "Sourced ${__VENV_INCLUDE}/util_funcs.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ fi =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#+ ]]
+ [[ fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! fi =~ ^[a-zA-Z_#] ]]
+ [[ fi =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: fi'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: fi'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: fi'
venv_funcs.sh WARNING(30): Invalid line type found: fi
+ previous_line=fi
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ fi =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __rc__=0'
LINE: __rc__=0
+ [[ __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __rc__=0 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __rc__=0 =~ ^[a-zA-Z_#] ]]
+ [[ __rc__=0 =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __rc__=0'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __rc__=0'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __rc__=0'
venv_funcs.sh WARNING(30): Invalid line type found: __rc__=0
+ previous_line=__rc__=0
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ set +x
********************** Processing script name: /Users/mps/projects/AI-PROJECTS/venv-build-checker/bin/shinclude/help_sys.sh
********************** Processing script markdown file: docs/shdoc/bin/shinclude/scripts/help_sys.sh.md
Generating markdown for script: help_sys.sh
+ IFS=
+ read -r line
+ echo 'LINE: #!/bin/bash'
LINE: #!/bin/bash
+ [[ #!/bin/bash =~ ^#! ]]
+ echo '**************************  Found shebang line'
**************************  Found shebang line
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Script: help_sys.sh'
LINE: # # Script: help_sys.sh
+ [[ # # Script: help_sys.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: help_sys.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: help_sys.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: help_sys.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='# Script: help_sys.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `help_sys.sh` - Help System Functions for Bash Scripts'
LINE: # `help_sys.sh` - Help System Functions for Bash Scripts
+ [[ # `help_sys.sh` - Help System Functions for Bash Scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `help_sys.sh` - Help System Functions for Bash Scripts =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='`help_sys.sh` - Help System Functions for Bash Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Provides a dynamic help system for all sourced bash scripts.'
LINE: #   - Provides a dynamic help system for all sourced bash scripts.
+ [[ #   - Provides a dynamic help system for all sourced bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides a dynamic help system for all sourced bash scripts. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Provides a dynamic help system for all sourced bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - It can list available functions, provide detailed information about each function, and list sourced scripts.'
LINE: #   - It can list available functions, provide detailed information about each function, and list sourced scripts.
+ [[ #   - It can list available functions, provide detailed information about each function, and list sourced scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - It can list available functions, provide detailed information about each function, and list sourced scripts. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - It can list available functions, provide detailed information about each function, and list sourced scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Source this script in other bash scripts to enable the dynamic help system.'
LINE: #   - Source this script in other bash scripts to enable the dynamic help system.
+ [[ #   - Source this script in other bash scripts to enable the dynamic help system. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in other bash scripts to enable the dynamic help system. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Source this script in other bash scripts to enable the dynamic help system.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```bash'
LINE: #     ```bash
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     source help_sys.sh'
LINE: #     source help_sys.sh
+ [[ #     source help_sys.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source help_sys.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    source help_sys.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```'
LINE: #     ```
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None. All input is handled by the individual functions.'
LINE: #   - None. All input is handled by the individual functions.
+ [[ #   - None. All input is handled by the individual functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. All input is handled by the individual functions. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - None. All input is handled by the individual functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Enables a help system that can be accessed by calling `help` in the terminal.'
LINE: #   - Enables a help system that can be accessed by calling `help` in the terminal.
+ [[ #   - Enables a help system that can be accessed by calling `help` in the terminal. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Enables a help system that can be accessed by calling `help` in the terminal. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Enables a help system that can be accessed by calling `help` in the terminal.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Supports generating Markdown documentation.'
LINE: #   - Supports generating Markdown documentation.
+ [[ #   - Supports generating Markdown documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Supports generating Markdown documentation. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Supports generating Markdown documentation.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Some functions may return specific error codes or print error messages to STDERR.'
LINE: #   - Some functions may return specific error codes or print error messages to STDERR.
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Some functions may return specific error codes or print error messages to STDERR.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Refer to individual function documentation for details.'
LINE: #   - Refer to individual function documentation for details.
+ [[ #   - Refer to individual function documentation for details. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Refer to individual function documentation for details. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Refer to individual function documentation for details.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Environment**:'
LINE: # - **Environment**:
+ [[ # - **Environment**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Environment**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Environment**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.'
LINE: #   - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.
+ [[ #   - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  End of script documentation'
**************************  End of script documentation
+ echo -e '# help_sys.sh\n## Description\n# Script: help_sys.sh\n`help_sys.sh` - Help System Functions for Bash Scripts\n## Description\n- **Purpose**: \n  - Provides a dynamic help system for all sourced bash scripts.\n  - It can list available functions, provide detailed information about each function, and list sourced scripts.\n- **Usage**: \n  - Source this script in other bash scripts to enable the dynamic help system.\n    ```bash\n    source help_sys.sh\n    ```\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n- **Output**: \n  - Enables a help system that can be accessed by calling `help` in the terminal.\n  - Supports generating Markdown documentation.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n- **Environment**:\n  - **MD_PROCESSOR**: Set to the markdown processor of your choice. If `glow` is in your path, it will use that.\n'
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Determine the real path of the script'
LINE: # Determine the real path of the script
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Determine the real path of the script =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Determine the real path of the script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Don'\''t source this script if it'\''s already been sourced.'
LINE: # Don't source this script if it's already been sourced.
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: echo "Sourcing: ${THIS_SCRIPT}"'
LINE: echo "Sourcing: ${THIS_SCRIPT}"
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Help System Initialization'
LINE: # Help System Initialization
+ [[ # Help System Initialization =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Help System Initialization =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Help System Initialization\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Use an environment variable for markdown processor, defaulting to '\''glow'\'''
LINE: # Use an environment variable for markdown processor, defaulting to 'glow'
+ [[ # Use an environment variable for markdown processor, defaulting to 'glow' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Use an environment variable for markdown processor, defaulting to 'glow' =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Use an environment variable for markdown processor, defaulting to '\''glow'\''\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: export MD_PROCESSOR=${MD_PROCESSOR:-"glow"}'
LINE: export MD_PROCESSOR=${MD_PROCESSOR:-"glow"}
+ [[ export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^#+ ]]
+ [[ export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^[a-zA-Z_#] ]]
+ [[ export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: export MD_PROCESSOR=${MD_PROCESSOR:-"glow"}'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: export MD_PROCESSOR=${MD_PROCESSOR:-"glow"}'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: export MD_PROCESSOR=${MD_PROCESSOR:-"glow"}'
venv_funcs.sh WARNING(30): Invalid line type found: export MD_PROCESSOR=${MD_PROCESSOR:-"glow"}
+ previous_line='export MD_PROCESSOR=${MD_PROCESSOR:-"glow"}'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ export MD_PROCESSOR=${MD_PROCESSOR:-"glow"} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Define an array of internal functions to exclude from help and documentation'
LINE: # Define an array of internal functions to exclude from help and documentation
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Define an array of internal functions to exclude from help and documentation\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INTERNAL_FUNCTIONS=('
LINE: __VENV_INTERNAL_FUNCTIONS=(
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#+ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=(
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ IFS=
+ read -r line
+ echo 'LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}'
LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#+ ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "init_help_system"'
LINE:     "init_help_system"
+ [[     "init_help_system" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "init_help_system" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "init_help_system" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "init_help_system" =~ ^#+ ]]
+ [[     "init_help_system" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "init_help_system" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "init_help_system"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "general_help"'
LINE:     "general_help"
+ [[     "general_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "init_help_system" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "general_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "general_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "general_help" =~ ^#+ ]]
+ [[     "general_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "general_help" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "general_help"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "specific_script_help"'
LINE:     "specific_script_help"
+ [[     "specific_script_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "general_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "specific_script_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_script_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_script_help" =~ ^#+ ]]
+ [[     "specific_script_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "specific_script_help" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "specific_script_help"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "specific_function_help"'
LINE:     "specific_function_help"
+ [[     "specific_function_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "specific_script_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "specific_function_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_function_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "specific_function_help" =~ ^#+ ]]
+ [[     "specific_function_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "specific_function_help" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "specific_function_help"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "help_functions"'
LINE:     "help_functions"
+ [[     "help_functions" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "specific_function_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "help_functions" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "help_functions" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "help_functions" =~ ^#+ ]]
+ [[     "help_functions" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "help_functions" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "help_functions"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "do_help"'
LINE:     "do_help"
+ [[     "do_help" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "help_functions" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "do_help" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "do_help" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "do_help" =~ ^#+ ]]
+ [[     "do_help" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "do_help" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "do_help"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: )'
LINE: )
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "do_help" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#+ ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Initialize associative arrays to store function names and their corresponding documentation'
LINE: # Initialize associative arrays to store function names and their corresponding documentation
+ [[ # Initialize associative arrays to store function names and their corresponding documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize associative arrays to store function names and their corresponding documentation =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Initialize associative arrays to store function names and their corresponding documentation\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: declare -g -A __VENV_FUNCTIONS'
LINE: declare -g -A __VENV_FUNCTIONS
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^#+ ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -A __VENV_FUNCTIONS =~ ^[a-zA-Z_#] ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: declare -g -A __VENV_FUNCTIONS'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: declare -g -A __VENV_FUNCTIONS'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: declare -g -A __VENV_FUNCTIONS'
venv_funcs.sh WARNING(30): Invalid line type found: declare -g -A __VENV_FUNCTIONS
+ previous_line='declare -g -A __VENV_FUNCTIONS'
+ IFS=
+ read -r line
+ echo 'LINE: declare -g -A __VENV_SCRIPTS'
LINE: declare -g -A __VENV_SCRIPTS
+ [[ declare -g -A __VENV_SCRIPTS =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -A __VENV_FUNCTIONS =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^#+ ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g -A __VENV_SCRIPTS =~ ^[a-zA-Z_#] ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: declare -g -A __VENV_SCRIPTS'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: declare -g -A __VENV_SCRIPTS'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: declare -g -A __VENV_SCRIPTS'
venv_funcs.sh WARNING(30): Invalid line type found: declare -g -A __VENV_SCRIPTS
+ previous_line='declare -g -A __VENV_SCRIPTS'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g -A __VENV_SCRIPTS =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Initialize arrays to store sorted names for functions and scripts'
LINE: # Initialize arrays to store sorted names for functions and scripts
+ [[ # Initialize arrays to store sorted names for functions and scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize arrays to store sorted names for functions and scripts =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Initialize arrays to store sorted names for functions and scripts\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: declare -g sorted_function_names'
LINE: declare -g sorted_function_names
+ [[ declare -g sorted_function_names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g sorted_function_names =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g sorted_function_names =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g sorted_function_names =~ ^#+ ]]
+ [[ declare -g sorted_function_names =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g sorted_function_names =~ ^[a-zA-Z_#] ]]
+ [[ declare -g sorted_function_names =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: declare -g sorted_function_names'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: declare -g sorted_function_names'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: declare -g sorted_function_names'
venv_funcs.sh WARNING(30): Invalid line type found: declare -g sorted_function_names
+ previous_line='declare -g sorted_function_names'
+ IFS=
+ read -r line
+ echo 'LINE: declare -g sorted_script_names'
LINE: declare -g sorted_script_names
+ [[ declare -g sorted_script_names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g sorted_function_names =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g sorted_script_names =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g sorted_script_names =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g sorted_script_names =~ ^#+ ]]
+ [[ declare -g sorted_script_names =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g sorted_script_names =~ ^[a-zA-Z_#] ]]
+ [[ declare -g sorted_script_names =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: declare -g sorted_script_names'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: declare -g sorted_script_names'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: declare -g sorted_script_names'
venv_funcs.sh WARNING(30): Invalid line type found: declare -g sorted_script_names
+ previous_line='declare -g sorted_script_names'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g sorted_script_names =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Initialize variables to store the length of the longest script and function names'
LINE: # Initialize variables to store the length of the longest script and function names
+ [[ # Initialize variables to store the length of the longest script and function names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize variables to store the length of the longest script and function names =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Initialize variables to store the length of the longest script and function names\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: declare -g longest_script_name=0'
LINE: declare -g longest_script_name=0
+ [[ declare -g longest_script_name=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g longest_script_name=0 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_script_name=0 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_script_name=0 =~ ^#+ ]]
+ [[ declare -g longest_script_name=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g longest_script_name=0 =~ ^[a-zA-Z_#] ]]
+ [[ declare -g longest_script_name=0 =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: declare -g longest_script_name=0'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: declare -g longest_script_name=0'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: declare -g longest_script_name=0'
venv_funcs.sh WARNING(30): Invalid line type found: declare -g longest_script_name=0
+ previous_line='declare -g longest_script_name=0'
+ IFS=
+ read -r line
+ echo 'LINE: declare -g longest_function_name=0'
LINE: declare -g longest_function_name=0
+ [[ declare -g longest_function_name=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g longest_script_name=0 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ declare -g longest_function_name=0 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_function_name=0 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ declare -g longest_function_name=0 =~ ^#+ ]]
+ [[ declare -g longest_function_name=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! declare -g longest_function_name=0 =~ ^[a-zA-Z_#] ]]
+ [[ declare -g longest_function_name=0 =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: declare -g longest_function_name=0'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: declare -g longest_function_name=0'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: declare -g longest_function_name=0'
venv_funcs.sh WARNING(30): Invalid line type found: declare -g longest_function_name=0
+ previous_line='declare -g longest_function_name=0'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ declare -g longest_function_name=0 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: process_scripts'
LINE: # # Function: process_scripts
+ [[ # # Function: process_scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: process_scripts =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: process_scripts\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `process_scripts` - Process scripts in a given directory.'
LINE: #  `process_scripts` - Process scripts in a given directory.
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `process_scripts` - Process scripts in a given directory. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `process_scripts` - Process scripts in a given directory.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Process scripts in a given directory, extracting function names and documentation.'
LINE: #   - Process scripts in a given directory, extracting function names and documentation.
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Process scripts in a given directory, extracting function names and documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Process scripts in a given directory, extracting function names and documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `process_scripts <dir_name>`'
LINE: #   - `process_scripts <dir_name>`
+ [[ #   - `process_scripts <dir_name>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `process_scripts <dir_name>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `process_scripts <dir_name>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `process_scripts <dir_name>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `process_scripts <dir_name>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `dir_name`: The name of the directory to process.'
LINE: #   - `dir_name`: The name of the directory to process.
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dir_name`: The name of the directory to process. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `dir_name`: The name of the directory to process.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.'
LINE: #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: process_scripts() {'
LINE: process_scripts() {
+ [[ process_scripts() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ process_scripts() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ process_scripts() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ process_scripts() { =~ ^#+ ]]
+ [[ process_scripts() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=process_scripts
+ current_function_name=process_scripts
+ extracted_markdown='## process_scripts\n# Function: process_scripts\n `process_scripts` - Process scripts in a given directory.\n## Description\n- **Purpose**:\n  - Process scripts in a given directory, extracting function names and documentation.\n- **Usage**: \n  - `process_scripts <dir_name>`\n- **Input Parameters**: \n  - `dir_name`: The name of the directory to process.\n- **Output**: \n  - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.\n- **Exceptions**: \n  - None\n'
+ echo -e '## process_scripts\n# Function: process_scripts\n `process_scripts` - Process scripts in a given directory.\n## Description\n- **Purpose**:\n  - Process scripts in a given directory, extracting function names and documentation.\n- **Usage**: \n  - `process_scripts <dir_name>`\n- **Input Parameters**: \n  - `dir_name`: The name of the directory to process.\n- **Output**: \n  - Populates `__VENV_SCRIPTS` and `__VENV_FUNCTIONS` with script and function information.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local dir_name="$1"'
LINE:     local dir_name="$1"
+ [[     local dir_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local dir_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local dir_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local dir_name="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local dir_name="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local script_dir="${__VENV_BASE}/${dir_name}"'
LINE:     local script_dir="${__VENV_BASE}/${dir_name}"
+ [[     local script_dir="${__VENV_BASE}/${dir_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local dir_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local dir_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="${__VENV_BASE}/${dir_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_dir="${__VENV_BASE}/${dir_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local script_dir="${__VENV_BASE}/${dir_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}"'
LINE:     local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}"
+ [[     local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_dir="${__VENV_BASE}/${dir_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_dir="${__VENV_BASE}/${dir_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh")'
LINE:     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh")
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local doc_dir="${__VENV_BASE}/docs/shdoc/${dir_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    readarray -t script_files < <(find "$script_dir" -type f -name "*.sh")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for script in "${script_files[@]}"; do'
LINE:     for script in "${script_files[@]}"; do
+ [[     for script in "${script_files[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t script_files < <(find "$script_dir" -type f -name "*.sh") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${script_files[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for script in "${script_files[@]}"; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for script in "${script_files[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local script_name'
LINE:         local script_name
+ [[         local script_name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${script_files[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for script in "${script_files[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_name =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local script_name =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local script_name'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         script_name="$(basename "$script")"'
LINE:         script_name="$(basename "$script")"
+ [[         script_name="$(basename "$script")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_name =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local script_name =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         script_name="$(basename "$script")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         script_name="$(basename "$script")" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        script_name="$(basename "$script")"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local markdown_file="${doc_dir}/scripts/${script_name}.md"'
LINE:         local markdown_file="${doc_dir}/scripts/${script_name}.md"
+ [[         local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         script_name="$(basename "$script")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         script_name="$(basename "$script")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local markdown_file="${doc_dir}/scripts/${script_name}.md"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         #echo "Assigning: ${script_name} -> ${markdown_file}"'
LINE:         #echo "Assigning: ${script_name} -> ${markdown_file}"
+ [[         #echo "Assigning: ${script_name} -> ${markdown_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         #echo "Assigning: ${script_name} -> ${markdown_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         #echo "Assigning: ${script_name} -> ${markdown_file}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        #echo "Assigning: ${script_name} -> ${markdown_file}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __VENV_SCRIPTS["$script_name"]="$markdown_file"'
LINE:         __VENV_SCRIPTS["$script_name"]="$markdown_file"
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         #echo "Assigning: ${script_name} -> ${markdown_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         #echo "Assigning: ${script_name} -> ${markdown_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __VENV_SCRIPTS["$script_name"]="$markdown_file"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}"'
LINE:         #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}"
+ [[         #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __VENV_SCRIPTS["$script_name"]="$markdown_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         sorted_script_names+=("$script_name")'
LINE:         sorted_script_names+=("$script_name")
+ [[         sorted_script_names+=("$script_name") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         #echo "Assigned: ${__VENV_SCRIPTS[$script_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         sorted_script_names+=("$script_name") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         sorted_script_names+=("$script_name") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        sorted_script_names+=("$script_name")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         '
LINE:         
+ [[          =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         sorted_script_names+=("$script_name") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         sorted_script_names+=("$script_name") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !          =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ ${#script_name} -gt $longest_script_name ]]; then'
LINE:         if [[ ${#script_name} -gt $longest_script_name ]]; then
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^}$ ]]
+ [[ false == false ]]
+ [[          =~ ^[[:space:]]*$ ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ ${#script_name} -gt $longest_script_name ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             longest_script_name=${#script_name}'
LINE:             longest_script_name=${#script_name}
+ [[             longest_script_name=${#script_name} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ ${#script_name} -gt $longest_script_name ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             longest_script_name=${#script_name} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             longest_script_name=${#script_name} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            longest_script_name=${#script_name}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             longest_script_name=${#script_name} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             longest_script_name=${#script_name} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         '
LINE:         
+ [[          =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !          =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         while IFS= read -r line; do'
LINE:         while IFS= read -r line; do
+ [[         while IFS= read -r line; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[          =~ ^}$ ]]
+ [[ false == false ]]
+ [[          =~ ^[[:space:]]*$ ]]
+ [[         while IFS= read -r line; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while IFS= read -r line; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         while IFS= read -r line; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        while IFS= read -r line; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then'
LINE:             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while IFS= read -r line; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[         while IFS= read -r line; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Reading function name'
LINE:                 # Reading function name
+ [[                 # Reading function name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[             if [[ "$line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reading function name =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Reading function name =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Reading function name'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 function="${line%%(*}"'
LINE:                 function="${line%%(*}"
+ [[                 function="${line%%(*}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reading function name =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Reading function name =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${line%%(*}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 function="${line%%(*}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                function="${line%%(*}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 function="${function/#function /}"  # Remove '\''function '\'' prefix if exists'
LINE:                 function="${function/#function /}"  # Remove 'function ' prefix if exists
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${line%%(*}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 function="${line%%(*}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                function="${function/#function /}"  # Remove '\''function '\'' prefix if exists'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Correct the functiontion markdown path'
LINE:                 # Correct the functiontion markdown path
+ [[                 # Correct the functiontion markdown path =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 function="${function/#function /}"  # Remove 'function ' prefix if exists =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct the functiontion markdown path =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Correct the functiontion markdown path =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Correct the functiontion markdown path'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 local function_markdown_path="${doc_dir}/functions/${function}.md"'
LINE:                 local function_markdown_path="${doc_dir}/functions/${function}.md"
+ [[                 local function_markdown_path="${doc_dir}/functions/${function}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct the functiontion markdown path =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Correct the functiontion markdown path =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 local function_markdown_path="${doc_dir}/functions/${function}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 local function_markdown_path="${doc_dir}/functions/${function}.md" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                local function_markdown_path="${doc_dir}/functions/${function}.md"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 #echo "Assigning: ${function} -> ${function_markdown_path}"'
LINE:                 #echo "Assigning: ${function} -> ${function_markdown_path}"
+ [[                 #echo "Assigning: ${function} -> ${function_markdown_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 local function_markdown_path="${doc_dir}/functions/${function}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 local function_markdown_path="${doc_dir}/functions/${function}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 #echo "Assigning: ${function} -> ${function_markdown_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 #echo "Assigning: ${function} -> ${function_markdown_path}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                #echo "Assigning: ${function} -> ${function_markdown_path}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 __VENV_FUNCTIONS["$function"]="$function_markdown_path"'
LINE:                 __VENV_FUNCTIONS["$function"]="$function_markdown_path"
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 #echo "Assigning: ${function} -> ${function_markdown_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 #echo "Assigning: ${function} -> ${function_markdown_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                __VENV_FUNCTIONS["$function"]="$function_markdown_path"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 #echo "Assigned: ${__VENV_FUNCTIONS[$function]}"'
LINE:                 #echo "Assigned: ${__VENV_FUNCTIONS[$function]}"
+ [[                 #echo "Assigned: ${__VENV_FUNCTIONS[$function]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 __VENV_FUNCTIONS["$function"]="$function_markdown_path" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 #echo "Assigned: ${__VENV_FUNCTIONS[$function]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 #echo "Assigned: ${__VENV_FUNCTIONS[$function]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                #echo "Assigned: ${__VENV_FUNCTIONS[$function]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 sorted_function_names+=("$function")'
LINE:                 sorted_function_names+=("$function")
+ [[                 sorted_function_names+=("$function") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 #echo "Assigned: ${__VENV_FUNCTIONS[$function]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 #echo "Assigned: ${__VENV_FUNCTIONS[$function]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 sorted_function_names+=("$function") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 sorted_function_names+=("$function") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                sorted_function_names+=("$function")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 '
LINE:                 
+ [[                  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 sorted_function_names+=("$function") =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 sorted_function_names+=("$function") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                  =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Update longest functiontion name length'
LINE:                 # Update longest functiontion name length
+ [[                 # Update longest functiontion name length =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^}$ ]]
+ [[ false == false ]]
+ [[                  =~ ^[[:space:]]*$ ]]
+ [[                 # Update longest functiontion name length =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Update longest functiontion name length =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Update longest functiontion name length =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Update longest functiontion name length'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ ${#function} -gt $longest_function_name ]]; then'
LINE:                 if [[ ${#function} -gt $longest_function_name ]]; then
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Update longest functiontion name length =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Update longest functiontion name length =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ ${#function} -gt $longest_function_name ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     longest_function_name=${#function}'
LINE:                     longest_function_name=${#function}
+ [[                     longest_function_name=${#function} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ ${#function} -gt $longest_function_name ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     longest_function_name=${#function} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     longest_function_name=${#function} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    longest_function_name=${#function}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     longest_function_name=${#function} =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     longest_function_name=${#function} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             fi'
LINE:             fi
+ [[             fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         done < "$script"'
LINE:         done < "$script"
+ [[         done < "$script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[             fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done < "$script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         done < "$script" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        done < "$script"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done < "$script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         done < "$script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort)'
LINE:     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort)
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort)'
LINE:     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort)
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${sorted_script_names[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_function_names < <(printf "%s\n" "${sorted_function_names[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # functiontion: init_help_system'
LINE: # # functiontion: init_help_system
+ [[ # # functiontion: init_help_system =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # functiontion: init_help_system =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# functiontion: init_help_system\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `init_help_system` - Initialize the help system by populating functiontion and script documentation.'
LINE: #  `init_help_system` - Initialize the help system by populating functiontion and script documentation.
+ [[ #  `init_help_system` - Initialize the help system by populating functiontion and script documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `init_help_system` - Initialize the help system by populating functiontion and script documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `init_help_system` - Initialize the help system by populating functiontion and script documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `init_help_system` - Initialize the help system by populating functiontion and script documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `init_help_system` - Initialize the help system by populating functiontion and script documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.'
LINE: #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Automatically called when the script is sourced. No need to call it manually.'
LINE: #   - Automatically called when the script is sourced. No need to call it manually.
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Automatically called when the script is sourced. No need to call it manually. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Automatically called when the script is sourced. No need to call it manually.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global. Modifies the global array `__VENV_FUNCTIONS`.'
LINE: #   - Global. Modifies the global array `__VENV_FUNCTIONS`.
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global. Modifies the global array `__VENV_FUNCTIONS`. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global. Modifies the global array `__VENV_FUNCTIONS`.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.'
LINE: #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.'
LINE: #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Sorts `__VENV_FUNCTIONS` based on function names.'
LINE: #   - Sorts `__VENV_FUNCTIONS` based on function names.
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts `__VENV_FUNCTIONS` based on function names. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Sorts `__VENV_FUNCTIONS` based on function names.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: init_help_system() {'
LINE: init_help_system() {
+ [[ init_help_system() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ init_help_system() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ init_help_system() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ init_help_system() { =~ ^#+ ]]
+ [[ init_help_system() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=init_help_system
+ current_function_name=init_help_system
+ extracted_markdown='## init_help_system\n# functiontion: init_help_system\n `init_help_system` - Initialize the help system by populating functiontion and script documentation.\n## Description\n- **Purpose**:\n  - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.\n- **Usage**: \n  - Automatically called when the script is sourced. No need to call it manually.\n- **Scope**:\n  - Global. Modifies the global array `__VENV_FUNCTIONS`.\n- **Input Parameters**: \n  - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.\n- **Output**: \n  - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.\n  - Sorts `__VENV_FUNCTIONS` based on function names.\n- **Exceptions**: \n  - None\n'
+ echo -e '## init_help_system\n# functiontion: init_help_system\n `init_help_system` - Initialize the help system by populating functiontion and script documentation.\n## Description\n- **Purpose**:\n  - Initializes the help system by populating the `__VENV_FUNCTIONS` with function names and their documentation.\n- **Usage**: \n  - Automatically called when the script is sourced. No need to call it manually.\n- **Scope**:\n  - Global. Modifies the global array `__VENV_FUNCTIONS`.\n- **Input Parameters**: \n  - None. Internally iterates over the scripts listed in the `__VENV_SOURCED_LIST` array.\n- **Output**: \n  - Populates `__VENV_FUNCTIONS` with function names and their corresponding documentation.\n  - Sorts `__VENV_FUNCTIONS` based on function names.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     [ -n "${__VENV_FUNCTIONS[*]}" ] && return'
LINE:     [ -n "${__VENV_FUNCTIONS[*]}" ] && return
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    [ -n "${__VENV_FUNCTIONS[*]}" ] && return'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local conf_file="${__VENV_BASE}/conf/help_sys.conf"'
LINE:     local conf_file="${__VENV_BASE}/conf/help_sys.conf"
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -n "${__VENV_FUNCTIONS[*]}" ] && return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local conf_file="${__VENV_BASE}/conf/help_sys.conf"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     readarray -t search_dirs < <(grep -v '\''^#'\'' "$conf_file" | sed '\''/^$/d'\'')'
LINE:     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d')
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    readarray -t search_dirs < <(grep -v '\''^#'\'' "$conf_file" | sed '\''/^$/d'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for dir_name in "${search_dirs[@]}"; do'
LINE:     for dir_name in "${search_dirs[@]}"; do
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t search_dirs < <(grep -v '^#' "$conf_file" | sed '/^$/d') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for dir_name in "${search_dirs[@]}"; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for dir_name in "${search_dirs[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         process_scripts "$dir_name"'
LINE:         process_scripts "$dir_name"
+ [[         process_scripts "$dir_name" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         process_scripts "$dir_name" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         process_scripts "$dir_name" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        process_scripts "$dir_name"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         process_scripts "$dir_name" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         process_scripts "$dir_name" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Sort names for alphabetical order'
LINE:     # Sort names for alphabetical order
+ [[     # Sort names for alphabetical order =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Sort names for alphabetical order =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Sort names for alphabetical order =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Sort names for alphabetical order'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort)'
LINE:     readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort)
+ [[     readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Sort names for alphabetical order =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Sort names for alphabetical order =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort)'
LINE:     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort)
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_functiontion_names < <(printf "%s\n" "${!__VENV_FUNCTIONS[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     readarray -t sorted_script_names < <(printf "%s\n" "${!__VENV_SCRIPTS[@]}" | sort) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # functiontion: write_index_header'
LINE: # # functiontion: write_index_header
+ [[ # # functiontion: write_index_header =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # functiontion: write_index_header =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# functiontion: write_index_header\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `write_index_header` - Writes the header section of the README.'
LINE: #  `write_index_header` - Writes the header section of the README.
+ [[ #  `write_index_header` - Writes the header section of the README. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_index_header` - Writes the header section of the README. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_index_header` - Writes the header section of the README. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_index_header` - Writes the header section of the README. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `write_index_header` - Writes the header section of the README.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Creates the initial header content for the README documentation.'
LINE: #   - Creates the initial header content for the README documentation.
+ [[ #   - Creates the initial header content for the README documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates the initial header content for the README documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates the initial header content for the README documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates the initial header content for the README documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Creates the initial header content for the README documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `write_index_header <readme_path>`'
LINE: #   - `write_index_header <readme_path>`
+ [[ #   - `write_index_header <readme_path>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_index_header <readme_path>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_index_header <readme_path>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_index_header <readme_path>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `write_index_header <readme_path>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `readme_path`: The path to the README file.'
LINE: #   - `readme_path`: The path to the README file.
+ [[ #   - `readme_path`: The path to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: The path to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: The path to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: The path to the README file. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `readme_path`: The path to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Writes the header content to the specified README file.'
LINE: #   - Writes the header content to the specified README file.
+ [[ #   - Writes the header content to the specified README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Writes the header content to the specified README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the header content to the specified README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Writes the header content to the specified README file. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Writes the header content to the specified README file.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: write_index_header() {'
LINE: write_index_header() {
+ [[ write_index_header() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_index_header() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_index_header() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_index_header() { =~ ^#+ ]]
+ [[ write_index_header() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=write_index_header
+ current_function_name=write_index_header
+ extracted_markdown='## write_index_header\n# functiontion: write_index_header\n `write_index_header` - Writes the header section of the README.\n## Description\n- **Purpose**:\n  - Creates the initial header content for the README documentation.\n- **Usage**: \n  - `write_index_header <readme_path>`\n- **Input Parameters**: \n  - `readme_path`: The path to the README file.\n- **Output**: \n  - Writes the header content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## write_index_header\n# functiontion: write_index_header\n `write_index_header` - Writes the header section of the README.\n## Description\n- **Purpose**:\n  - Creates the initial header content for the README documentation.\n- **Usage**: \n  - `write_index_header <readme_path>`\n- **Input Parameters**: \n  - `readme_path`: The path to the README file.\n- **Output**: \n  - Writes the header content to the specified README file.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local readme_path="$1"'
LINE:     local readme_path="$1"
+ [[     local readme_path="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local readme_path="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_path="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local readme_path="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local readme_path="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "# Project Documentation" > "${readme_path}"'
LINE:     echo "# Project Documentation" > "${readme_path}"
+ [[     echo "# Project Documentation" > "${readme_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_path="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local readme_path="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "# Project Documentation" > "${readme_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "# Project Documentation" > "${readme_path}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "# Project Documentation" > "${readme_path}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "## Brief introduction of the project." >> "${readme_path}"'
LINE:     echo "## Brief introduction of the project." >> "${readme_path}"
+ [[     echo "## Brief introduction of the project." >> "${readme_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "# Project Documentation" > "${readme_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "# Project Documentation" > "${readme_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "## Brief introduction of the project." >> "${readme_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "## Brief introduction of the project." >> "${readme_path}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "## Brief introduction of the project." >> "${readme_path}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Add other header content here'
LINE:     # Add other header content here
+ [[     # Add other header content here =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "## Brief introduction of the project." >> "${readme_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "## Brief introduction of the project." >> "${readme_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Add other header content here =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Add other header content here =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Add other header content here'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Add other header content here =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Add other header content here =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # functiontion: write_index_footer'
LINE: # # functiontion: write_index_footer
+ [[ # # functiontion: write_index_footer =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # functiontion: write_index_footer =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# functiontion: write_index_footer\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `write_index_footer` - Writes the footer section of the README.'
LINE: #  `write_index_footer` - Writes the footer section of the README.
+ [[ #  `write_index_footer` - Writes the footer section of the README. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `write_index_footer` - Writes the footer section of the README. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_index_footer` - Writes the footer section of the README. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `write_index_footer` - Writes the footer section of the README. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `write_index_footer` - Writes the footer section of the README.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Appends footer content and a timestamp to the README documentation.'
LINE: #   - Appends footer content and a timestamp to the README documentation.
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and a timestamp to the README documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Appends footer content and a timestamp to the README documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `write_index_footer <readme_path>`'
LINE: #   - `write_index_footer <readme_path>`
+ [[ #   - `write_index_footer <readme_path>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `write_index_footer <readme_path>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_index_footer <readme_path>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `write_index_footer <readme_path>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `write_index_footer <readme_path>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `readme_path`: The path to the README file.'
LINE: #   - `readme_path`: The path to the README file.
+ [[ #   - `readme_path`: The path to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: The path to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: The path to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: The path to the README file. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `readme_path`: The path to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Appends footer content and timestamp to the README file.'
LINE: #   - Appends footer content and timestamp to the README file.
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends footer content and timestamp to the README file. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Appends footer content and timestamp to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: write_index_footer() {'
LINE: write_index_footer() {
+ [[ write_index_footer() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ write_index_footer() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_index_footer() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ write_index_footer() { =~ ^#+ ]]
+ [[ write_index_footer() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=write_index_footer
+ current_function_name=write_index_footer
+ extracted_markdown='## write_index_footer\n# functiontion: write_index_footer\n `write_index_footer` - Writes the footer section of the README.\n## Description\n- **Purpose**:\n  - Appends footer content and a timestamp to the README documentation.\n- **Usage**: \n  - `write_index_footer <readme_path>`\n- **Input Parameters**: \n  - `readme_path`: The path to the README file.\n- **Output**: \n  - Appends footer content and timestamp to the README file.\n- **Exceptions**: \n  - None\n'
+ echo -e '## write_index_footer\n# functiontion: write_index_footer\n `write_index_footer` - Writes the footer section of the README.\n## Description\n- **Purpose**:\n  - Appends footer content and a timestamp to the README documentation.\n- **Usage**: \n  - `write_index_footer <readme_path>`\n- **Input Parameters**: \n  - `readme_path`: The path to the README file.\n- **Output**: \n  - Appends footer content and timestamp to the README file.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local readme_path="$1"'
LINE:     local readme_path="$1"
+ [[     local readme_path="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local readme_path="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_path="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local readme_path="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local readme_path="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S")'
LINE:     local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S")
+ [[     local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_path="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local readme_path="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local date_mark=$(date "+Generated: %Y %m %d at %H:%M:%S") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "" >> "${readme_path}"'
LINE:     echo "" >> "${readme_path}"
+ [[     echo "" >> "${readme_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "" >> "${readme_path}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "" >> "${readme_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "" >> "${readme_path}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "" >> "${readme_path}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Footer content" >> "${readme_path}"'
LINE:     echo "Footer content" >> "${readme_path}"
+ [[     echo "Footer content" >> "${readme_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "" >> "${readme_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "" >> "${readme_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Footer content" >> "${readme_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Footer content" >> "${readme_path}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Footer content" >> "${readme_path}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "${date_mark}" >> "${readme_path}"'
LINE:     echo "${date_mark}" >> "${readme_path}"
+ [[     echo "${date_mark}" >> "${readme_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Footer content" >> "${readme_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Footer content" >> "${readme_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${date_mark}" >> "${readme_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${date_mark}" >> "${readme_path}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "${date_mark}" >> "${readme_path}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Add other footer content here'
LINE:     # Add other footer content here
+ [[     # Add other footer content here =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${date_mark}" >> "${readme_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${date_mark}" >> "${readme_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Add other footer content here =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Add other footer content here =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Add other footer content here'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Add other footer content here =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Add other footer content here =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # functiontion: create_readme'
LINE: # # functiontion: create_readme
+ [[ # # functiontion: create_readme =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # functiontion: create_readme =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# functiontion: create_readme\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `create_readme` - Creates an entry in the README for a script or functiontion.'
LINE: #  `create_readme` - Creates an entry in the README for a script or functiontion.
+ [[ #  `create_readme` - Creates an entry in the README for a script or functiontion. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `create_readme` - Creates an entry in the README for a script or functiontion. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `create_readme` - Creates an entry in the README for a script or functiontion. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `create_readme` - Creates an entry in the README for a script or functiontion. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `create_readme` - Creates an entry in the README for a script or functiontion.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Adds a Markdown link to the README file for the given script or function.'
LINE: #   - Adds a Markdown link to the README file for the given script or function.
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Adds a Markdown link to the README file for the given script or function. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Adds a Markdown link to the README file for the given script or function.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `create_readme <name> <description> <markdown_path> <readme_path>`'
LINE: #   - `create_readme <name> <description> <markdown_path> <readme_path>`
+ [[ #   - `create_readme <name> <description> <markdown_path> <readme_path>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `create_readme <name> <description> <markdown_path> <readme_path>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `create_readme <name> <description> <markdown_path> <readme_path>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `create_readme <name> <description> <markdown_path> <readme_path>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `create_readme <name> <description> <markdown_path> <readme_path>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `name`: The name of the script or function.'
LINE: #   - `name`: The name of the script or function.
+ [[ #   - `name`: The name of the script or function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `name`: The name of the script or function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `name`: The name of the script or function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `name`: The name of the script or function. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `name`: The name of the script or function.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `description`: A brief description.'
LINE: #   - `description`: A brief description.
+ [[ #   - `description`: A brief description. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `description`: A brief description. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `description`: A brief description. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `description`: A brief description. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `description`: A brief description.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `markdown_path`: Path to the Markdown documentation.'
LINE: #   - `markdown_path`: Path to the Markdown documentation.
+ [[ #   - `markdown_path`: Path to the Markdown documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `markdown_path`: Path to the Markdown documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `markdown_path`: Path to the Markdown documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `markdown_path`: Path to the Markdown documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `markdown_path`: Path to the Markdown documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `readme_path`: Path to the README file.'
LINE: #   - `readme_path`: Path to the README file.
+ [[ #   - `readme_path`: Path to the README file. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: Path to the README file. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: Path to the README file. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `readme_path`: Path to the README file. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `readme_path`: Path to the README file.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Appends a Markdown-formatted link to the README.'
LINE: #   - Appends a Markdown-formatted link to the README.
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Appends a Markdown-formatted link to the README. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Appends a Markdown-formatted link to the README.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: create_readme() {'
LINE: create_readme() {
+ [[ create_readme() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ create_readme() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ create_readme() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ create_readme() { =~ ^#+ ]]
+ [[ create_readme() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=create_readme
+ current_function_name=create_readme
+ extracted_markdown='## create_readme\n# functiontion: create_readme\n `create_readme` - Creates an entry in the README for a script or functiontion.\n## Description\n- **Purpose**:\n  - Adds a Markdown link to the README file for the given script or function.\n- **Usage**: \n  - `create_readme <name> <description> <markdown_path> <readme_path>`\n- **Input Parameters**: \n  - `name`: The name of the script or function.\n  - `description`: A brief description.\n  - `markdown_path`: Path to the Markdown documentation.\n  - `readme_path`: Path to the README file.\n- **Output**: \n  - Appends a Markdown-formatted link to the README.\n- **Exceptions**: \n  - None\n'
+ echo -e '## create_readme\n# functiontion: create_readme\n `create_readme` - Creates an entry in the README for a script or functiontion.\n## Description\n- **Purpose**:\n  - Adds a Markdown link to the README file for the given script or function.\n- **Usage**: \n  - `create_readme <name> <description> <markdown_path> <readme_path>`\n- **Input Parameters**: \n  - `name`: The name of the script or function.\n  - `description`: A brief description.\n  - `markdown_path`: Path to the Markdown documentation.\n  - `readme_path`: Path to the README file.\n- **Output**: \n  - Appends a Markdown-formatted link to the README.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local name="$1"'
LINE:     local name="$1"
+ [[     local name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local name="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local name="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local description="$2"'
LINE:     local description="$2"
+ [[     local description="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local description="$2" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local description="$2"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local markdown_path="$3"'
LINE:     local markdown_path="$3"
+ [[     local markdown_path="$3" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local description="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_path="$3" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local markdown_path="$3" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local markdown_path="$3"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local readme_path="$4"'
LINE:     local readme_path="$4"
+ [[     local readme_path="$4" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_path="$3" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local markdown_path="$3" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_path="$4" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local readme_path="$4" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local readme_path="$4"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_path="$4" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local readme_path="$4" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     description="${description#*- }"   # Extract everything after '\''- '\'''
LINE:     description="${description#*- }"   # Extract everything after '- '
+ [[     description="${description#*- }"   # Extract everything after '- ' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     description="${description#*- }"   # Extract everything after '- ' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description#*- }"   # Extract everything after '- ' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     description="${description#*- }"   # Extract everything after '- ' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    description="${description#*- }"   # Extract everything after '\''- '\'''
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     description="${description%%\\n*}"  # Stop at the first newline'
LINE:     description="${description%%\\n*}"  # Stop at the first newline
+ [[     description="${description%%\\n*}"  # Stop at the first newline =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description#*- }"   # Extract everything after '- ' =~ ^}$ ]]
+ [[ false == false ]]
+ [[     description="${description#*- }"   # Extract everything after '- ' =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description%%\\n*}"  # Stop at the first newline =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     description="${description%%\\n*}"  # Stop at the first newline =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    description="${description%%\\n*}"  # Stop at the first newline'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     description="${description%%\\n*}"  # Stop at the first newline =~ ^}$ ]]
+ [[ false == false ]]
+ [[     description="${description%%\\n*}"  # Stop at the first newline =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Create a relative path for the markdown link'
LINE:     # Create a relative path for the markdown link
+ [[     # Create a relative path for the markdown link =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Create a relative path for the markdown link =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Create a relative path for the markdown link =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Create a relative path for the markdown link =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Create a relative path for the markdown link'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}"'
LINE:     local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}"
+ [[     local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Create a relative path for the markdown link =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Create a relative path for the markdown link =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local markdown_rel_path="${markdown_path/#${__VENV_BASE}/}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}"'
LINE:     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}"
+ [[     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "- [${name}](${markdown_rel_path}): ${description}" >> "${readme_path}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: generate_markdown'
LINE: # # Function: generate_markdown
+ [[ # # Function: generate_markdown =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: generate_markdown =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: generate_markdown\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `generate_markdown` - Generate Markdown documentation for all available functions.'
LINE: #  `generate_markdown` - Generate Markdown documentation for all available functions.
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `generate_markdown` - Generate Markdown documentation for all available functions. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `generate_markdown` - Generate Markdown documentation for all available functions.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Generate comprehensive Markdown documentation for all functions.'
LINE: #   - Generate comprehensive Markdown documentation for all functions.
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Generate comprehensive Markdown documentation for all functions. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Generate comprehensive Markdown documentation for all functions.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vhelp generate_markdown`'
LINE: #   - `vhelp generate_markdown`
+ [[ #   - `vhelp generate_markdown` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vhelp generate_markdown` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp generate_markdown` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp generate_markdown` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `vhelp generate_markdown`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global'
LINE: #   - Global
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Markdown-formatted documentation for all functions.'
LINE: #   - Markdown-formatted documentation for all functions.
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Markdown-formatted documentation for all functions. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Markdown-formatted documentation for all functions.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: generate_markdown() {'
LINE: generate_markdown() {
+ [[ generate_markdown() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ generate_markdown() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ generate_markdown() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ generate_markdown() { =~ ^#+ ]]
+ [[ generate_markdown() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=generate_markdown
+ current_function_name=generate_markdown
+ extracted_markdown='## generate_markdown\n# Function: generate_markdown\n `generate_markdown` - Generate Markdown documentation for all available functions.\n## Description\n- **Purpose**:\n  - Generate comprehensive Markdown documentation for all functions.\n- **Usage**: \n  - `vhelp generate_markdown`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Markdown-formatted documentation for all functions.\n- **Exceptions**: \n  - None\n'
+ echo -e '## generate_markdown\n# Function: generate_markdown\n `generate_markdown` - Generate Markdown documentation for all available functions.\n## Description\n- **Purpose**:\n  - Generate comprehensive Markdown documentation for all functions.\n- **Usage**: \n  - `vhelp generate_markdown`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Markdown-formatted documentation for all functions.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     #set -x'
LINE:     #set -x
+ [[     #set -x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     #set -x =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     #set -x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     #set -x =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    #set -x'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local conf_file="${__VENV_BASE}/conf/help_sys.conf"'
LINE:     local conf_file="${__VENV_BASE}/conf/help_sys.conf"
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     #set -x =~ ^}$ ]]
+ [[ false == false ]]
+ [[     #set -x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local conf_file="${__VENV_BASE}/conf/help_sys.conf"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local shdoc_dir="docs/shdoc"'
LINE:     local shdoc_dir="docs/shdoc"
+ [[     local shdoc_dir="docs/shdoc" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local conf_file="${__VENV_BASE}/conf/help_sys.conf" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local shdoc_dir="docs/shdoc" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local shdoc_dir="docs/shdoc" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local shdoc_dir="docs/shdoc"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}"'
LINE:     [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}"
+ [[     [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local shdoc_dir="docs/shdoc" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local shdoc_dir="docs/shdoc" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -d "${shdoc_dir}" ] || mkdir -p "${shdoc_dir}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local progress_file="${shdoc_dir}/.in-progress"'
LINE:     local progress_file="${shdoc_dir}/.in-progress"
+ [[     local progress_file="${shdoc_dir}/.in-progress" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local progress_file="${shdoc_dir}/.in-progress" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local progress_file="${shdoc_dir}/.in-progress" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local progress_file="${shdoc_dir}/.in-progress" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local progress_file="${shdoc_dir}/.in-progress"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE"'
LINE:     local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE"
+ [[     local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local progress_file="${shdoc_dir}/.in-progress" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local progress_file="${shdoc_dir}/.in-progress" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     touch "${progress_file}"'
LINE:     touch "${progress_file}"
+ [[     touch "${progress_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local timestamp_file="${__VENV_BASE}/${shdoc_dir}/AUTO_GENERATED_DO_NOT_MODIFY_OR_PLACE_FILES_HERE" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     touch "${progress_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     touch "${progress_file}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    touch "${progress_file}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     touch "${progress_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     touch "${progress_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local readme_index="${__VENV_BASE}/docs/README.md"'
LINE:     local readme_index="${__VENV_BASE}/docs/README.md"
+ [[     local readme_index="${__VENV_BASE}/docs/README.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local readme_index="${__VENV_BASE}/docs/README.md" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_index="${__VENV_BASE}/docs/README.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local readme_index="${__VENV_BASE}/docs/README.md" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local readme_index="${__VENV_BASE}/docs/README.md"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     write_index_header "${readme_index}"'
LINE:     write_index_header "${readme_index}"
+ [[     write_index_header "${readme_index}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local readme_index="${__VENV_BASE}/docs/README.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local readme_index="${__VENV_BASE}/docs/README.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_index_header "${readme_index}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_index_header "${readme_index}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    write_index_header "${readme_index}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_index_header "${readme_index}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_index_header "${readme_index}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local search_dirs=($(grep -v '\''^#'\'' "$conf_file" | sed '\''/^$/d'\''))'
LINE:     local search_dirs=($(grep -v '^#' "$conf_file" | sed '/^$/d'))
+ [[     local search_dirs=($(grep -v '^#' "$conf_file" | sed '/^$/d')) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local search_dirs=($(grep -v '^#' "$conf_file" | sed '/^$/d')) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_dirs=($(grep -v '^#' "$conf_file" | sed '/^$/d')) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local search_dirs=($(grep -v '^#' "$conf_file" | sed '/^$/d')) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local search_dirs=($(grep -v '\''^#'\'' "$conf_file" | sed '\''/^$/d'\''))'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local search_dirs=($(grep -v '^#' "$conf_file" | sed '/^$/d')) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local search_dirs=($(grep -v '^#' "$conf_file" | sed '/^$/d')) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Iterate over directories to find shell scripts and their documentation'
LINE:     # Iterate over directories to find shell scripts and their documentation
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Iterate over directories to find shell scripts and their documentation =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Iterate over directories to find shell scripts and their documentation'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for dir_name in "${search_dirs[@]}"; do'
LINE:     for dir_name in "${search_dirs[@]}"; do
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Iterate over directories to find shell scripts and their documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for dir_name in "${search_dirs[@]}"; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for dir_name in "${search_dirs[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local script_dir="${__VENV_BASE}/${dir_name}"'
LINE:         local script_dir="${__VENV_BASE}/${dir_name}"
+ [[         local script_dir="${__VENV_BASE}/${dir_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for dir_name in "${search_dirs[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_dir="${__VENV_BASE}/${dir_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local script_dir="${__VENV_BASE}/${dir_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local script_dir="${__VENV_BASE}/${dir_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local doc_dir="${shdoc_dir}/${dir_name}"'
LINE:         local doc_dir="${shdoc_dir}/${dir_name}"
+ [[         local doc_dir="${shdoc_dir}/${dir_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_dir="${__VENV_BASE}/${dir_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local script_dir="${__VENV_BASE}/${dir_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local doc_dir="${shdoc_dir}/${dir_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local doc_dir="${shdoc_dir}/${dir_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local doc_dir="${shdoc_dir}/${dir_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions"'
LINE:         [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions"
+ [[         [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local doc_dir="${shdoc_dir}/${dir_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local doc_dir="${shdoc_dir}/${dir_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts"'
LINE:         [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts"
+ [[         [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         [ -d "${doc_dir}/functions" ] || mkdir -p "${doc_dir}/functions" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1))'
LINE:         local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1))
+ [[         local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         [ -d "${doc_dir}/scripts" ] || mkdir -p "${doc_dir}/scripts" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1))'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local script_files=($(file "${script_dir}"/* | grep "shell script" | cut -d":" -f1)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Iterate over sorted script names'
LINE:         # Iterate over sorted script names
+ [[         # Iterate over sorted script names =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Iterate over sorted script names =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Iterate over sorted script names =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Iterate over sorted script names =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Iterate over sorted script names'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local file_name'
LINE:         local file_name
+ [[         local file_name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Iterate over sorted script names =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Iterate over sorted script names =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local file_name =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local file_name =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local file_name'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         for file_name in "${script_files[@]}"; do'
LINE:         for file_name in "${script_files[@]}"; do
+ [[         for file_name in "${script_files[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local file_name =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local file_name =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         for file_name in "${script_files[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         for file_name in "${script_files[@]}"; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        for file_name in "${script_files[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local script_name'
LINE:             local script_name
+ [[             local script_name =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         for file_name in "${script_files[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[         for file_name in "${script_files[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_name =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local script_name =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local script_name'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local script_name=$(basename "$file_name")'
LINE:             local script_name=$(basename "$file_name")
+ [[             local script_name=$(basename "$file_name") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_name =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local script_name =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_name=$(basename "$file_name") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local script_name=$(basename "$file_name") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local script_name=$(basename "$file_name")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local markdown_file="${doc_dir}/scripts/${script_name}.md"'
LINE:             local markdown_file="${doc_dir}/scripts/${script_name}.md"
+ [[             local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_name=$(basename "$file_name") =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local script_name=$(basename "$file_name") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local markdown_file="${doc_dir}/scripts/${script_name}.md"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "********************** Processing script name: ${file_name}"'
LINE:             echo "********************** Processing script name: ${file_name}"
+ [[             echo "********************** Processing script name: ${file_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local markdown_file="${doc_dir}/scripts/${script_name}.md" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "********************** Processing script name: ${file_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "********************** Processing script name: ${file_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "********************** Processing script name: ${file_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "********************** Processing script markdown file: $markdown_file"'
LINE:             echo "********************** Processing script markdown file: $markdown_file"
+ [[             echo "********************** Processing script markdown file: $markdown_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "********************** Processing script name: ${file_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "********************** Processing script name: ${file_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "********************** Processing script markdown file: $markdown_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "********************** Processing script markdown file: $markdown_file" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "********************** Processing script markdown file: $markdown_file"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "Generating markdown for script: $script_name"'
LINE:             echo "Generating markdown for script: $script_name"
+ [[             echo "Generating markdown for script: $script_name" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "********************** Processing script markdown file: $markdown_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "********************** Processing script markdown file: $markdown_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Generating markdown for script: $script_name" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "Generating markdown for script: $script_name" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "Generating markdown for script: $script_name"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Generating markdown for script: $script_name" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "Generating markdown for script: $script_name" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local extracted_markdown="# $script_name\n## Description\n"'
LINE:             local extracted_markdown="# $script_name\n## Description\n"
+ [[             local extracted_markdown="# $script_name\n## Description\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             local extracted_markdown="# $script_name\n## Description\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local extracted_markdown="# $script_name\n## Description\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local extracted_markdown="# $script_name\n## Description\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local extracted_markdown="# $script_name\n## Description\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local in_script_doc=false'
LINE:             local in_script_doc=false
+ [[             local in_script_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local extracted_markdown="# $script_name\n## Description\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local extracted_markdown="# $script_name\n## Description\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_script_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local in_script_doc=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local in_script_doc=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local in_function_doc=false'
LINE:             local in_function_doc=false
+ [[             local in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_script_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local in_script_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local in_function_doc=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local current_function_name=""'
LINE:             local current_function_name=""
+ [[             local current_function_name="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local current_function_name="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local current_function_name="" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local current_function_name=""'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local previous_line'
LINE:             local previous_line
+ [[             local previous_line =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local current_function_name="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local current_function_name="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local previous_line =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local previous_line =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local previous_line'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local script_entry=false'
LINE:             local script_entry=false
+ [[             local script_entry=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local previous_line =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local previous_line =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_entry=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local script_entry=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local script_entry=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local script_entry=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local script_entry=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             set -x'
LINE:             set -x
+ [[             set -x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             set -x =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             set -x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             set -x =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            set -x'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             # Open the script file for reading'
LINE:             # Open the script file for reading
+ [[             # Open the script file for reading =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             set -x =~ ^}$ ]]
+ [[ false == false ]]
+ [[             set -x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Open the script file for reading =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Open the script file for reading =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            # Open the script file for reading'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             while IFS= read -r line || [[ -n "${line}" ]]; do'
LINE:             while IFS= read -r line || [[ -n "${line}" ]]; do
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Open the script file for reading =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Open the script file for reading =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            while IFS= read -r line || [[ -n "${line}" ]]; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[             while IFS= read -r line || [[ -n "${line}" ]]; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 echo "LINE: ${line}"'
LINE:                 echo "LINE: ${line}"
+ [[                 echo "LINE: ${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 echo "LINE: ${line}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "LINE: ${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "LINE: ${line}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                echo "LINE: ${line}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "LINE: ${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "LINE: ${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Check for beginning of the script.'
LINE:                 # Check for beginning of the script.
+ [[                 # Check for beginning of the script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Check for beginning of the script. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of the script. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Check for beginning of the script. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Check for beginning of the script.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${line}" =~ ^\#! ]]; then'
LINE:                 if [[ "${line}" =~ ^\#! ]]; then
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of the script. =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Check for beginning of the script. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${line}" =~ ^\#! ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${line}" =~ ^\#! ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Found shebang line"'
LINE:                     echo "**************************  Found shebang line"
+ [[                     echo "**************************  Found shebang line" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${line}" =~ ^\#! ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found shebang line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Found shebang line" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Found shebang line"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     script_entry=true'
LINE:                     script_entry=true
+ [[                     script_entry=true =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found shebang line" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Found shebang line" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=true =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     script_entry=true =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    script_entry=true'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     in_function_doc=false'
LINE:                     in_function_doc=false
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=true =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     script_entry=true =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '\''#'\'' optionally followed by whitespace'
LINE:                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '#' optionally followed by whitespace
+ [[                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '#' optionally followed by whitespace =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '#' optionally followed by whitespace =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '#' optionally followed by whitespace =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '#' optionally followed by whitespace =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # In the script, skip blank lines, lines with only whitespace, or lines beginning with '\''#'\'' optionally followed by whitespace'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then'
LINE:                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '#' optionally followed by whitespace =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # In the script, skip blank lines, lines with only whitespace, or lines beginning with '#' optionally followed by whitespace =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Found blank or single comment line at beginning of script"'
LINE:                     echo "**************************  Found blank or single comment line at beginning of script"
+ [[                     echo "**************************  Found blank or single comment line at beginning of script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${script_entry}" == true && ("${line}" =~ ^[[:space:]]*$ || "${line}" =~ ^#[[:space:]]*$) ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found blank or single comment line at beginning of script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Found blank or single comment line at beginning of script" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Found blank or single comment line at beginning of script"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found blank or single comment line at beginning of script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Found blank or single comment line at beginning of script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Handle Script documentation'
LINE:                 # Handle Script documentation
+ [[                 # Handle Script documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Handle Script documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Script documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Handle Script documentation =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Handle Script documentation'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then'
LINE:                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Script documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Handle Script documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Inside script documentation"'
LINE:                     echo "**************************  Inside script documentation"
+ [[                     echo "**************************  Inside script documentation" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ ("${in_script_doc}" == true || "${script_entry}" == true) && "${line}" =~ ^#+ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Inside script documentation" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Inside script documentation" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Inside script documentation"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     extracted_markdown+="${line/#\# /}\n"'
LINE:                     extracted_markdown+="${line/#\# /}\n"
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Inside script documentation" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Inside script documentation" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown+="${line/#\# /}\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    extracted_markdown+="${line/#\# /}\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     script_entry=false'
LINE:                     script_entry=false
+ [[                     script_entry=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     script_entry=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    script_entry=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     in_script_doc=true'
LINE:                     in_script_doc=true
+ [[                     in_script_doc=true =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     script_entry=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     script_entry=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=true =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_script_doc=true =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    in_script_doc=true'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=true =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_script_doc=true =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 '
LINE:                 
+ [[                  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                  =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Checking for end of script documentation'
LINE:                 # Checking for end of script documentation
+ [[                 # Checking for end of script documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^}$ ]]
+ [[ false == false ]]
+ [[                  =~ ^[[:space:]]*$ ]]
+ [[                 # Checking for end of script documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of script documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Checking for end of script documentation =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Checking for end of script documentation'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then'
LINE:                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of script documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Checking for end of script documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  End of script documentation"'
LINE:                     echo "**************************  End of script documentation"
+ [[                     echo "**************************  End of script documentation" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_script_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  End of script documentation" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  End of script documentation" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  End of script documentation"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}"'
LINE:                     echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}"
+ [[                     echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  End of script documentation" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  End of script documentation" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     extracted_markdown=""'
LINE:                     extracted_markdown=""
+ [[                     extracted_markdown="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo -e "$extracted_markdown" > "${__VENV_SCRIPTS[$script_name]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown="" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    extracted_markdown=""'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     previous_line="${line}"'
LINE:                     previous_line="${line}"
+ [[                     previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     previous_line="${line}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     in_script_doc=false'
LINE:                     in_script_doc=false
+ [[                     in_script_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_script_doc=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    in_script_doc=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_script_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_script_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Checking for end of script documentation'
LINE:                 # Checking for end of script documentation
+ [[                 # Checking for end of script documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Checking for end of script documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of script documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Checking for end of script documentation =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Checking for end of script documentation'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then'
LINE:                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Checking for end of script documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Checking for end of script documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  End of function code"'
LINE:                     echo "**************************  End of function code"
+ [[                     echo "**************************  End of function code" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${previous_line}" =~ ^}$ && "${line}" =~ ^[[:space]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  End of function code" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  End of function code" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  End of function code"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     in_function_doc=false'
LINE:                     in_function_doc=false
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  End of function code" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  End of function code" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Check for beginning of a function documentation'
LINE:                 # Check for beginning of a function documentation
+ [[                 # Check for beginning of a function documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Check for beginning of a function documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of a function documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Check for beginning of a function documentation =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Check for beginning of a function documentation'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then'
LINE:                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for beginning of a function documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Check for beginning of a function documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Found function documentation"'
LINE:                     echo "**************************  Found function documentation"
+ [[                     echo "**************************  Found function documentation" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == false && "${previous_line}" =~ ^[[:space:]]*$ && "${line}" =~ ^#.* ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found function documentation" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Found function documentation" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Found function documentation"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     extracted_markdown+="${line/#\# /}\n"'
LINE:                     extracted_markdown+="${line/#\# /}\n"
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found function documentation" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Found function documentation" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown+="${line/#\# /}\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    extracted_markdown+="${line/#\# /}\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     in_function_doc=true'
LINE:                     in_function_doc=true
+ [[                     in_function_doc=true =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=true =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=true =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    in_function_doc=true'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=true =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=true =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 '
LINE:                 
+ [[                  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                  =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Reset if we get a blank line before reaching the end of the function documentation'
LINE:                 # Reset if we get a blank line before reaching the end of the function documentation
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                  =~ ^}$ ]]
+ [[ false == false ]]
+ [[                  =~ ^[[:space:]]*$ ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Reset if we get a blank line before reaching the end of the function documentation'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then'
LINE:                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Reset if we get a blank line before reaching the end of the function documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Resetting function documentation"'
LINE:                     echo "**************************  Resetting function documentation"
+ [[                     echo "**************************  Resetting function documentation" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Resetting function documentation" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Resetting function documentation" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Resetting function documentation"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     extracted_markdown=""'
LINE:                     extracted_markdown=""
+ [[                     extracted_markdown="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Resetting function documentation" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Resetting function documentation" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown="" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    extracted_markdown=""'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     previous_line="${line}"'
LINE:                     previous_line="${line}"
+ [[                     previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     previous_line="${line}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     in_function_doc=false'
LINE:                     in_function_doc=false
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Check for single `#` on line followed by optional whitespace and skip it'
LINE:                 # Check for single `#` on line followed by optional whitespace and skip it
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Check for single `#` on line followed by optional whitespace and skip it'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then'
LINE:                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Check for single `#` on line followed by optional whitespace and skip it =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Found empty #"'
LINE:                     echo "**************************  Found empty #"
+ [[                     echo "**************************  Found empty #" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^#[[:space:]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found empty #" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Found empty #" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Found empty #"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Found empty #" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Found empty #" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Handle Function documentation'
LINE:                 # Handle Function documentation
+ [[                 # Handle Function documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Handle Function documentation =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Function documentation =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Handle Function documentation =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Handle Function documentation'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then'
LINE:                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Handle Function documentation =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Handle Function documentation =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Inside function documentation"'
LINE:                     echo "**************************  Inside function documentation"
+ [[                     echo "**************************  Inside function documentation" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${in_function_doc}" == true && "${line}" =~ ^\#+ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Inside function documentation" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Inside function documentation" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Inside function documentation"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     extracted_markdown+="${line/#\# /}\n"'
LINE:                     extracted_markdown+="${line/#\# /}\n"
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Inside function documentation" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Inside function documentation" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown+="${line/#\# /}\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    extracted_markdown+="${line/#\# /}\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown+="${line/#\# /}\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # We reached the end of the function, reset'
LINE:                 # We reached the end of the function, reset
+ [[                 # We reached the end of the function, reset =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # We reached the end of the function, reset =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # We reached the end of the function, reset =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # We reached the end of the function, reset =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # We reached the end of the function, reset'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then'
LINE:                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # We reached the end of the function, reset =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # We reached the end of the function, reset =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "**************************  Beginning of function code"'
LINE:                     echo "**************************  Beginning of function code"
+ [[                     echo "**************************  Beginning of function code" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ "${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Beginning of function code" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "**************************  Beginning of function code" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "**************************  Beginning of function code"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     current_function_name="${line%%(*}"'
LINE:                     current_function_name="${line%%(*}"
+ [[                     current_function_name="${line%%(*}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "**************************  Beginning of function code" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "**************************  Beginning of function code" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     current_function_name="${line%%(*}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     current_function_name="${line%%(*}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    current_function_name="${line%%(*}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     current_function_name="${current_function_name/#function /}"'
LINE:                     current_function_name="${current_function_name/#function /}"
+ [[                     current_function_name="${current_function_name/#function /}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     current_function_name="${line%%(*}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     current_function_name="${line%%(*}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     current_function_name="${current_function_name/#function /}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     current_function_name="${current_function_name/#function /}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    current_function_name="${current_function_name/#function /}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     extracted_markdown="## $current_function_name\n$extracted_markdown"'
LINE:                     extracted_markdown="## $current_function_name\n$extracted_markdown"
+ [[                     extracted_markdown="## $current_function_name\n$extracted_markdown" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     current_function_name="${current_function_name/#function /}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     current_function_name="${current_function_name/#function /}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="## $current_function_name\n$extracted_markdown" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown="## $current_function_name\n$extracted_markdown" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    extracted_markdown="## $current_function_name\n$extracted_markdown"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}"'
LINE:                     echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}"
+ [[                     echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="## $current_function_name\n$extracted_markdown" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown="## $current_function_name\n$extracted_markdown" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     extracted_markdown=""'
LINE:                     extracted_markdown=""
+ [[                     extracted_markdown="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo -e "${extracted_markdown}" >"${__VENV_FUNCTIONS["$current_function_name"]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     extracted_markdown="" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    extracted_markdown=""'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     in_function_doc=false'
LINE:                     in_function_doc=false
+ [[                     in_function_doc=false =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     extracted_markdown="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     extracted_markdown="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     in_function_doc=false =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    in_function_doc=false'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     in_function_doc=false =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     in_function_doc=false =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace.'
LINE:                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace.
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then'
LINE:                 if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Skip the line if it does not have a-z, A-Z, _, or #, or if the line is entirely whitespace. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     echo "************************** Skipping line"'
LINE:                     echo "************************** Skipping line"
+ [[                     echo "************************** Skipping line" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 if [[ ! "${line}" =~ ^[a-zA-Z_#] || "${line}" =~ ^[[:space:]]*$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "************************** Skipping line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     echo "************************** Skipping line" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    echo "************************** Skipping line"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     previous_line="${line}"'
LINE:                     previous_line="${line}"
+ [[                     previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     echo "************************** Skipping line" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     echo "************************** Skipping line" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     previous_line="${line}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                     continue'
LINE:                     continue
+ [[                     continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                     continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                    continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 fi'
LINE:                 fi
+ [[                 fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                     continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[                     continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 log_message "WARNING" "Invalid line type found: $line"'
LINE:                 log_message "WARNING" "Invalid line type found: $line"
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 log_message "WARNING" "Invalid line type found: $line" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                log_message "WARNING" "Invalid line type found: $line"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 log_message "WARNING" "Invalid line type found: $line" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 previous_line="${line}"'
LINE:                 previous_line="${line}"
+ [[                 previous_line="${line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[                 previous_line="${line}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 previous_line="${line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 previous_line="${line}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                previous_line="${line}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 previous_line="${line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 previous_line="${line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             done < "$file_name"'
LINE:             done < "$file_name"
+ [[             done < "$file_name" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             done < "$file_name" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             done < "$file_name" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             done < "$file_name" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            done < "$file_name"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             set +x'
LINE:             set +x
+ [[             set +x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             done < "$file_name" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             done < "$file_name" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             set +x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             set +x =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            set +x'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             set +x =~ ^}$ ]]
+ [[ false == false ]]
+ [[             set +x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             # Write the extracted documentation to the markdown file'
LINE:             # Write the extracted documentation to the markdown file
+ [[             # Write the extracted documentation to the markdown file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Write the extracted documentation to the markdown file =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            # Write the extracted documentation to the markdown file'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index"'
LINE:             create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index"
+ [[             create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Write the extracted documentation to the markdown file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         done'
LINE:         done
+ [[         done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             create_readme "$script_name" "$extracted_markdown" "$markdown_file" "$readme_index" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^}$ ]]
+ [[ false == false ]]
+ [[         done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     set +x'
LINE:     set +x
+ [[     set +x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     set +x =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set +x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     set +x =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    set +x'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set +x =~ ^}$ ]]
+ [[ false == false ]]
+ [[     set +x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     write_index_footer "${readme_index}"'
LINE:     write_index_footer "${readme_index}"
+ [[     write_index_footer "${readme_index}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     write_index_footer "${readme_index}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_index_footer "${readme_index}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     write_index_footer "${readme_index}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    write_index_footer "${readme_index}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     write_index_footer "${readme_index}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     write_index_footer "${readme_index}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # After documentation generation is complete'
LINE:     # After documentation generation is complete
+ [[     # After documentation generation is complete =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # After documentation generation is complete =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # After documentation generation is complete =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # After documentation generation is complete =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # After documentation generation is complete'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     mv "${progress_file}" "${timestamp_file}"'
LINE:     mv "${progress_file}" "${timestamp_file}"
+ [[     mv "${progress_file}" "${timestamp_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # After documentation generation is complete =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # After documentation generation is complete =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     mv "${progress_file}" "${timestamp_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     mv "${progress_file}" "${timestamp_file}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    mv "${progress_file}" "${timestamp_file}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Now find and delete old markdown files'
LINE:     # Now find and delete old markdown files
+ [[     # Now find and delete old markdown files =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     mv "${progress_file}" "${timestamp_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     mv "${progress_file}" "${timestamp_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Now find and delete old markdown files =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Now find and delete old markdown files =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Now find and delete old markdown files'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     find "${shdoc_dir}" -type f -name '\''*.md'\'' ! -newer "${timestamp_file}" -exec rm {} \;'
LINE:     find "${shdoc_dir}" -type f -name '*.md' ! -newer "${timestamp_file}" -exec rm {} \;
+ [[     find "${shdoc_dir}" -type f -name '*.md' ! -newer "${timestamp_file}" -exec rm {} \; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Now find and delete old markdown files =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Now find and delete old markdown files =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     find "${shdoc_dir}" -type f -name '*.md' ! -newer "${timestamp_file}" -exec rm {} \; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     find "${shdoc_dir}" -type f -name '*.md' ! -newer "${timestamp_file}" -exec rm {} \; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    find "${shdoc_dir}" -type f -name '\''*.md'\'' ! -newer "${timestamp_file}" -exec rm {} \;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     find "${shdoc_dir}" -type f -name '*.md' ! -newer "${timestamp_file}" -exec rm {} \; =~ ^}$ ]]
+ [[ false == false ]]
+ [[     find "${shdoc_dir}" -type f -name '*.md' ! -newer "${timestamp_file}" -exec rm {} \; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: general_help'
LINE: # # Function: general_help
+ [[ # # Function: general_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: general_help =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: general_help\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `general_help` - Display general help options for the '\''help'\'' command.'
LINE: #  `general_help` - Display general help options for the 'help' command.
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `general_help` - Display general help options for the 'help' command. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `general_help` - Display general help options for the '\''help'\'' command.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Provide an overview of the available help commands.'
LINE: #   - Provide an overview of the available help commands.
+ [[ #   - Provide an overview of the available help commands. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Provide an overview of the available help commands. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide an overview of the available help commands. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide an overview of the available help commands. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Provide an overview of the available help commands.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `general_help`'
LINE: #   - `general_help`
+ [[ #   - `general_help` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `general_help` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `general_help` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `general_help` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `general_help`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global'
LINE: #   - Global
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Lists the general help commands available.'
LINE: #   - Lists the general help commands available.
+ [[ #   - Lists the general help commands available. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists the general help commands available. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the general help commands available. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the general help commands available. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Lists the general help commands available.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: general_help() {'
LINE: general_help() {
+ [[ general_help() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ general_help() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ general_help() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ general_help() { =~ ^#+ ]]
+ [[ general_help() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=general_help
+ current_function_name=general_help
+ extracted_markdown='## general_help\n# Function: general_help\n `general_help` - Display general help options for the '\''help'\'' command.\n## Description\n- **Purpose**:\n  - Provide an overview of the available help commands.\n- **Usage**: \n  - `general_help`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the general help commands available.\n- **Exceptions**: \n  - None\n'
+ echo -e '## general_help\n# Function: general_help\n `general_help` - Display general help options for the '\''help'\'' command.\n## Description\n- **Purpose**:\n  - Provide an overview of the available help commands.\n- **Usage**: \n  - `general_help`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the general help commands available.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo -e "\nAvailable commands for '\''vhelp'\'':\n"'
LINE:     echo -e "\nAvailable commands for 'vhelp':\n"
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo -e "\nAvailable commands for '\''vhelp'\'':\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "  - **functions**:         List available functions and their purpose."'
LINE:     echo "  - **functions**:         List available functions and their purpose."
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nAvailable commands for 'vhelp':\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "  - **functions**:         List available functions and their purpose." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "  - **functions**:         List available functions and their purpose."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "  - **scripts**:           List available scripts and their purpose."'
LINE:     echo "  - **scripts**:           List available scripts and their purpose."
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "  - **functions**:         List available functions and their purpose." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "  - **scripts**:           List available scripts and their purpose." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "  - **scripts**:           List available scripts and their purpose."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "  - **generate_markdown**: Generate Markdown documentation for all functions."'
LINE:     echo "  - **generate_markdown**: Generate Markdown documentation for all functions."
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "  - **scripts**:           List available scripts and their purpose." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "  - **generate_markdown**: Generate Markdown documentation for all functions."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo -e "\nTo get help on a specific function, use '\''vhelp function_name'\''.\n"'
LINE:     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n"
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "  - **generate_markdown**: Generate Markdown documentation for all functions." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo -e "\nTo get help on a specific function, use '\''vhelp function_name'\''.\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nTo get help on a specific function, use 'vhelp function_name'.\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: help_scripts'
LINE: # # Function: help_scripts
+ [[ # # Function: help_scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: help_scripts =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: help_scripts\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `help_scripts` - List sourced scripts and their purpose.'
LINE: #  `help_scripts` - List sourced scripts and their purpose.
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_scripts` - List sourced scripts and their purpose. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `help_scripts` - List sourced scripts and their purpose.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Display a list of sourced scripts.'
LINE: #   - Display a list of sourced scripts.
+ [[ #   - Display a list of sourced scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Display a list of sourced scripts. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display a list of sourced scripts. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display a list of sourced scripts. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Display a list of sourced scripts.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `help_scripts`'
LINE: #   - `help_scripts`
+ [[ #   - `help_scripts` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `help_scripts` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_scripts` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_scripts` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `help_scripts`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global'
LINE: #   - Global
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Lists the names of the sourced scripts.'
LINE: #   - Lists the names of the sourced scripts.
+ [[ #   - Lists the names of the sourced scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists the names of the sourced scripts. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the names of the sourced scripts. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the names of the sourced scripts. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Lists the names of the sourced scripts.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: help_scripts() {'
LINE: help_scripts() {
+ [[ help_scripts() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ help_scripts() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_scripts() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_scripts() { =~ ^#+ ]]
+ [[ help_scripts() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=help_scripts
+ current_function_name=help_scripts
+ extracted_markdown='## help_scripts\n# Function: help_scripts\n `help_scripts` - List sourced scripts and their purpose.\n## Description\n- **Purpose**:\n  - Display a list of sourced scripts.\n- **Usage**: \n  - `help_scripts`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the names of the sourced scripts.\n- **Exceptions**: \n  - None\n'
+ echo -e '## help_scripts\n# Function: help_scripts\n `help_scripts` - List sourced scripts and their purpose.\n## Description\n- **Purpose**:\n  - Display a list of sourced scripts.\n- **Usage**: \n  - `help_scripts`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists the names of the sourced scripts.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local script'
LINE:     local script
+ [[     local script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local script'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local markdown_file'
LINE:     local markdown_file
+ [[     local markdown_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local markdown_file =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local markdown_file'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local description'
LINE:     local description
+ [[     local description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local markdown_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local description =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local description'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local description =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo -e "\nList of sourced scripts and their purpose:\n"'
LINE:     echo -e "\nList of sourced scripts and their purpose:\n"
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo -e "\nList of sourced scripts and their purpose:\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nList of sourced scripts and their purpose:\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for script in "${sorted_script_names[@]}"; do'
LINE:     for script in "${sorted_script_names[@]}"; do
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for script in "${sorted_script_names[@]}"; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for script in "${sorted_script_names[@]}"; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         markdown_file="${__VENV_SCRIPTS[$script]}"'
LINE:         markdown_file="${__VENV_SCRIPTS[$script]}"
+ [[         markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for script in "${sorted_script_names[@]}"; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        markdown_file="${__VENV_SCRIPTS[$script]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ -f "$markdown_file" ]]; then'
LINE:         if [[ -f "$markdown_file" ]]; then
+ [[         if [[ -f "$markdown_file" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         if [[ -f "$markdown_file" ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "$markdown_file" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ -f "$markdown_file" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ -f "$markdown_file" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             description=$(head -n 1 "$markdown_file")'
LINE:             description=$(head -n 1 "$markdown_file")
+ [[             description=$(head -n 1 "$markdown_file") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "$markdown_file" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ -f "$markdown_file" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description=$(head -n 1 "$markdown_file") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             description=$(head -n 1 "$markdown_file") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            description=$(head -n 1 "$markdown_file")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             description="${description#*- }"'
LINE:             description="${description#*- }"
+ [[             description="${description#*- }" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description=$(head -n 1 "$markdown_file") =~ ^}$ ]]
+ [[ false == false ]]
+ [[             description=$(head -n 1 "$markdown_file") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description="${description#*- }" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             description="${description#*- }" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            description="${description#*- }"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}"'
LINE:             printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}"
+ [[             printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description="${description#*- }" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             description="${description#*- }" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         else'
LINE:         else
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             printf "  * %-$((${longest_script_name}+1))s %s\n" "${script}:" "${description}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             printf "  - %s - No description available\n" "$script"'
LINE:             printf "  - %s - No description available\n" "$script"
+ [[             printf "  - %s - No description available\n" "$script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  - %s - No description available\n" "$script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             printf "  - %s - No description available\n" "$script" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            printf "  - %s - No description available\n" "$script"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  - %s - No description available\n" "$script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             printf "  - %s - No description available\n" "$script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo -e "\nUse '\''vhelp \`script_name\` for detailed information on each script"'
LINE:     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script"
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo -e "\nUse '\''vhelp \`script_name\` for detailed information on each script"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nUse 'vhelp \`script_name\` for detailed information on each script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: specific_script_help'
LINE: # # Function: specific_script_help
+ [[ # # Function: specific_script_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: specific_script_help =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: specific_script_help\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `specific_script_help` - Provide detailed documentation for a given script.'
LINE: #  `specific_script_help` - Provide detailed documentation for a given script.
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_script_help` - Provide detailed documentation for a given script. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `specific_script_help` - Provide detailed documentation for a given script.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Display documentation for a specific script.'
LINE: #   - Display documentation for a specific script.
+ [[ #   - Display documentation for a specific script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific script. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Display documentation for a specific script.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `specific_script_help <script_name>`'
LINE: #   - `specific_script_help <script_name>`
+ [[ #   - `specific_script_help <script_name>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `specific_script_help <script_name>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_script_help <script_name>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_script_help <script_name>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `specific_script_help <script_name>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global'
LINE: #   - Global
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `script_name`: The name of the script to get help for.'
LINE: #   - `script_name`: The name of the script to get help for.
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to get help for. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `script_name`: The name of the script to get help for.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Displays the documentation for the specified script.'
LINE: #   - Displays the documentation for the specified script.
+ [[ #   - Displays the documentation for the specified script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified script. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified script. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified script. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Displays the documentation for the specified script.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Displays a message if the script is unknown or has no documentation.'
LINE: #   - Displays a message if the script is unknown or has no documentation.
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays a message if the script is unknown or has no documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Displays a message if the script is unknown or has no documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: specific_script_help() {'
LINE: specific_script_help() {
+ [[ specific_script_help() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ specific_script_help() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_script_help() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_script_help() { =~ ^#+ ]]
+ [[ specific_script_help() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=specific_script_help
+ current_function_name=specific_script_help
+ extracted_markdown='## specific_script_help\n# Function: specific_script_help\n `specific_script_help` - Provide detailed documentation for a given script.\n## Description\n- **Purpose**:\n  - Display documentation for a specific script.\n- **Usage**: \n  - `specific_script_help <script_name>`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `script_name`: The name of the script to get help for.\n- **Output**: \n  - Displays the documentation for the specified script.\n- **Exceptions**: \n  - Displays a message if the script is unknown or has no documentation.\n'
+ echo -e '## specific_script_help\n# Function: specific_script_help\n `specific_script_help` - Provide detailed documentation for a given script.\n## Description\n- **Purpose**:\n  - Display documentation for a specific script.\n- **Usage**: \n  - `specific_script_help <script_name>`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `script_name`: The name of the script to get help for.\n- **Output**: \n  - Displays the documentation for the specified script.\n- **Exceptions**: \n  - Displays a message if the script is unknown or has no documentation.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ '' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local script=$1'
LINE:     local script=$1
+ [[     local script=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local script=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ -v __VENV_SCRIPTS[$script] ]]; then'
LINE:     if [[ -v __VENV_SCRIPTS[$script] ]]; then
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ -v __VENV_SCRIPTS[$script] ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local markdown_file="${__VENV_SCRIPTS[$script]}"'
LINE:         local markdown_file="${__VENV_SCRIPTS[$script]}"
+ [[         local markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -v __VENV_SCRIPTS[$script] ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local markdown_file="${__VENV_SCRIPTS[$script]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ -f "${markdown_file}" ]]; then'
LINE:         if [[ -f "${markdown_file}" ]]; then
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local markdown_file="${__VENV_SCRIPTS[$script]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ -f "${markdown_file}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ -f "${markdown_file}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ${MD_PROCESSOR:-cat} "${markdown_file}"'
LINE:             ${MD_PROCESSOR:-cat} "${markdown_file}"
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ${MD_PROCESSOR:-cat} "${markdown_file}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         else'
LINE:         else
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "No documentation available for '\''${script}'\''."'
LINE:             echo "No documentation available for '${script}'."
+ [[             echo "No documentation available for '${script}'." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${script}'." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "No documentation available for '${script}'." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "No documentation available for '\''${script}'\''."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${script}'." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "No documentation available for '${script}'." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return'
LINE:         return
+ [[         return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Unknown script: '\''${script}'\''"'
LINE:     echo "Unknown script: '${script}'"
+ [[     echo "Unknown script: '${script}'" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown script: '${script}'" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Unknown script: '${script}'" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Unknown script: '\''${script}'\''"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     general_help'
LINE:     general_help
+ [[     general_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown script: '${script}'" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Unknown script: '${script}'" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     general_help =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    general_help'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^}$ ]]
+ [[ false == false ]]
+ [[     general_help =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: specific_function_help'
LINE: # # Function: specific_function_help
+ [[ # # Function: specific_function_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: specific_function_help =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: specific_function_help\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `specific_function_help` - Provide detailed documentation for a given function.'
LINE: #  `specific_function_help` - Provide detailed documentation for a given function.
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `specific_function_help` - Provide detailed documentation for a given function. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `specific_function_help` - Provide detailed documentation for a given function.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Display documentation for a specific function.'
LINE: #   - Display documentation for a specific function.
+ [[ #   - Display documentation for a specific function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Display documentation for a specific function. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Display documentation for a specific function.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `specific_function_help "function_name"`'
LINE: #   - `specific_function_help "function_name"`
+ [[ #   - `specific_function_help "function_name"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `specific_function_help "function_name"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_function_help "function_name"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `specific_function_help "function_name"` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `specific_function_help "function_name"`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global'
LINE: #   - Global
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `function_name`: The name of the function to get help for.'
LINE: #   - `function_name`: The name of the function to get help for.
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name`: The name of the function to get help for. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `function_name`: The name of the function to get help for.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Displays the documentation for the specified function.'
LINE: #   - Displays the documentation for the specified function.
+ [[ #   - Displays the documentation for the specified function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays the documentation for the specified function. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Displays the documentation for the specified function.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Displays general help if the function is unknown or internal.'
LINE: #   - Displays general help if the function is unknown or internal.
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Displays general help if the function is unknown or internal. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Displays general help if the function is unknown or internal.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: specific_function_help() {'
LINE: specific_function_help() {
+ [[ specific_function_help() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ specific_function_help() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_function_help() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ specific_function_help() { =~ ^#+ ]]
+ [[ specific_function_help() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=specific_function_help
+ current_function_name=specific_function_help
+ extracted_markdown='## specific_function_help\n# Function: specific_function_help\n `specific_function_help` - Provide detailed documentation for a given function.\n## Description\n- **Purpose**:\n  - Display documentation for a specific function.\n- **Usage**: \n  - `specific_function_help "function_name"`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `function_name`: The name of the function to get help for.\n- **Output**: \n  - Displays the documentation for the specified function.\n- **Exceptions**: \n  - Displays general help if the function is unknown or internal.\n'
+ echo -e '## specific_function_help\n# Function: specific_function_help\n `specific_function_help` - Provide detailed documentation for a given function.\n## Description\n- **Purpose**:\n  - Display documentation for a specific function.\n- **Usage**: \n  - `specific_function_help "function_name"`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `function_name`: The name of the function to get help for.\n- **Output**: \n  - Displays the documentation for the specified function.\n- **Exceptions**: \n  - Displays general help if the function is unknown or internal.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local func=$1'
LINE:     local func=$1
+ [[     local func=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local func=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local func=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local func=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local func=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local func=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local func=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then'
LINE:     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "The function '\''${func}'\'' is for internal use. Please refer to the system documentation."'
LINE:         echo "The function '${func}' is for internal use. Please refer to the system documentation."
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${func} " ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "The function '\''${func}'\'' is for internal use. Please refer to the system documentation."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return'
LINE:         return
+ [[         return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "The function '${func}' is for internal use. Please refer to the system documentation." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo ""'
LINE:     echo ""
+ [[     echo "" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo ""'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ -v __VENV_FUNCTIONS[$func] ]]; then'
LINE:     if [[ -v __VENV_FUNCTIONS[$func] ]]; then
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ -v __VENV_FUNCTIONS[$func] ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local markdown_file="${__VENV_FUNCTIONS[$func]}"'
LINE:         local markdown_file="${__VENV_FUNCTIONS[$func]}"
+ [[         local markdown_file="${__VENV_FUNCTIONS[$func]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -v __VENV_FUNCTIONS[$func] ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_FUNCTIONS[$func]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local markdown_file="${__VENV_FUNCTIONS[$func]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local markdown_file="${__VENV_FUNCTIONS[$func]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ -f "${markdown_file}" ]]; then'
LINE:         if [[ -f "${markdown_file}" ]]; then
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local markdown_file="${__VENV_FUNCTIONS[$func]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local markdown_file="${__VENV_FUNCTIONS[$func]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ -f "${markdown_file}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ -f "${markdown_file}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ${MD_PROCESSOR:-cat} "${markdown_file}"'
LINE:             ${MD_PROCESSOR:-cat} "${markdown_file}"
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ${MD_PROCESSOR:-cat} "${markdown_file}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         else'
LINE:         else
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ${MD_PROCESSOR:-cat} "${markdown_file}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "No documentation available for '\''${func}'\''."'
LINE:             echo "No documentation available for '${func}'."
+ [[             echo "No documentation available for '${func}'." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${func}'." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "No documentation available for '${func}'." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "No documentation available for '\''${func}'\''."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "No documentation available for '${func}'." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "No documentation available for '${func}'." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return'
LINE:         return
+ [[         return =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Unknown function: '\''${func}'\''"'
LINE:     echo "Unknown function: '${func}'"
+ [[     echo "Unknown function: '${func}'" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown function: '${func}'" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Unknown function: '${func}'" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Unknown function: '\''${func}'\''"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     general_help'
LINE:     general_help
+ [[     general_help =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Unknown function: '${func}'" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Unknown function: '${func}'" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     general_help =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    general_help'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     general_help =~ ^}$ ]]
+ [[ false == false ]]
+ [[     general_help =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: help_functions'
LINE: # # Function: help_functions
+ [[ # # Function: help_functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: help_functions =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: help_functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `help_functions` - List available functions and how to get their documentation.'
LINE: #  `help_functions` - List available functions and how to get their documentation.
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `help_functions` - List available functions and how to get their documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `help_functions` - List available functions and how to get their documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Provide a list of available functions and guidance on getting detailed documentation.'
LINE: #   - Provide a list of available functions and guidance on getting detailed documentation.
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Provide a list of available functions and guidance on getting detailed documentation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Provide a list of available functions and guidance on getting detailed documentation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**:'
LINE: # - **Usage**:
+ [[ # - **Usage**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `help_functions`'
LINE: #   - `help_functions`
+ [[ #   - `help_functions` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `help_functions` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_functions` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `help_functions` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `help_functions`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global'
LINE: #   - Global
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Lists available functions and how to get more information about them.'
LINE: #   - Lists available functions and how to get more information about them.
+ [[ #   - Lists available functions and how to get more information about them. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists available functions and how to get more information about them. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists available functions and how to get more information about them. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists available functions and how to get more information about them. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Lists available functions and how to get more information about them.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.'
LINE: #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: help_functions() {'
LINE: help_functions() {
+ [[ help_functions() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ help_functions() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_functions() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ help_functions() { =~ ^#+ ]]
+ [[ help_functions() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=help_functions
+ current_function_name=help_functions
+ extracted_markdown='## help_functions\n# Function: help_functions\n `help_functions` - List available functions and how to get their documentation.\n## Description\n- **Purpose**:\n  - Provide a list of available functions and guidance on getting detailed documentation.\n- **Usage**:\n  - `help_functions`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists available functions and how to get more information about them.\n- **Exceptions**: \n  - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.\n'
+ echo -e '## help_functions\n# Function: help_functions\n `help_functions` - List available functions and how to get their documentation.\n## Description\n- **Purpose**:\n  - Provide a list of available functions and guidance on getting detailed documentation.\n- **Usage**:\n  - `help_functions`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Lists available functions and how to get more information about them.\n- **Exceptions**: \n  - None. However, it skips functions listed in `__VENV_INTERNAL_FUNCTIONS` and those already in `__VENV_FUNCTIONS`.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     set x'
LINE:     set x
+ [[     set x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     set x =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     set x =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    set x'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local function'
LINE:     local function
+ [[     local function =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set x =~ ^}$ ]]
+ [[ false == false ]]
+ [[     set x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local function =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local function'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local markdown_file'
LINE:     local markdown_file
+ [[     local markdown_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local function =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local function =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local markdown_file =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local markdown_file'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local description'
LINE:     local description
+ [[     local description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local markdown_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local markdown_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local description =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local description'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local line'
LINE:     local line
+ [[     local line =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local description =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local description =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local line =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local line'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local line =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local line =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo -e "\nAvailable functions and their brief descriptions:\n"'
LINE:     echo -e "\nAvailable functions and their brief descriptions:\n"
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo -e "\nAvailable functions and their brief descriptions:\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nAvailable functions and their brief descriptions:\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for function in ${sorted_function_names[@]}; do'
LINE:     for function in ${sorted_function_names[@]}; do
+ [[     for function in ${sorted_function_names[@]}; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for function in ${sorted_function_names[@]}; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for function in ${sorted_function_names[@]}; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Skip internal functions'
LINE:         # Skip internal functions
+ [[         # Skip internal functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for function in ${sorted_function_names[@]}; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Skip internal functions =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Skip internal functions =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Skip internal functions'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then'
LINE:         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Skip internal functions =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Skip internal functions =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             continue'
LINE:             continue
+ [[             continue =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ " ${__VENV_INTERNAL_FUNCTIONS[@]} " =~ " ${function} " ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             continue =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             continue =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            continue'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             continue =~ ^}$ ]]
+ [[ false == false ]]
+ [[             continue =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         markdown_file="${__VENV_FUNCTIONS[$function]}"'
LINE:         markdown_file="${__VENV_FUNCTIONS[$function]}"
+ [[         markdown_file="${__VENV_FUNCTIONS[$function]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         markdown_file="${__VENV_FUNCTIONS[$function]}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         markdown_file="${__VENV_FUNCTIONS[$function]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         markdown_file="${__VENV_FUNCTIONS[$function]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        markdown_file="${__VENV_FUNCTIONS[$function]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         markdown_file="${__VENV_FUNCTIONS[$function]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         markdown_file="${__VENV_FUNCTIONS[$function]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ -f "${markdown_file}" ]]; then'
LINE:         if [[ -f "${markdown_file}" ]]; then
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ -f "${markdown_file}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ -f "${markdown_file}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             description="$(head -n 3 "${markdown_file}" | tail -n 1)"'
LINE:             description="$(head -n 3 "${markdown_file}" | tail -n 1)"
+ [[             description="$(head -n 3 "${markdown_file}" | tail -n 1)" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ -f "${markdown_file}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description="$(head -n 3 "${markdown_file}" | tail -n 1)" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             description="$(head -n 3 "${markdown_file}" | tail -n 1)" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            description="$(head -n 3 "${markdown_file}" | tail -n 1)"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             description="${description#*- }"'
LINE:             description="${description#*- }"
+ [[             description="${description#*- }" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description="$(head -n 3 "${markdown_file}" | tail -n 1)" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             description="$(head -n 3 "${markdown_file}" | tail -n 1)" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description="${description#*- }" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             description="${description#*- }" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            description="${description#*- }"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}"'
LINE:             printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}"
+ [[             printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             description="${description#*- }" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             description="${description#*- }" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         else'
LINE:         else
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             printf "  * %-${longest_function_name}s %s\n" "${function}:" "${description}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             printf "  * %-${longest_function_name}s No description available\n" "${function}"'
LINE:             printf "  * %-${longest_function_name}s No description available\n" "${function}"
+ [[             printf "  * %-${longest_function_name}s No description available\n" "${function}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  * %-${longest_function_name}s No description available\n" "${function}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             printf "  * %-${longest_function_name}s No description available\n" "${function}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            printf "  * %-${longest_function_name}s No description available\n" "${function}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             printf "  * %-${longest_function_name}s No description available\n" "${function}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             printf "  * %-${longest_function_name}s No description available\n" "${function}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo -e "\nUse '\''vhelp \`function_name\`'\'' for detailed information on each function.\n"'
LINE:     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n"
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo -e "\nUse '\''vhelp \`function_name\`'\'' for detailed information on each function.\n"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     set +x'
LINE:     set +x
+ [[     set +x =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo -e "\nUse 'vhelp \`function_name\`' for detailed information on each function.\n" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set +x =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     set +x =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    set +x'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     set +x =~ ^}$ ]]
+ [[ false == false ]]
+ [[     set +x =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: vhelp'
LINE: # # Function: vhelp
+ [[ # # Function: vhelp =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vhelp =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: vhelp\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `vhelp` - Main entry point for the help system.'
LINE: #  `vhelp` - Main entry point for the help system.
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `vhelp` - Main entry point for the help system. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `vhelp` - Main entry point for the help system.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Facilitates the help system by initializing and delegating to other help functions.'
LINE: #   - Facilitates the help system by initializing and delegating to other help functions.
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Facilitates the help system by initializing and delegating to other help functions. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Facilitates the help system by initializing and delegating to other help functions.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vhelp [subcommand]`'
LINE: #   - `vhelp [subcommand]`
+ [[ #   - `vhelp [subcommand]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vhelp [subcommand]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp [subcommand]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vhelp [subcommand]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `vhelp [subcommand]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**:'
LINE: # - **Scope**:
+ [[ # - **Scope**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Global'
LINE: #   - Global
+ [[ #   - Global =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Global =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Global\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `subcommand` (optional): The specific help topic or function name.'
LINE: #   - `subcommand` (optional): The specific help topic or function name.
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `subcommand` (optional): The specific help topic or function name. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `subcommand` (optional): The specific help topic or function name.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Help information based on the optional subcommand, or general help if none provided.'
LINE: #   - Help information based on the optional subcommand, or general help if none provided.
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Help information based on the optional subcommand, or general help if none provided. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Help information based on the optional subcommand, or general help if none provided.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: vhelp() {'
LINE: vhelp() {
+ [[ vhelp() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vhelp() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vhelp() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vhelp() { =~ ^#+ ]]
+ [[ vhelp() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=vhelp
+ current_function_name=vhelp
+ extracted_markdown='## vhelp\n# Function: vhelp\n `vhelp` - Main entry point for the help system.\n## Description\n- **Purpose**:\n  - Facilitates the help system by initializing and delegating to other help functions.\n- **Usage**: \n  - `vhelp [subcommand]`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `subcommand` (optional): The specific help topic or function name.\n- **Output**: \n  - Help information based on the optional subcommand, or general help if none provided.\n- **Exceptions**: \n  - None\n'
+ echo -e '## vhelp\n# Function: vhelp\n `vhelp` - Main entry point for the help system.\n## Description\n- **Purpose**:\n  - Facilitates the help system by initializing and delegating to other help functions.\n- **Usage**: \n  - `vhelp [subcommand]`\n- **Scope**:\n  - Global\n- **Input Parameters**: \n  - `subcommand` (optional): The specific help topic or function name.\n- **Output**: \n  - Help information based on the optional subcommand, or general help if none provided.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local subcommand=$1'
LINE:     local subcommand=$1
+ [[     local subcommand=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local subcommand=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local subcommand=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local subcommand=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local subcommand=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local is_script=0'
LINE:     local is_script=0
+ [[     local is_script=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local subcommand=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local subcommand=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local is_script=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local is_script=0 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local is_script=0'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local md_command'
LINE:     local md_command
+ [[     local md_command =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local is_script=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local is_script=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local md_command =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local md_command =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local md_command'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local md_command =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local md_command =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Initialize help, if it hasn'\''t been already'
LINE:     # Initialize help, if it hasn't been already
+ [[     # Initialize help, if it hasn't been already =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Initialize help, if it hasn't been already =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Initialize help, if it hasn't been already =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Initialize help, if it hasn't been already =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Initialize help, if it hasn'\''t been already'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then'
LINE:     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Initialize help, if it hasn't been already =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Initialize help, if it hasn't been already =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         init_help_system'
LINE:         init_help_system
+ [[         init_help_system =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ -z "${__VENV_FUNCTIONS[*]}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         init_help_system =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         init_help_system =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        init_help_system'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         init_help_system =~ ^}$ ]]
+ [[ false == false ]]
+ [[         init_help_system =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Use the markdown processor if available, otherwise default to '\''cat'\'''
LINE:     # Use the markdown processor if available, otherwise default to 'cat'
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Use the markdown processor if available, otherwise default to 'cat' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Use the markdown processor if available, otherwise default to '\''cat'\'''
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat"'
LINE:     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat"
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Use the markdown processor if available, otherwise default to 'cat' =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     command -v ${MD_PROCESSOR} > /dev/null 2>&1 && md_command="${MD_PROCESSOR}" || md_command="cat" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Check if the subcommand is a known script name (without the .sh extension)'
LINE:     # Check if the subcommand is a known script name (without the .sh extension)
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the subcommand is a known script name (without the .sh extension) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Check if the subcommand is a known script name (without the .sh extension)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for script in ${__VENV_SOURCED_LIST[@]}; do'
LINE:     for script in ${__VENV_SOURCED_LIST[@]}; do
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the subcommand is a known script name (without the .sh extension) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for script in ${__VENV_SOURCED_LIST[@]}; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ "${script##*/}" == "${subcommand}" ]]; then'
LINE:         if [[ "${script##*/}" == "${subcommand}" ]]; then
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for script in ${__VENV_SOURCED_LIST[@]}; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ "${script##*/}" == "${subcommand}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             is_script=1'
LINE:             is_script=1
+ [[             is_script=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ "${script##*/}" == "${subcommand}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             is_script=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             is_script=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            is_script=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             break'
LINE:             break
+ [[             break =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             is_script=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             is_script=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             break =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             break =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            break'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             break =~ ^}$ ]]
+ [[ false == false ]]
+ [[             break =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     case "${subcommand}" in'
LINE:     case "${subcommand}" in
+ [[     case "${subcommand}" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     case "${subcommand}" in =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "${subcommand}" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "${subcommand}" in =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    case "${subcommand}" in'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         "generate_markdown")'
LINE:         "generate_markdown")
+ [[         "generate_markdown") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "${subcommand}" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "${subcommand}" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "generate_markdown") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "generate_markdown") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        "generate_markdown")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "Starting markdown generation..."'
LINE:             echo "Starting markdown generation..."
+ [[             echo "Starting markdown generation..." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "generate_markdown") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "generate_markdown") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Starting markdown generation..." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "Starting markdown generation..." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "Starting markdown generation..."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             generate_markdown || errno_exit 1'
LINE:             generate_markdown || errno_exit 1
+ [[             generate_markdown || errno_exit 1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Starting markdown generation..." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "Starting markdown generation..." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             generate_markdown || errno_exit 1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             generate_markdown || errno_exit 1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            generate_markdown || errno_exit 1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "Markdown generation complete."'
LINE:             echo "Markdown generation complete."
+ [[             echo "Markdown generation complete." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             generate_markdown || errno_exit 1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             generate_markdown || errno_exit 1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Markdown generation complete." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "Markdown generation complete." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "Markdown generation complete."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Markdown generation complete." =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "Markdown generation complete." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         "functions")'
LINE:         "functions")
+ [[         "functions") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "functions") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "functions") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        "functions")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             help_functions | ${md_command}'
LINE:             help_functions | ${md_command}
+ [[             help_functions | ${md_command} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "functions") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "functions") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_functions | ${md_command} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             help_functions | ${md_command} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            help_functions | ${md_command}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_functions | ${md_command} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             help_functions | ${md_command} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         "scripts")'
LINE:         "scripts")
+ [[         "scripts") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "scripts") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "scripts") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        "scripts")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             help_scripts | ${md_command}'
LINE:             help_scripts | ${md_command}
+ [[             help_scripts | ${md_command} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "scripts") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "scripts") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_scripts | ${md_command} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             help_scripts | ${md_command} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            help_scripts | ${md_command}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             help_scripts | ${md_command} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             help_scripts | ${md_command} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         "")'
LINE:         "")
+ [[         "") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        "")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             general_help | ${md_command}'
LINE:             general_help | ${md_command}
+ [[             general_help | ${md_command} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             general_help | ${md_command} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             general_help | ${md_command} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            general_help | ${md_command}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             general_help | ${md_command} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             general_help | ${md_command} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         *)'
LINE:         *)
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             if (( is_script )); then'
LINE:             if (( is_script )); then
+ [[             if (( is_script )); then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if (( is_script )); then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             if (( is_script )); then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            if (( is_script )); then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22'
LINE:                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if (( is_script )); then =~ ^}$ ]]
+ [[ false == false ]]
+ [[             if (( is_script )); then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                specific_script_help "${subcommand}" | ${md_command} || errno_exit 22'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             else'
LINE:             else
+ [[             else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 specific_script_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22'
LINE:                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^}$ ]]
+ [[ false == false ]]
+ [[             else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                specific_function_help "${subcommand}" | ${md_command} || errno_exit 22'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             fi'
LINE:             fi
+ [[             fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 specific_function_help "${subcommand}" | ${md_command} || errno_exit 22 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[             fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     esac'
LINE:     esac
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ set +x
********************** Processing script name: /Users/mps/projects/AI-PROJECTS/venv-build-checker/bin/shinclude/init_env.sh
********************** Processing script markdown file: docs/shdoc/bin/shinclude/scripts/init_env.sh.md
Generating markdown for script: init_env.sh
+ IFS=
+ read -r line
+ echo 'LINE: #!/bin/bash'
LINE: #!/bin/bash
+ [[ #!/bin/bash =~ ^#! ]]
+ echo '**************************  Found shebang line'
**************************  Found shebang line
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Found blank or single comment line at beginning of script'
**************************  Found blank or single comment line at beginning of script
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Script: init_env.sh'
LINE: # # Script: init_env.sh
+ [[ # # Script: init_env.sh =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # Script: init_env.sh =~ ^[[:space:]]*$ ]]
+ [[ # # Script: init_env.sh =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # Script: init_env.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='# Script: init_env.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `init_env.sh` - Initialize Environment and Source Utility Scripts'
LINE: # `init_env.sh` - Initialize Environment and Source Utility Scripts
+ [[ # `init_env.sh` - Initialize Environment and Source Utility Scripts =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # `init_env.sh` - Initialize Environment and Source Utility Scripts =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='`init_env.sh` - Initialize Environment and Source Utility Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.'
LINE: #   - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.
+ [[ #   - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:'
LINE: #   - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:
+ [[ #   - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```bash'
LINE: #     ```bash
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     source /path/to/init_env.sh'
LINE: #     source /path/to/init_env.sh
+ [[ #     source /path/to/init_env.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source /path/to/init_env.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    source /path/to/init_env.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```'
LINE: #     ```
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None. The script operates without requiring any input parameters.'
LINE: #   - None. The script operates without requiring any input parameters.
+ [[ #   - None. The script operates without requiring any input parameters. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. The script operates without requiring any input parameters. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - None. The script operates without requiring any input parameters.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.'
LINE: #   - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.
+ [[ #   - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.'
LINE: #   - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.
+ [[ #   - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Dependencies'
LINE: # ## Dependencies
+ [[ # ## Dependencies =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Dependencies =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## Dependencies\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - Utility scripts located in `__VENV_INCLUDE`:'
LINE: # - Utility scripts located in `__VENV_INCLUDE`:
+ [[ # - Utility scripts located in `__VENV_INCLUDE`: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - Utility scripts located in `__VENV_INCLUDE`: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- Utility scripts located in `__VENV_INCLUDE`:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `util_funcs.sh`'
LINE: #   - `util_funcs.sh`
+ [[ #   - `util_funcs.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `util_funcs.sh` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `util_funcs.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `help_sys.sh`'
LINE: #   - `help_sys.sh`
+ [[ #   - `help_sys.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `help_sys.sh` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `help_sys.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `errno.sh`'
LINE: #   - `errno.sh`
+ [[ #   - `errno.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `errno.sh` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `errno.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `venv_funcs.sh`'
LINE: #   - `venv_funcs.sh`
+ [[ #   - `venv_funcs.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `venv_funcs.sh` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `venv_funcs.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `wrapper_funcs.sh`'
LINE: #   - `wrapper_funcs.sh`
+ [[ #   - `wrapper_funcs.sh` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `wrapper_funcs.sh` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `wrapper_funcs.sh`\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - Conda environment'
LINE: # - Conda environment
+ [[ # - Conda environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - Conda environment =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- Conda environment\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  End of script documentation'
**************************  End of script documentation
+ echo -e '# init_env.sh\n## Description\n# Script: init_env.sh\n`init_env.sh` - Initialize Environment and Source Utility Scripts\n## Description\n- **Purpose**: \n  - Initializes the environment for bash scripting, particularly in the context of managing virtual environments. It sets up the necessary environment and sources utility scripts required for the proper functioning of other scripts in the system. It is responsible for orchestrating the environment setup in the correct order and can also be used to source additional environment or setup scripts as required, such as `.env.local` files.\n- **Usage**: \n  - Source this script in other bash scripts to import the necessary environment and utility functions. It also contains a function that can be called to perform environment setup tasks in user scripts. To use it, include the following line in your bash scripts:\n    ```bash\n    source /path/to/init_env.sh\n    ```\n- **Input Parameters**: \n  - None. The script operates without requiring any input parameters.\n- **Output**: \n  - Sets up the environment, sources utility scripts, and prepares the system for managing virtual environments.\n- **Exceptions**: \n  - Exits with code 1 if it fails to find any of the required scripts or if any part of the initialization process fails.\n#\n## Dependencies\n- Utility scripts located in `__VENV_INCLUDE`:\n  - `util_funcs.sh`\n  - `help_sys.sh`\n  - `errno.sh`\n  - `venv_funcs.sh`\n  - `wrapper_funcs.sh`\n- Conda environment\n'
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Determine the real path of the script'
LINE: # Determine the real path of the script
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Determine the real path of the script =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Determine the real path of the script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Don'\''t source this script if it'\''s already been sourced.'
LINE: # Don't source this script if it's already been sourced.
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: echo "Sourcing: ${THIS_SCRIPT}"'
LINE: echo "Sourcing: ${THIS_SCRIPT}"
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Extract script name, directory, and arguments'
LINE: # Extract script name, directory, and arguments
+ [[ # Extract script name, directory, and arguments =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Extract script name, directory, and arguments =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Extract script name, directory, and arguments\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
LINE: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#+ ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")
+ previous_line='__VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_BASE=$(dirname "${__VENV_BIN}")'
LINE: __VENV_BASE=$(dirname "${__VENV_BIN}")
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#+ ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")
+ previous_line='__VENV_BASE=$(dirname "${__VENV_BIN}")'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_ARGS=$*'
LINE: __VENV_ARGS=$*
+ [[ __VENV_ARGS=$* =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#+ ]]
+ [[ __VENV_ARGS=$* =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_ARGS=$* =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_ARGS=$*'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_ARGS=$*'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_ARGS=$*'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_ARGS=$*
+ previous_line='__VENV_ARGS=$*'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
LINE: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_ARGS=$* =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#+ ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"
+ previous_line='__VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INTERNAL_FUNCTIONS=('
LINE: __VENV_INTERNAL_FUNCTIONS=(
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=(
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ IFS=
+ read -r line
+ echo 'LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}'
LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "source_util_script"'
LINE:     "source_util_script"
+ [[     "source_util_script" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "source_util_script" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "source_util_script" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "source_util_script"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: )'
LINE: )
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "source_util_script" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "source_util_script" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __rc__=0'
LINE: __rc__=0
+ [[ __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __rc__=0 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __rc__=0 =~ ^[a-zA-Z_#] ]]
+ [[ __rc__=0 =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __rc__=0'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __rc__=0'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __rc__=0'
venv_funcs.sh WARNING(30): Invalid line type found: __rc__=0
+ previous_line=__rc__=0
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: source_util_script'
LINE: # # Function: source_util_script
+ [[ # # Function: source_util_script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: source_util_script =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: source_util_script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #  `source_util_script` - Sources a utility script from the specified directory.'
LINE: #  `source_util_script` - Sources a utility script from the specified directory.
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #  `source_util_script` - Sources a utility script from the specified directory. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+=' `source_util_script` - Sources a utility script from the specified directory.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.'
LINE: #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources a utility script from the specified directory. It's a helper function used within the `init_env.sh` script to modularly load additional scripts as needed. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `source_util_script "script_name"`'
LINE: #   - `source_util_script "script_name"`
+ [[ #   - `source_util_script "script_name"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `source_util_script "script_name"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_util_script "script_name"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_util_script "script_name"` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `source_util_script "script_name"`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `script_name`: The name of the script to source (without the `.sh` extension).'
LINE: #   - `script_name`: The name of the script to source (without the `.sh` extension).
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `script_name`: The name of the script to source (without the `.sh` extension). =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `script_name`: The name of the script to source (without the `.sh` extension).\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.'
LINE: #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.'
LINE: #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: source_util_script() {'
LINE: source_util_script() {
+ [[ source_util_script() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script() { =~ ^#+ ]]
+ [[ source_util_script() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=source_util_script
+ current_function_name=source_util_script
+ extracted_markdown='## source_util_script\n# Function: source_util_script\n `source_util_script` - Sources a utility script from the specified directory.\n## Description\n- **Purpose**: \n  - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.\n- **Usage**: \n  - `source_util_script "script_name"`\n- **Input Parameters**: \n  - `script_name`: The name of the script to source (without the `.sh` extension).\n- **Output**: \n  - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.\n- **Exceptions**: \n  - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.\n'
+ echo -e '## source_util_script\n# Function: source_util_script\n `source_util_script` - Sources a utility script from the specified directory.\n## Description\n- **Purpose**: \n  - Sources a utility script from the specified directory. It'\''s a helper function used within the `init_env.sh` script to modularly load additional scripts as needed.\n- **Usage**: \n  - `source_util_script "script_name"`\n- **Input Parameters**: \n  - `script_name`: The name of the script to source (without the `.sh` extension).\n- **Output**: \n  - Sources the specified script if found. Otherwise, outputs an error message and returns with an exit code of 1.\n- **Exceptions**: \n  - Returns with exit code 1 if the specified script is not found in the directory `__VENV_INCLUDE`.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local script_name="$1"  '
LINE:     local script_name="$1"  
+ [[     local script_name="$1"   =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local script_name="$1"   =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"   =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local script_name="$1"   =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local script_name="$1"  '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \'
LINE:     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local script_name="$1"   =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local script_name="$1"   =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; }'
LINE:         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; }
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -f "${__VENV_INCLUDE}/${script_name}.sh" ] && . "${__VENV_INCLUDE}/${script_name}.sh" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; }'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^}$ ]]
+ [[ false == false ]]
+ [[         || { echo "${__VENV_INCLUDE}: Error sourcing script ${script_name}.sh in INCLUDE_DIR: ${__VENV_INCLUDE}"; return 1; } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Initialize Conda environment'
LINE: # Initialize Conda environment
+ [[ # Initialize Conda environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize Conda environment =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Initialize Conda environment\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __conda_setup="$('\''${HOME}/miniconda3/bin/conda'\'' '\''shell.bash'\'' '\''hook'\'' 2> /dev/null)"'
LINE: __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^#+ ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^[a-zA-Z_#] ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __conda_setup="$('\''${HOME}/miniconda3/bin/conda'\'' '\''shell.bash'\'' '\''hook'\'' 2> /dev/null)"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __conda_setup="$('\''${HOME}/miniconda3/bin/conda'\'' '\''shell.bash'\'' '\''hook'\'' 2> /dev/null)"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __conda_setup="$('\''${HOME}/miniconda3/bin/conda'\'' '\''shell.bash'\'' '\''hook'\'' 2> /dev/null)"'
venv_funcs.sh WARNING(30): Invalid line type found: __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
+ previous_line='__conda_setup="$('\''${HOME}/miniconda3/bin/conda'\'' '\''shell.bash'\'' '\''hook'\'' 2> /dev/null)"'
+ IFS=
+ read -r line
+ echo 'LINE: if [ $? -eq 0 ]; then'
LINE: if [ $? -eq 0 ]; then
+ [[ if [ $? -eq 0 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^#+ ]]
+ [[ if [ $? -eq 0 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! if [ $? -eq 0 ]; then =~ ^[a-zA-Z_#] ]]
+ [[ if [ $? -eq 0 ]; then =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: if [ $? -eq 0 ]; then'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: if [ $? -eq 0 ]; then'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: if [ $? -eq 0 ]; then'
venv_funcs.sh WARNING(30): Invalid line type found: if [ $? -eq 0 ]; then
+ previous_line='if [ $? -eq 0 ]; then'
+ IFS=
+ read -r line
+ echo 'LINE:     eval "$__conda_setup"'
LINE:     eval "$__conda_setup"
+ [[     eval "$__conda_setup" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ if [ $? -eq 0 ]; then =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     eval "$__conda_setup" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     eval "$__conda_setup" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     eval "$__conda_setup" =~ ^#+ ]]
+ [[     eval "$__conda_setup" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "$__conda_setup" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    eval "$__conda_setup"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: else'
LINE: else
+ [[ else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "$__conda_setup" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ else =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ else =~ ^#+ ]]
+ [[ else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! else =~ ^[a-zA-Z_#] ]]
+ [[ else =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: else'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: else'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: else'
venv_funcs.sh WARNING(30): Invalid line type found: else
+ previous_line=else
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then'
LINE:     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ else =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^#+ ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         . "${HOME}/miniconda3/etc/profile.d/conda.sh"'
LINE:         . "${HOME}/miniconda3/etc/profile.d/conda.sh"
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^#+ ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        . "${HOME}/miniconda3/etc/profile.d/conda.sh"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         . "${HOME}/miniconda3/etc/profile.d/conda.sh" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     else =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     else =~ ^#+ ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         export PATH="${HOME}/miniconda3/bin:$PATH"'
LINE:         export PATH="${HOME}/miniconda3/bin:$PATH"
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^#+ ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        export PATH="${HOME}/miniconda3/bin:$PATH"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         export PATH="${HOME}/miniconda3/bin:$PATH" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     fi =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     fi =~ ^#+ ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: fi'
LINE: fi
+ [[ fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ fi =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ fi =~ ^#+ ]]
+ [[ fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! fi =~ ^[a-zA-Z_#] ]]
+ [[ fi =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: fi'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: fi'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: fi'
venv_funcs.sh WARNING(30): Invalid line type found: fi
+ previous_line=fi
+ IFS=
+ read -r line
+ echo 'LINE: unset __conda_setup'
LINE: unset __conda_setup
+ [[ unset __conda_setup =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ fi =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ unset __conda_setup =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ unset __conda_setup =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ unset __conda_setup =~ ^#+ ]]
+ [[ unset __conda_setup =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! unset __conda_setup =~ ^[a-zA-Z_#] ]]
+ [[ unset __conda_setup =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: unset __conda_setup'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: unset __conda_setup'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: unset __conda_setup'
venv_funcs.sh WARNING(30): Invalid line type found: unset __conda_setup
+ previous_line='unset __conda_setup'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ unset __conda_setup =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Source utility functions'
LINE: # Source utility functions
+ [[ # Source utility functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Source utility functions =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Source utility functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: source_util_script "util_funcs"'
LINE: source_util_script "util_funcs"
+ [[ source_util_script "util_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "util_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "util_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "util_funcs" =~ ^#+ ]]
+ [[ source_util_script "util_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "util_funcs" =~ ^[a-zA-Z_#] ]]
+ [[ source_util_script "util_funcs" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: source_util_script "util_funcs"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: source_util_script "util_funcs"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "util_funcs"'
venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "util_funcs"
+ previous_line='source_util_script "util_funcs"'
+ IFS=
+ read -r line
+ echo 'LINE: source_util_script "errno"'
LINE: source_util_script "errno"
+ [[ source_util_script "errno" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "util_funcs" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "errno" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "errno" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "errno" =~ ^#+ ]]
+ [[ source_util_script "errno" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "errno" =~ ^[a-zA-Z_#] ]]
+ [[ source_util_script "errno" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: source_util_script "errno"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: source_util_script "errno"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "errno"'
venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "errno"
+ previous_line='source_util_script "errno"'
+ IFS=
+ read -r line
+ echo 'LINE: source_util_script "help_sys"'
LINE: source_util_script "help_sys"
+ [[ source_util_script "help_sys" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "errno" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "help_sys" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "help_sys" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "help_sys" =~ ^#+ ]]
+ [[ source_util_script "help_sys" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "help_sys" =~ ^[a-zA-Z_#] ]]
+ [[ source_util_script "help_sys" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: source_util_script "help_sys"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: source_util_script "help_sys"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "help_sys"'
venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "help_sys"
+ previous_line='source_util_script "help_sys"'
+ IFS=
+ read -r line
+ echo 'LINE: source_util_script "wrapper_funcs"'
LINE: source_util_script "wrapper_funcs"
+ [[ source_util_script "wrapper_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "help_sys" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^#+ ]]
+ [[ source_util_script "wrapper_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "wrapper_funcs" =~ ^[a-zA-Z_#] ]]
+ [[ source_util_script "wrapper_funcs" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: source_util_script "wrapper_funcs"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: source_util_script "wrapper_funcs"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "wrapper_funcs"'
venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "wrapper_funcs"
+ previous_line='source_util_script "wrapper_funcs"'
+ IFS=
+ read -r line
+ [[ -n source_util_script "venv_funcs" ]]
+ echo 'LINE: source_util_script "venv_funcs"'
LINE: source_util_script "venv_funcs"
+ [[ source_util_script "venv_funcs" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ source_util_script "wrapper_funcs" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ source_util_script "venv_funcs" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "venv_funcs" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ source_util_script "venv_funcs" =~ ^#+ ]]
+ [[ source_util_script "venv_funcs" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! source_util_script "venv_funcs" =~ ^[a-zA-Z_#] ]]
+ [[ source_util_script "venv_funcs" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: source_util_script "venv_funcs"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: source_util_script "venv_funcs"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "venv_funcs"'
venv_funcs.sh WARNING(30): Invalid line type found: source_util_script "venv_funcs"
+ previous_line='source_util_script "venv_funcs"'
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ set +x
********************** Processing script name: /Users/mps/projects/AI-PROJECTS/venv-build-checker/bin/shinclude/util_funcs.sh
********************** Processing script markdown file: docs/shdoc/bin/shinclude/scripts/util_funcs.sh.md
Generating markdown for script: util_funcs.sh
+ IFS=
+ read -r line
+ echo 'LINE: #!/bin/bash'
LINE: #!/bin/bash
+ [[ #!/bin/bash =~ ^#! ]]
+ echo '**************************  Found shebang line'
**************************  Found shebang line
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found blank or single comment line at beginning of script'
**************************  Found blank or single comment line at beginning of script
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # util_funcs.sh - Utility Functions for Bash Scripts'
LINE: # # util_funcs.sh - Utility Functions for Bash Scripts
+ [[ # # util_funcs.sh - Utility Functions for Bash Scripts =~ ^#! ]]
+ [[ true == true ]]
+ [[ # # util_funcs.sh - Utility Functions for Bash Scripts =~ ^[[:space:]]*$ ]]
+ [[ # # util_funcs.sh - Utility Functions for Bash Scripts =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # # util_funcs.sh - Utility Functions for Bash Scripts =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='# util_funcs.sh - Utility Functions for Bash Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## Description\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Purpose**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.'
LINE: #   - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.
+ [[ #   - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Source this script within other Bash scripts to make the utility functions available for use:'
LINE: #   - Source this script within other Bash scripts to make the utility functions available for use:
+ [[ #   - Source this script within other Bash scripts to make the utility functions available for use: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script within other Bash scripts to make the utility functions available for use: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Source this script within other Bash scripts to make the utility functions available for use:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```bash'
LINE: #     ```bash
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```bash\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     source /path/to/util_funcs.sh'
LINE: #     source /path/to/util_funcs.sh
+ [[ #     source /path/to/util_funcs.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     source /path/to/util_funcs.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    source /path/to/util_funcs.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```'
LINE: #     ```
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='    ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None. This script is intended to be sourced by other scripts and does not require input parameters.'
LINE: #   - None. This script is intended to be sourced by other scripts and does not require input parameters.
+ [[ #   - None. This script is intended to be sourced by other scripts and does not require input parameters. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. This script is intended to be sourced by other scripts and does not require input parameters. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - None. This script is intended to be sourced by other scripts and does not require input parameters.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Provides utility functions that can be called from other Bash scripts.'
LINE: #   - Provides utility functions that can be called from other Bash scripts.
+ [[ #   - Provides utility functions that can be called from other Bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides utility functions that can be called from other Bash scripts. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Provides utility functions that can be called from other Bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.'
LINE: #   - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.
+ [[ #   - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Dependencies'
LINE: # ## Dependencies
+ [[ # ## Dependencies =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## Dependencies =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## Dependencies\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.'
LINE: # - None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.
+ [[ # - None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  End of script documentation'
**************************  End of script documentation
+ echo -e '# util_funcs.sh\n## Description\n# util_funcs.sh - Utility Functions for Bash Scripts\n#\n## Description\n- **Purpose**:\n  - Provides a collection of utility functions to assist in various common tasks within Bash scripting. These functions offer streamlined solutions for string manipulation, number padding, and stack operations, enhancing the efficiency and readability of Bash scripts that incorporate them.\n- **Usage**: \n  - Source this script within other Bash scripts to make the utility functions available for use:\n    ```bash\n    source /path/to/util_funcs.sh\n    ```\n- **Input Parameters**: \n  - None. This script is intended to be sourced by other scripts and does not require input parameters.\n- **Output**: \n  - Provides utility functions that can be called from other Bash scripts.\n- **Exceptions**: \n  - Some functions within the script may return specific error codes depending on their internal logic. Refer to the individual function documentation for detailed exception handling.\n#\n## Dependencies\n- None explicitly stated. The script is designed to be self-contained, relying only on standard Bash features.\n'
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Capture the fully qualified path of the sourced script'
LINE: # Capture the fully qualified path of the sourced script
+ [[ # Capture the fully qualified path of the sourced script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Capture the fully qualified path of the sourced script =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Capture the fully qualified path of the sourced script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Don'\''t source this script if it'\''s already been sourced.'
LINE: # Don't source this script if it's already been sourced.
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: echo "Sourcing: ${THIS_SCRIPT}"'
LINE: echo "Sourcing: ${THIS_SCRIPT}"
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INTERNAL_FUNCTIONS=('
LINE: __VENV_INTERNAL_FUNCTIONS=(
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=(
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ IFS=
+ read -r line
+ echo 'LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}'
LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: )'
LINE: )
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Utility functions'
LINE: # Utility functions
+ [[ # Utility functions =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Utility functions =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Utility functions\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: strip_space'
LINE: # # Function: strip_space
+ [[ # # Function: strip_space =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: strip_space =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: strip_space\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `strip_space` - Remove Leading and Trailing Whitespaces'
LINE: # `strip_space` - Remove Leading and Trailing Whitespaces
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `strip_space` - Remove Leading and Trailing Whitespaces =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`strip_space` - Remove Leading and Trailing Whitespaces\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Removes leading and trailing spaces from the input string.'
LINE: #   - Removes leading and trailing spaces from the input string.
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes leading and trailing spaces from the input string. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Removes leading and trailing spaces from the input string.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `strip_space "  string  "`'
LINE: #   - `strip_space "  string  "`
+ [[ #   - `strip_space "  string  "` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `strip_space "  string  "` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `strip_space "  string  "` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `strip_space "  string  "` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `strip_space "  string  "`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `str`: The string from which to remove leading and trailing whitespaces.'
LINE: #   - `str`: The string from which to remove leading and trailing whitespaces.
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string from which to remove leading and trailing whitespaces. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `str`: The string from which to remove leading and trailing whitespaces.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - A new string with whitespaces removed from both ends.'
LINE: #   - A new string with whitespaces removed from both ends.
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A new string with whitespaces removed from both ends. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - A new string with whitespaces removed from both ends.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: strip_space() {'
LINE: strip_space() {
+ [[ strip_space() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ strip_space() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ strip_space() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ strip_space() { =~ ^#+ ]]
+ [[ strip_space() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=strip_space
+ current_function_name=strip_space
+ extracted_markdown='## strip_space\n# Function: strip_space\n`strip_space` - Remove Leading and Trailing Whitespaces\n## Description\n- **Purpose**: \n  - Removes leading and trailing spaces from the input string.\n- **Usage**: \n  - `strip_space "  string  "`\n- **Input Parameters**: \n  - `str`: The string from which to remove leading and trailing whitespaces.\n- **Output**: \n  - A new string with whitespaces removed from both ends.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## strip_space\n# Function: strip_space\n`strip_space` - Remove Leading and Trailing Whitespaces\n## Description\n- **Purpose**: \n  - Removes leading and trailing spaces from the input string.\n- **Usage**: \n  - `strip_space "  string  "`\n- **Input Parameters**: \n  - `str`: The string from which to remove leading and trailing whitespaces.\n- **Output**: \n  - A new string with whitespaces removed from both ends.\n- **Exceptions**: \n  - None.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local argstring="$*"'
LINE:     local argstring="$*"
+ [[     local argstring="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local argstring="$*" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local argstring="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local argstring="$*" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local argstring="$*"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Remove leading and trailing whitespaces'
LINE:     # Remove leading and trailing whitespaces
+ [[     # Remove leading and trailing whitespaces =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local argstring="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local argstring="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove leading and trailing whitespaces =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Remove leading and trailing whitespaces =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Remove leading and trailing whitespaces'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "$argstring" | sed '\''s/^ *//;s/ *$//'\'''
LINE:     echo "$argstring" | sed 's/^ *//;s/ *$//'
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove leading and trailing whitespaces =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Remove leading and trailing whitespaces =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "$argstring" | sed '\''s/^ *//;s/ *$//'\'''
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "$argstring" | sed 's/^ *//;s/ *$//' =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: zero_pad'
LINE: # # Function: zero_pad
+ [[ # # Function: zero_pad =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: zero_pad =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: zero_pad\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `zero_pad` - Pad a Single-Digit Number with a Leading Zero'
LINE: # `zero_pad` - Pad a Single-Digit Number with a Leading Zero
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `zero_pad` - Pad a Single-Digit Number with a Leading Zero =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`zero_pad` - Pad a Single-Digit Number with a Leading Zero\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.'
LINE: #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values.
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pads a given number with a leading zero if it's a single-digit number, ensuring consistent formatting for numerical values. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Call the function with a number to add a leading zero if it is a single digit. For example:'
LINE: #   - Call the function with a number to add a leading zero if it is a single digit. For example:
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Call the function with a number to add a leading zero if it is a single digit. For example: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Call the function with a number to add a leading zero if it is a single digit. For example:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```bash'
LINE: #     ```bash
+ [[ #     ```bash =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ```bash =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    ```bash\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     padded_number=$(zero_pad "5")'
LINE: #     padded_number=$(zero_pad "5")
+ [[ #     padded_number=$(zero_pad "5") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     padded_number=$(zero_pad "5") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     padded_number=$(zero_pad "5") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     padded_number=$(zero_pad "5") =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    padded_number=$(zero_pad "5")\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     # Returns "05"'
LINE: #     # Returns "05"
+ [[ #     # Returns "05" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     # Returns "05" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     # Returns "05" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     # Returns "05" =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    # Returns "05"\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #     ```'
LINE: #     ```
+ [[ #     ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #     ``` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='    ```\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `nn`: A number that needs padding.'
LINE: #   - `nn`: A number that needs padding.
+ [[ #   - `nn`: A number that needs padding. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `nn`: A number that needs padding. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nn`: A number that needs padding. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nn`: A number that needs padding. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `nn`: A number that needs padding.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - A string representation of the number, padded with a leading zero if it was a single digit.'
LINE: #   - A string representation of the number, padded with a leading zero if it was a single digit.
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A string representation of the number, padded with a leading zero if it was a single digit. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - A string representation of the number, padded with a leading zero if it was a single digit.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits.'
LINE: #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits.
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. The function handles single-digit numbers and does not modify numbers with two or more digits. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None. The function handles single-digit numbers and does not modify numbers with two or more digits.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: zero_pad() {'
LINE: zero_pad() {
+ [[ zero_pad() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ zero_pad() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ zero_pad() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ zero_pad() { =~ ^#+ ]]
+ [[ zero_pad() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=zero_pad
+ current_function_name=zero_pad
+ extracted_markdown='## zero_pad\n# Function: zero_pad\n`zero_pad` - Pad a Single-Digit Number with a Leading Zero\n## Description\n- **Purpose**: \n  - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.\n- **Usage**: \n  - Call the function with a number to add a leading zero if it is a single digit. For example:\n    ```bash\n    padded_number=$(zero_pad "5")\n    # Returns "05"\n    ```\n- **Input Parameters**: \n  - `nn`: A number that needs padding.\n- **Output**: \n  - A string representation of the number, padded with a leading zero if it was a single digit.\n- **Exceptions**: \n  - None. The function handles single-digit numbers and does not modify numbers with two or more digits.\n'
+ echo -e '## zero_pad\n# Function: zero_pad\n`zero_pad` - Pad a Single-Digit Number with a Leading Zero\n## Description\n- **Purpose**: \n  - Pads a given number with a leading zero if it'\''s a single-digit number, ensuring consistent formatting for numerical values.\n- **Usage**: \n  - Call the function with a number to add a leading zero if it is a single digit. For example:\n    ```bash\n    padded_number=$(zero_pad "5")\n    # Returns "05"\n    ```\n- **Input Parameters**: \n  - `nn`: A number that needs padding.\n- **Output**: \n  - A string representation of the number, padded with a leading zero if it was a single digit.\n- **Exceptions**: \n  - None. The function handles single-digit numbers and does not modify numbers with two or more digits.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local num="$1"'
LINE:     local num="$1"
+ [[     local num="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local num="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local num="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local num="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local num="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     printf "%02d" "${num}"'
LINE:     printf "%02d" "${num}"
+ [[     printf "%02d" "${num}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local num="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local num="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "%02d" "${num}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     printf "%02d" "${num}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    printf "%02d" "${num}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     printf "%02d" "${num}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     printf "%02d" "${num}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: next_step'
LINE: # # Function: next_step
+ [[ # # Function: next_step =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: next_step =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: next_step\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed'
LINE: # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Increments a given sequence number by 1 and pads it with a zero if necessary.'
LINE: #   - Increments a given sequence number by 1 and pads it with a zero if necessary.
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Increments a given sequence number by 1 and pads it with a zero if necessary. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Increments a given sequence number by 1 and pads it with a zero if necessary.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `next_step "09"`'
LINE: #   - `next_step "09"`
+ [[ #   - `next_step "09"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `next_step "09"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `next_step "09"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `next_step "09"` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `next_step "09"`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Scope**: '
LINE: # - **Scope**: 
+ [[ # - **Scope**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Scope**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Scope**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Scope**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Local. Modifies no global variables.'
LINE: #   - Local. Modifies no global variables.
+ [[ #   - Local. Modifies no global variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Local. Modifies no global variables. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Local. Modifies no global variables. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Local. Modifies no global variables. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Local. Modifies no global variables.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.'
LINE: #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The next sequence number as a string, zero-padded if necessary.'
LINE: #   - The next sequence number as a string, zero-padded if necessary.
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The next sequence number as a string, zero-padded if necessary. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The next sequence number as a string, zero-padded if necessary.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".'
LINE: #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument". =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: next_step() {'
LINE: next_step() {
+ [[ next_step() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ next_step() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ next_step() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ next_step() { =~ ^#+ ]]
+ [[ next_step() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=next_step
+ current_function_name=next_step
+ extracted_markdown='## next_step\n# Function: next_step\n`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed\n## Description\n- **Purpose**:\n  - Increments a given sequence number by 1 and pads it with a zero if necessary.\n- **Usage**: \n  - `next_step "09"`\n- **Scope**: \n  - Local. Modifies no global variables.\n- **Input Parameters**: \n  1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.\n- **Output**: \n  - The next sequence number as a string, zero-padded if necessary.\n- **Exceptions**: \n  - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".\n'
+ echo -e '## next_step\n# Function: next_step\n`next_step` - Increment a Given Sequence Number by 1 and Pad it with a Zero if Needed\n## Description\n- **Purpose**:\n  - Increments a given sequence number by 1 and pads it with a zero if necessary.\n- **Usage**: \n  - `next_step "09"`\n- **Scope**: \n  - Local. Modifies no global variables.\n- **Input Parameters**: \n  1. `sequenceNum` (integer) - The sequence number to increment. Must be between 00 and 99.\n- **Output**: \n  - The next sequence number as a string, zero-padded if necessary.\n- **Exceptions**: \n  - Returns an error code 22 if the sequence number is not between 00 and 99. Error 22 means "Invalid Argument".\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local sn="$1"'
LINE:     local sn="$1"
+ [[     local sn="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local sn="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local sn="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local sn="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local sn="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     case "$sn" in'
LINE:     case "$sn" in
+ [[     case "$sn" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local sn="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local sn="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$sn" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "$sn" in =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    case "$sn" in'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ""|[[:space:]]*)'
LINE:         ""|[[:space:]]*)
+ [[         ""|[[:space:]]*) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$sn" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "$sn" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ""|[[:space:]]*) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ""|[[:space:]]*) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ""|[[:space:]]*)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             sn=0'
LINE:             sn=0
+ [[             sn=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ""|[[:space:]]*) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ""|[[:space:]]*) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             sn=0 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            sn=0'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             sn=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         [0-9]|[0-9][0-9])'
LINE:         [0-9]|[0-9][0-9])
+ [[         [0-9]|[0-9][0-9]) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [0-9]|[0-9][0-9]) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         [0-9]|[0-9][0-9]) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        [0-9]|[0-9][0-9])'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             sn=$((10#${sn}))'
LINE:             sn=$((10#${sn}))
+ [[             sn=$((10#${sn})) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         [0-9]|[0-9][0-9]) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         [0-9]|[0-9][0-9]) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=$((10#${sn})) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             sn=$((10#${sn})) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            sn=$((10#${sn}))'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ((sn++))'
LINE:             ((sn++))
+ [[             ((sn++)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sn=$((10#${sn})) =~ ^}$ ]]
+ [[ false == false ]]
+ [[             sn=$((10#${sn})) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ((sn++)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ((sn++)) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ((sn++))'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ((sn++)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ((sn++)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         *)'
LINE:         *)
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "Exception, sequence must be a value between 00 and 99." >&2'
LINE:             echo "Exception, sequence must be a value between 00 and 99." >&2
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "Exception, sequence must be a value between 00 and 99." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             __rc__=22   # EINVAL: Invalid Argument'
LINE:             __rc__=22   # EINVAL: Invalid Argument
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "Exception, sequence must be a value between 00 and 99." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             __rc__=22   # EINVAL: Invalid Argument =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            __rc__=22   # EINVAL: Invalid Argument'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             return ${__rc__}'
LINE:             return ${__rc__}
+ [[             return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^}$ ]]
+ [[ false == false ]]
+ [[             __rc__=22   # EINVAL: Invalid Argument =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[             return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     esac'
LINE:     esac
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "$(zero_pad ${sn})"'
LINE:     echo "$(zero_pad ${sn})"
+ [[     echo "$(zero_pad ${sn})" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$(zero_pad ${sn})" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "$(zero_pad ${sn})" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "$(zero_pad ${sn})"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "$(zero_pad ${sn})" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "$(zero_pad ${sn})" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: sort_2d_array'
LINE: # # Function: sort_2d_array
+ [[ # # Function: sort_2d_array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: sort_2d_array =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: sort_2d_array\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `sort_2d_array` - Sort a Two-Dimensional Array'
LINE: # `sort_2d_array` - Sort a Two-Dimensional Array
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `sort_2d_array` - Sort a Two-Dimensional Array =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`sort_2d_array` - Sort a Two-Dimensional Array\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.'
LINE: #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements.
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sorts a two-dimensional array in Bash. It's particularly useful for organizing data that is stored in a format of paired elements. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.'
LINE: #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions.
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It's beneficial in scenarios where data needs to be sorted based on one of the dimensions. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `array_name`: The name of the array variable that needs to be sorted.'
LINE: #   - `array_name`: The name of the array variable that needs to be sorted.
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `array_name`: The name of the array variable that needs to be sorted. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `array_name`: The name of the array variable that needs to be sorted.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The original array sorted based on the specified criteria.'
LINE: #   - The original array sorted based on the specified criteria.
+ [[ #   - The original array sorted based on the specified criteria. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The original array sorted based on the specified criteria. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The original array sorted based on the specified criteria. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The original array sorted based on the specified criteria. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The original array sorted based on the specified criteria.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).'
LINE: #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation).
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function's implementation). =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: sort_2d_array() {'
LINE: sort_2d_array() {
+ [[ sort_2d_array() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ sort_2d_array() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ sort_2d_array() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ sort_2d_array() { =~ ^#+ ]]
+ [[ sort_2d_array() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=sort_2d_array
+ current_function_name=sort_2d_array
+ extracted_markdown='## sort_2d_array\n# Function: sort_2d_array\n`sort_2d_array` - Sort a Two-Dimensional Array\n## Description\n- **Purpose**:\n  - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.\n- **Usage**: \n  - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.\n- **Input Parameters**: \n  - `array_name`: The name of the array variable that needs to be sorted.\n- **Output**: \n  - The original array sorted based on the specified criteria.\n- **Exceptions**: \n  - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).\n'
+ echo -e '## sort_2d_array\n# Function: sort_2d_array\n`sort_2d_array` - Sort a Two-Dimensional Array\n## Description\n- **Purpose**:\n  - Sorts a two-dimensional array in Bash. It'\''s particularly useful for organizing data that is stored in a format of paired elements.\n- **Usage**: \n  - This function can be used to sort arrays where each element consists of a pair of values (e.g., key-value pairs). It'\''s beneficial in scenarios where data needs to be sorted based on one of the dimensions.\n- **Input Parameters**: \n  - `array_name`: The name of the array variable that needs to be sorted.\n- **Output**: \n  - The original array sorted based on the specified criteria.\n- **Exceptions**: \n  - Handles exceptions or errors that may arise during the sorting process (to be detailed based on function'\''s implementation).\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local array_name="$1"'
LINE:     local array_name="$1"
+ [[     local array_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local array_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local array_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local array_name="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local array_name="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local i j temp1 temp2 len temp_array'
LINE:     local i j temp1 temp2 len temp_array
+ [[     local i j temp1 temp2 len temp_array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local array_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local array_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local i j temp1 temp2 len temp_array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local i j temp1 temp2 len temp_array =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local i j temp1 temp2 len temp_array'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local i j temp1 temp2 len temp_array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local i j temp1 temp2 len temp_array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Assign named array to local array'
LINE:     # Assign named array to local array
+ [[     # Assign named array to local array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Assign named array to local array =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign named array to local array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Assign named array to local array =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Assign named array to local array'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     eval "temp_array=(\"\${${array_name}[@]}\")"'
LINE:     eval "temp_array=(\"\${${array_name}[@]}\")"
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign named array to local array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Assign named array to local array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    eval "temp_array=(\"\${${array_name}[@]}\")"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     len=${#temp_array[@]}'
LINE:     len=${#temp_array[@]}
+ [[     len=${#temp_array[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "temp_array=(\"\${${array_name}[@]}\")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     len=${#temp_array[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     len=${#temp_array[@]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    len=${#temp_array[@]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     len=${#temp_array[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     len=${#temp_array[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for ((i=2; i<len; i+=2)); do'
LINE:     for ((i=2; i<len; i+=2)); do
+ [[     for ((i=2; i<len; i+=2)); do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for ((i=2; i<len; i+=2)); do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for ((i=2; i<len; i+=2)); do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         temp1=${temp_array[i]}'
LINE:         temp1=${temp_array[i]}
+ [[         temp1=${temp_array[i]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for ((i=2; i<len; i+=2)); do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp1=${temp_array[i]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp1=${temp_array[i]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        temp1=${temp_array[i]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         temp2=${temp_array[i+1]}'
LINE:         temp2=${temp_array[i+1]}
+ [[         temp2=${temp_array[i+1]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp1=${temp_array[i]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp1=${temp_array[i]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp2=${temp_array[i+1]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp2=${temp_array[i+1]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        temp2=${temp_array[i+1]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp2=${temp_array[i+1]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp2=${temp_array[i+1]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Find the correct position for temp1, temp2 by comparing with all preceding pairs'
LINE:         # Find the correct position for temp1, temp2 by comparing with all preceding pairs
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Find the correct position for temp1, temp2 by comparing with all preceding pairs'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         j=i'
LINE:         j=i
+ [[         j=i =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Find the correct position for temp1, temp2 by comparing with all preceding pairs =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         j=i =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         j=i =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        j=i'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         while [[ j -ge 2 ]]; do'
LINE:         while [[ j -ge 2 ]]; do
+ [[         while [[ j -ge 2 ]]; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         j=i =~ ^}$ ]]
+ [[ false == false ]]
+ [[         j=i =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while [[ j -ge 2 ]]; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         while [[ j -ge 2 ]]; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        while [[ j -ge 2 ]]; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             if [[ ${temp_array[j-2]} > "$temp1" ]]; then'
LINE:             if [[ ${temp_array[j-2]} > "$temp1" ]]; then
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         while [[ j -ge 2 ]]; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[         while [[ j -ge 2 ]]; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            if [[ ${temp_array[j-2]} > "$temp1" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Shift the pair at j-2 forward to make room for temp1, temp2'
LINE:                 # Shift the pair at j-2 forward to make room for temp1, temp2
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[             if [[ ${temp_array[j-2]} > "$temp1" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Shift the pair at j-2 forward to make room for temp1, temp2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 temp_array[j]=${temp_array[j-2]}'
LINE:                 temp_array[j]=${temp_array[j-2]}
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Shift the pair at j-2 forward to make room for temp1, temp2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 temp_array[j]=${temp_array[j-2]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                temp_array[j]=${temp_array[j-2]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 temp_array[j+1]=${temp_array[j-1]}'
LINE:                 temp_array[j+1]=${temp_array[j-1]}
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 temp_array[j]=${temp_array[j-2]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 temp_array[j+1]=${temp_array[j-1]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                temp_array[j+1]=${temp_array[j-1]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 j=$((j-2))'
LINE:                 j=$((j-2))
+ [[                 j=$((j-2)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 temp_array[j+1]=${temp_array[j-1]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 j=$((j-2)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 j=$((j-2)) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                j=$((j-2))'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             else'
LINE:             else
+ [[             else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 j=$((j-2)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 j=$((j-2)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 # Correct position found, break the loop'
LINE:                 # Correct position found, break the loop
+ [[                 # Correct position found, break the loop =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             else =~ ^}$ ]]
+ [[ false == false ]]
+ [[             else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct position found, break the loop =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 # Correct position found, break the loop =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                # Correct position found, break the loop'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 break'
LINE:                 break
+ [[                 break =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 # Correct position found, break the loop =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 # Correct position found, break the loop =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 break =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 break =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                break'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             fi'
LINE:             fi
+ [[             fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 break =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 break =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         done'
LINE:         done
+ [[         done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[             fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         done =~ ^}$ ]]
+ [[ false == false ]]
+ [[         done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Place temp1, temp2 in their correct position'
LINE:         # Place temp1, temp2 in their correct position
+ [[         # Place temp1, temp2 in their correct position =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Place temp1, temp2 in their correct position =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Place temp1, temp2 in their correct position'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         temp_array[j]=$temp1'
LINE:         temp_array[j]=$temp1
+ [[         temp_array[j]=$temp1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Place temp1, temp2 in their correct position =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j]=$temp1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp_array[j]=$temp1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        temp_array[j]=$temp1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         temp_array[j+1]=$temp2'
LINE:         temp_array[j+1]=$temp2
+ [[         temp_array[j+1]=$temp2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j]=$temp1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp_array[j]=$temp1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j+1]=$temp2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         temp_array[j+1]=$temp2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        temp_array[j+1]=$temp2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         temp_array[j+1]=$temp2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         temp_array[j+1]=$temp2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Assign sorted local array back to original named array'
LINE:     # Assign sorted local array back to original named array
+ [[     # Assign sorted local array back to original named array =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Assign sorted local array back to original named array =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign sorted local array back to original named array =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Assign sorted local array back to original named array =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Assign sorted local array back to original named array'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     eval "${array_name}=(\"\${temp_array[@]}\")"'
LINE:     eval "${array_name}=(\"\${temp_array[@]}\")"
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Assign sorted local array back to original named array =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Assign sorted local array back to original named array =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    eval "${array_name}=(\"\${temp_array[@]}\")"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "${array_name}=(\"\${temp_array[@]}\")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: push_stack'
LINE: # # Function: push_stack
+ [[ # # Function: push_stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: push_stack =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: push_stack\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `push_stack` - Push a Value onto a Named Stack'
LINE: # `push_stack` - Push a Value onto a Named Stack
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_stack` - Push a Value onto a Named Stack =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`push_stack` - Push a Value onto a Named Stack\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Pushes a value onto a named stack (added to the end of the stack). '
LINE: #   - Pushes a value onto a named stack (added to the end of the stack). 
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes a value onto a named stack (added to the end of the stack).  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Pushes a value onto a named stack (added to the end of the stack). \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `push_stack "stack_name" "value"`'
LINE: #   - `push_stack "stack_name" "value"`
+ [[ #   - `push_stack "stack_name" "value"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `push_stack "stack_name" "value"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_stack "stack_name" "value"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_stack "stack_name" "value"` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `push_stack "stack_name" "value"`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `stack_name`: The name of the stack array.'
LINE: #   - `stack_name`: The name of the stack array.
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `stack_name`: The name of the stack array.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `value`: The value to push onto the stack.'
LINE: #   - `value`: The value to push onto the stack.
+ [[ #   - `value`: The value to push onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `value`: The value to push onto the stack.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Modifies the named stack by adding a new element.'
LINE: #   - Modifies the named stack by adding a new element.
+ [[ #   - Modifies the named stack by adding a new element. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Modifies the named stack by adding a new element. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the named stack by adding a new element. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the named stack by adding a new element. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Modifies the named stack by adding a new element.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: push_stack() {'
LINE: push_stack() {
+ [[ push_stack() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ push_stack() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_stack() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_stack() { =~ ^#+ ]]
+ [[ push_stack() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=push_stack
+ current_function_name=push_stack
+ extracted_markdown='## push_stack\n# Function: push_stack\n`push_stack` - Push a Value onto a Named Stack\n## Description\n- **Purpose**:\n  - Pushes a value onto a named stack (added to the end of the stack). \n- **Usage**: \n  - `push_stack "stack_name" "value"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack.\n- **Output**: \n  - Modifies the named stack by adding a new element.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## push_stack\n# Function: push_stack\n`push_stack` - Push a Value onto a Named Stack\n## Description\n- **Purpose**:\n  - Pushes a value onto a named stack (added to the end of the stack). \n- **Usage**: \n  - `push_stack "stack_name" "value"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack.\n- **Output**: \n  - Modifies the named stack by adding a new element.\n- **Exceptions**: \n  - None.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local stack_name="$1"'
LINE:     local stack_name="$1"
+ [[     local stack_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_name="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local stack_name="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local stack_value="$2"'
LINE:     local stack_value="$2"
+ [[     local stack_value="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value="$2" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local stack_value="$2"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     eval "${stack_name}+=(\"$stack_value\")"'
LINE:     eval "${stack_name}+=(\"$stack_value\")"
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "${stack_name}+=(\"$stack_value\")" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    eval "${stack_name}+=(\"$stack_value\")"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # echo "PUSH ${stack_name}: ${stack_value}" >&2'
LINE:     # echo "PUSH ${stack_name}: ${stack_value}" >&2
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "${stack_name}+=(\"$stack_value\")" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # echo "PUSH ${stack_name}: ${stack_value}" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # echo "PUSH ${stack_name}: ${stack_value}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: pop_stack'
LINE: # # Function: pop_stack
+ [[ # # Function: pop_stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pop_stack =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: pop_stack\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `pop_stack` - Pop a Value from a Named Stack'
LINE: # `pop_stack` - Pop a Value from a Named Stack
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_stack` - Pop a Value from a Named Stack =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`pop_stack` - Pop a Value from a Named Stack\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Pops a value from a named stack.'
LINE: #   - Pops a value from a named stack.
+ [[ #   - Pops a value from a named stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pops a value from a named stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops a value from a named stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops a value from a named stack. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Pops a value from a named stack.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `pop_stack "stack_name"`'
LINE: #   - `pop_stack "stack_name"`
+ [[ #   - `pop_stack "stack_name"` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pop_stack "stack_name"` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_stack "stack_name"` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_stack "stack_name"` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `pop_stack "stack_name"`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `stack_name`: The name of the stack array.'
LINE: #   - `stack_name`: The name of the stack array.
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `stack_name`: The name of the stack array.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Removes and returns the top element from the named stack.'
LINE: #   - Removes and returns the top element from the named stack.
+ [[ #   - Removes and returns the top element from the named stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Removes and returns the top element from the named stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes and returns the top element from the named stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes and returns the top element from the named stack. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Removes and returns the top element from the named stack.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns an error message and error code 1 if the stack is empty.'
LINE: #   - Returns an error message and error code 1 if the stack is empty.
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error message and error code 1 if the stack is empty. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns an error message and error code 1 if the stack is empty.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: pop_stack() {'
LINE: pop_stack() {
+ [[ pop_stack() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pop_stack() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_stack() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_stack() { =~ ^#+ ]]
+ [[ pop_stack() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=pop_stack
+ current_function_name=pop_stack
+ extracted_markdown='## pop_stack\n# Function: pop_stack\n`pop_stack` - Pop a Value from a Named Stack\n## Description\n- **Purpose**:\n  - Pops a value from a named stack.\n- **Usage**: \n  - `pop_stack "stack_name"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n- **Output**: \n  - Removes and returns the top element from the named stack.\n- **Exceptions**: \n  - Returns an error message and error code 1 if the stack is empty.\n'
+ echo -e '## pop_stack\n# Function: pop_stack\n`pop_stack` - Pop a Value from a Named Stack\n## Description\n- **Purpose**:\n  - Pops a value from a named stack.\n- **Usage**: \n  - `pop_stack "stack_name"`\n- **Input Parameters**: \n  - `stack_name`: The name of the stack array.\n- **Output**: \n  - Removes and returns the top element from the named stack.\n- **Exceptions**: \n  - Returns an error message and error code 1 if the stack is empty.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local stack_name="$1"'
LINE:     local stack_name="$1"
+ [[     local stack_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_name="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local stack_name="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local popped_value'
LINE:     local popped_value
+ [[     local popped_value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local popped_value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local popped_value =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local popped_value'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local popped_value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local popped_value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Dynamically get the length of the stack'
LINE:     # Dynamically get the length of the stack
+ [[     # Dynamically get the length of the stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Dynamically get the length of the stack =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Dynamically get the length of the stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Dynamically get the length of the stack =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Dynamically get the length of the stack'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     eval "local stack_length=\${#${stack_name}[@]}"'
LINE:     eval "local stack_length=\${#${stack_name}[@]}"
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Dynamically get the length of the stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Dynamically get the length of the stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "local stack_length=\${#${stack_name}[@]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    eval "local stack_length=\${#${stack_name}[@]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "local stack_length=\${#${stack_name}[@]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Check if the stack is empty'
LINE:     # Check if the stack is empty
+ [[     # Check if the stack is empty =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the stack is empty =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the stack is empty =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the stack is empty =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Check if the stack is empty'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ "${stack_length}" -eq 0 ]]; then'
LINE:     if [[ "${stack_length}" -eq 0 ]]; then
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the stack is empty =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the stack is empty =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${stack_length}" -eq 0 ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ "${stack_length}" -eq 0 ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Stack is empty" >&2'
LINE:         echo "Stack is empty" >&2
+ [[         echo "Stack is empty" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${stack_length}" -eq 0 ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Stack is empty" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Stack is empty" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Stack is empty" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Stack is empty" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Stack is empty" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Pop the last value and store to return top stack value'
LINE:     # Pop the last value and store to return top stack value
+ [[     # Pop the last value and store to return top stack value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Pop the last value and store to return top stack value =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop the last value and store to return top stack value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Pop the last value and store to return top stack value =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Pop the last value and store to return top stack value'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     eval "popped_value=\${${stack_name}[-1]}"'
LINE:     eval "popped_value=\${${stack_name}[-1]}"
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop the last value and store to return top stack value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Pop the last value and store to return top stack value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "popped_value=\${${stack_name}[-1]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    eval "popped_value=\${${stack_name}[-1]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "popped_value=\${${stack_name}[-1]}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Calculate the index of the last element'
LINE:     # Calculate the index of the last element
+ [[     # Calculate the index of the last element =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Calculate the index of the last element =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate the index of the last element =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Calculate the index of the last element =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Calculate the index of the last element'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local last_index=$((stack_length - 1))'
LINE:     local last_index=$((stack_length - 1))
+ [[     local last_index=$((stack_length - 1)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate the index of the last element =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Calculate the index of the last element =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_index=$((stack_length - 1)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local last_index=$((stack_length - 1)) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local last_index=$((stack_length - 1))'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_index=$((stack_length - 1)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local last_index=$((stack_length - 1)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Remove the last element from the stack'
LINE:     # Remove the last element from the stack
+ [[     # Remove the last element from the stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Remove the last element from the stack =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove the last element from the stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Remove the last element from the stack =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Remove the last element from the stack'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ "${last_index}" -eq 0 ]]; then'
LINE:     if [[ "${last_index}" -eq 0 ]]; then
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Remove the last element from the stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Remove the last element from the stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${last_index}" -eq 0 ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ "${last_index}" -eq 0 ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         eval "unset ${stack_name} && declare -a ${stack_name}"'
LINE:         eval "unset ${stack_name} && declare -a ${stack_name}"
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${last_index}" -eq 0 ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        eval "unset ${stack_name} && declare -a ${stack_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         eval "unset ${stack_name} && declare -a ${stack_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})"'
LINE:         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})"
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         eval "${stack_name}=(\${${stack_name}[@]:0:${last_index}})" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __sv__="${popped_value}"'
LINE:     __sv__="${popped_value}"
+ [[     __sv__="${popped_value}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __sv__="${popped_value}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __sv__="${popped_value}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __sv__="${popped_value}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __sv__="${popped_value}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __rc__=0'
LINE:     __rc__=0
+ [[     __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __sv__="${popped_value}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __sv__="${popped_value}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __rc__=0 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __rc__=0'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     return ${__rc__}'
LINE:     return ${__rc__}
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __rc__=0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: stack_op'
LINE: # # Function: stack_op
+ [[ # # Function: stack_op =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: stack_op =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: stack_op\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `stack_op` - Perform Stack Operations'
LINE: # `stack_op` - Perform Stack Operations
+ [[ # `stack_op` - Perform Stack Operations =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `stack_op` - Perform Stack Operations =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stack_op` - Perform Stack Operations =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stack_op` - Perform Stack Operations =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`stack_op` - Perform Stack Operations\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Performs stack operations such as push, pop, and debug on a given stack.'
LINE: #   - Performs stack operations such as push, pop, and debug on a given stack.
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Performs stack operations such as push, pop, and debug on a given stack. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Performs stack operations such as push, pop, and debug on a given stack.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `stack_op <action> <stack_name> [value]`'
LINE: #   - `stack_op <action> <stack_name> [value]`
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_op <action> <stack_name> [value]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `stack_op <action> <stack_name> [value]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`).'
LINE: #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`).
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `action`: The action to perform on the stack (`push`, `pop`, `debug`). =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `action`: The action to perform on the stack (`push`, `pop`, `debug`).\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `stack_name`: The name of the stack array.'
LINE: #   - `stack_name`: The name of the stack array.
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `stack_name`: The name of the stack array. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `stack_name`: The name of the stack array.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `value`: The value to push onto the stack (required for `push` action).'
LINE: #   - `value`: The value to push onto the stack (required for `push` action).
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `value`: The value to push onto the stack (required for `push` action). =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `value`: The value to push onto the stack (required for `push` action).\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Executes the specified stack operation.'
LINE: #   - Executes the specified stack operation.
+ [[ #   - Executes the specified stack operation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Executes the specified stack operation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the specified stack operation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the specified stack operation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Executes the specified stack operation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns an error if an invalid action is provided.'
LINE: #   - Returns an error if an invalid action is provided.
+ [[ #   - Returns an error if an invalid action is provided. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns an error if an invalid action is provided. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error if an invalid action is provided. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns an error if an invalid action is provided. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns an error if an invalid action is provided.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: stack_op() {'
LINE: stack_op() {
+ [[ stack_op() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ stack_op() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stack_op() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stack_op() { =~ ^#+ ]]
+ [[ stack_op() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=stack_op
+ current_function_name=stack_op
+ extracted_markdown='## stack_op\n# Function: stack_op\n`stack_op` - Perform Stack Operations\n## Description\n- **Purpose**:\n  - Performs stack operations such as push, pop, and debug on a given stack.\n- **Usage**: \n  - `stack_op <action> <stack_name> [value]`\n- **Input Parameters**: \n  - `action`: The action to perform on the stack (`push`, `pop`, `debug`).\n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack (required for `push` action).\n- **Output**: \n  - Executes the specified stack operation.\n- **Exceptions**: \n  - Returns an error if an invalid action is provided.\n'
+ echo -e '## stack_op\n# Function: stack_op\n`stack_op` - Perform Stack Operations\n## Description\n- **Purpose**:\n  - Performs stack operations such as push, pop, and debug on a given stack.\n- **Usage**: \n  - `stack_op <action> <stack_name> [value]`\n- **Input Parameters**: \n  - `action`: The action to perform on the stack (`push`, `pop`, `debug`).\n  - `stack_name`: The name of the stack array.\n  - `value`: The value to push onto the stack (required for `push` action).\n- **Output**: \n  - Executes the specified stack operation.\n- **Exceptions**: \n  - Returns an error if an invalid action is provided.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local action="$1"'
LINE:     local action="$1"
+ [[     local action="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local action="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local action="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local action="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local stack_name="$2"'
LINE:     local stack_name="$2"
+ [[     local stack_name="$2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local action="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_name="$2" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local stack_name="$2"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local stack_value="$3"'
LINE:     local stack_value="$3"
+ [[     local stack_value="$3" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_name="$2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_name="$2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$3" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value="$3" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local stack_value="$3"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     case "$action" in'
LINE:     case "$action" in
+ [[     case "$action" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value="$3" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value="$3" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$action" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "$action" in =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    case "$action" in'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         "push")'
LINE:         "push")
+ [[         "push") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$action" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "$action" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "push") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "push") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        "push")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             push_stack "$stack_name" "$stack_value"'
LINE:             push_stack "$stack_name" "$stack_value"
+ [[             push_stack "$stack_name" "$stack_value" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "push") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "push") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             push_stack "$stack_name" "$stack_value" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             push_stack "$stack_name" "$stack_value" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            push_stack "$stack_name" "$stack_value"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             push_stack "$stack_name" "$stack_value" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             push_stack "$stack_name" "$stack_value" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         "pop")'
LINE:         "pop")
+ [[         "pop") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "pop") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "pop") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        "pop")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             pop_stack "$stack_name"'
LINE:             pop_stack "$stack_name"
+ [[             pop_stack "$stack_name" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "pop") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "pop") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_stack "$stack_name" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             pop_stack "$stack_name" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            pop_stack "$stack_name"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "${__sv__}"      # Return the popped value'
LINE:             echo "${__sv__}"      # Return the popped value
+ [[             echo "${__sv__}"      # Return the popped value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_stack "$stack_name" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             pop_stack "$stack_name" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "${__sv__}"      # Return the popped value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "${__sv__}"      # Return the popped value =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "${__sv__}"      # Return the popped value'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "${__sv__}"      # Return the popped value =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "${__sv__}"      # Return the popped value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         "debug")'
LINE:         "debug")
+ [[         "debug") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "debug") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         "debug") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        "debug")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "***************************** STACK: ${stack_name} *****************************" >&2'
LINE:             echo "***************************** STACK: ${stack_name} *****************************" >&2
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         "debug") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         "debug") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "***************************** STACK: ${stack_name} *****************************" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             eval "echo \"\${${stack_name}[@]}\"" >&2 '
LINE:             eval "echo \"\${${stack_name}[@]}\"" >&2 
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "***************************** STACK: ${stack_name} *****************************" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            eval "echo \"\${${stack_name}[@]}\"" >&2 '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "***************************** STACK *****************************" >&2'
LINE:             echo "***************************** STACK *****************************" >&2
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^}$ ]]
+ [[ false == false ]]
+ [[             eval "echo \"\${${stack_name}[@]}\"" >&2  =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "***************************** STACK *****************************" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "***************************** STACK *****************************" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "***************************** STACK *****************************" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         *)'
LINE:         *)
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             errno_warn 78'
LINE:             errno_warn 78
+ [[             errno_warn 78 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             errno_warn 78 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             errno_warn 78 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            errno_warn 78'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             return $?'
LINE:             return $?
+ [[             return $? =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             errno_warn 78 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             errno_warn 78 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return $? =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             return $? =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            return $?'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             return $? =~ ^}$ ]]
+ [[ false == false ]]
+ [[             return $? =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     esac'
LINE:     esac
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: stringclean'
LINE: # # Function: stringclean
+ [[ # # Function: stringclean =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: stringclean =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: stringclean\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters'
LINE: # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Sanitizes a string by removing all characters except alphabets and numbers.'
LINE: #   - Sanitizes a string by removing all characters except alphabets and numbers.
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sanitizes a string by removing all characters except alphabets and numbers. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Sanitizes a string by removing all characters except alphabets and numbers.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `cleaned_str=$(stringclean "Hello, World!")`'
LINE: #   - `cleaned_str=$(stringclean "Hello, World!")`
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cleaned_str=$(stringclean "Hello, World!")` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `cleaned_str=$(stringclean "Hello, World!")`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `str`: The string to sanitize.'
LINE: #   - `str`: The string to sanitize.
+ [[ #   - `str`: The string to sanitize. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to sanitize. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to sanitize. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to sanitize. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `str`: The string to sanitize.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The sanitized string containing only alphanumeric characters.'
LINE: #   - The sanitized string containing only alphanumeric characters.
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sanitized string containing only alphanumeric characters. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The sanitized string containing only alphanumeric characters.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: stringclean() {'
LINE: stringclean() {
+ [[ stringclean() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ stringclean() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stringclean() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ stringclean() { =~ ^#+ ]]
+ [[ stringclean() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=stringclean
+ current_function_name=stringclean
+ extracted_markdown='## stringclean\n# Function: stringclean\n`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters\n## Description\n- **Purpose**:\n  - Sanitizes a string by removing all characters except alphabets and numbers.\n- **Usage**: \n  - `cleaned_str=$(stringclean "Hello, World!")`\n- **Input Parameters**: \n  - `str`: The string to sanitize.\n- **Output**: \n  - The sanitized string containing only alphanumeric characters.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## stringclean\n# Function: stringclean\n`stringclean` - Sanitize a String by Removing Non-Alphanumeric Characters\n## Description\n- **Purpose**:\n  - Sanitizes a string by removing all characters except alphabets and numbers.\n- **Usage**: \n  - `cleaned_str=$(stringclean "Hello, World!")`\n- **Input Parameters**: \n  - `str`: The string to sanitize.\n- **Output**: \n  - The sanitized string containing only alphanumeric characters.\n- **Exceptions**: \n  - None.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local str="$1"'
LINE:     local str="$1"
+ [[     local str="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local str="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local str="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local str="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "${str//[^a-zA-Z0-9]/}"'
LINE:     echo "${str//[^a-zA-Z0-9]/}"
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local str="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${str//[^a-zA-Z0-9]/}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "${str//[^a-zA-Z0-9]/}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${str//[^a-zA-Z0-9]/}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: to_upper'
LINE: # # Function: to_upper
+ [[ # # Function: to_upper =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: to_upper =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: to_upper\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `to_upper` - Convert a String to Uppercase'
LINE: # `to_upper` - Convert a String to Uppercase
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `to_upper` - Convert a String to Uppercase =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`to_upper` - Convert a String to Uppercase\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Converts a string to uppercase.'
LINE: #   - Converts a string to uppercase.
+ [[ #   - Converts a string to uppercase. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Converts a string to uppercase. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Converts a string to uppercase. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Converts a string to uppercase. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Converts a string to uppercase.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `upper_str=$(to_upper "hello")`'
LINE: #   - `upper_str=$(to_upper "hello")`
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `upper_str=$(to_upper "hello")` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `upper_str=$(to_upper "hello")`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `str`: The string to convert.'
LINE: #   - `str`: The string to convert.
+ [[ #   - `str`: The string to convert. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to convert. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to convert. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `str`: The string to convert. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `str`: The string to convert.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The uppercase version of the input string.'
LINE: #   - The uppercase version of the input string.
+ [[ #   - The uppercase version of the input string. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The uppercase version of the input string. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The uppercase version of the input string. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The uppercase version of the input string. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The uppercase version of the input string.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: to_upper() {'
LINE: to_upper() {
+ [[ to_upper() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ to_upper() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ to_upper() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ to_upper() { =~ ^#+ ]]
+ [[ to_upper() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=to_upper
+ current_function_name=to_upper
+ extracted_markdown='## to_upper\n# Function: to_upper\n`to_upper` - Convert a String to Uppercase\n## Description\n- **Purpose**:\n  - Converts a string to uppercase.\n- **Usage**: \n  - `upper_str=$(to_upper "hello")`\n- **Input Parameters**: \n  - `str`: The string to convert.\n- **Output**: \n  - The uppercase version of the input string.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## to_upper\n# Function: to_upper\n`to_upper` - Convert a String to Uppercase\n## Description\n- **Purpose**:\n  - Converts a string to uppercase.\n- **Usage**: \n  - `upper_str=$(to_upper "hello")`\n- **Input Parameters**: \n  - `str`: The string to convert.\n- **Output**: \n  - The uppercase version of the input string.\n- **Exceptions**: \n  - None.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local str="$1"'
LINE:     local str="$1"
+ [[     local str="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local str="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local str="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local str="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "${str^^}"'
LINE:     echo "${str^^}"
+ [[     echo "${str^^}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local str="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local str="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str^^}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${str^^}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "${str^^}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${str^^}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${str^^}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: ptree'
LINE: # # Function: ptree
+ [[ # # Function: ptree =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: ptree =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: ptree\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `ptree` - Display the Process Tree for a Given PID'
LINE: # `ptree` - Display the Process Tree for a Given PID
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ptree` - Display the Process Tree for a Given PID =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`ptree` - Display the Process Tree for a Given PID\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Recursively displays the process tree starting from a given PID.'
LINE: #   - Recursively displays the process tree starting from a given PID.
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Recursively displays the process tree starting from a given PID. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Recursively displays the process tree starting from a given PID.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `ptree 1234`'
LINE: #   - `ptree 1234`
+ [[ #   - `ptree 1234` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `ptree 1234` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ptree 1234` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ptree 1234` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `ptree 1234`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `pid`: The Process ID to start the tree from.'
LINE: #   - `pid`: The Process ID to start the tree from.
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pid`: The Process ID to start the tree from. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `pid`: The Process ID to start the tree from.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `indent` (optional): Indentation string for formatting.'
LINE: #   - `indent` (optional): Indentation string for formatting.
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `indent` (optional): Indentation string for formatting. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `indent` (optional): Indentation string for formatting.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - A hierarchical display of processes starting from the specified PID.'
LINE: #   - A hierarchical display of processes starting from the specified PID.
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A hierarchical display of processes starting from the specified PID. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - A hierarchical display of processes starting from the specified PID.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: ptree() {'
LINE: ptree() {
+ [[ ptree() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ptree() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ptree() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ptree() { =~ ^#+ ]]
+ [[ ptree() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=ptree
+ current_function_name=ptree
+ extracted_markdown='## ptree\n# Function: ptree\n`ptree` - Display the Process Tree for a Given PID\n## Description\n- **Purpose**:\n  - Recursively displays the process tree starting from a given PID.\n- **Usage**: \n  - `ptree 1234`\n- **Input Parameters**: \n  - `pid`: The Process ID to start the tree from.\n  - `indent` (optional): Indentation string for formatting.\n- **Output**: \n  - A hierarchical display of processes starting from the specified PID.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## ptree\n# Function: ptree\n`ptree` - Display the Process Tree for a Given PID\n## Description\n- **Purpose**:\n  - Recursively displays the process tree starting from a given PID.\n- **Usage**: \n  - `ptree 1234`\n- **Input Parameters**: \n  - `pid`: The Process ID to start the tree from.\n  - `indent` (optional): Indentation string for formatting.\n- **Output**: \n  - A hierarchical display of processes starting from the specified PID.\n- **Exceptions**: \n  - None.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local pid="$1"'
LINE:     local pid="$1"
+ [[     local pid="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local pid="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local pid="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local pid="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local pid="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local indent="${2:-" "}"'
LINE:     local indent="${2:-" "}"
+ [[     local indent="${2:-" "}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local pid="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local pid="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local indent="${2:-" "}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local indent="${2:-" "}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local indent="${2:-" "}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local indent="${2:-" "}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local indent="${2:-" "}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Get terminal width'
LINE:     # Get terminal width
+ [[     # Get terminal width =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Get terminal width =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get terminal width =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Get terminal width =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Get terminal width'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local term_width=$(tput cols)'
LINE:     local term_width=$(tput cols)
+ [[     local term_width=$(tput cols) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get terminal width =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Get terminal width =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local term_width=$(tput cols) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local term_width=$(tput cols) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local term_width=$(tput cols)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local term_width=$(tput cols) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local term_width=$(tput cols) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Calculate effective width for command output'
LINE:     # Calculate effective width for command output
+ [[     # Calculate effective width for command output =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Calculate effective width for command output =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate effective width for command output =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Calculate effective width for command output =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Calculate effective width for command output'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local effective_width=$((term_width - ${#indent} - 14))'
LINE:     local effective_width=$((term_width - ${#indent} - 14))
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Calculate effective width for command output =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Calculate effective width for command output =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local effective_width=$((term_width - ${#indent} - 14)) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local effective_width=$((term_width - ${#indent} - 14))'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local effective_width=$((term_width - ${#indent} - 14)) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Display the current process with indentation and truncate command based on effective width'
LINE:     # Display the current process with indentation and truncate command based on effective width
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Display the current process with indentation and truncate command based on effective width =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Display the current process with indentation and truncate command based on effective width'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" '\''NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}'\'''
LINE:     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}'
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Display the current process with indentation and truncate command based on effective width =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" '\''NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}'\'''
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ps -o pid,ppid,command -p "$pid" | awk -v indent="$indent" -v width="$effective_width" 'NR>1 {printf "%s%s %s %s\n", indent, $1, $2, substr($0, index($0,$3), width)}' =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Get child processes'
LINE:     # Get child processes
+ [[     # Get child processes =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Get child processes =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get child processes =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Get child processes =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Get child processes'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local children'
LINE:     local children
+ [[     local children =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Get child processes =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Get child processes =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local children =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local children =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local children'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     children=$(pgrep -P "$pid")'
LINE:     children=$(pgrep -P "$pid")
+ [[     children=$(pgrep -P "$pid") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local children =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local children =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     children=$(pgrep -P "$pid") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     children=$(pgrep -P "$pid") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    children=$(pgrep -P "$pid")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     children=$(pgrep -P "$pid") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     children=$(pgrep -P "$pid") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Recurse for each child process'
LINE:     # Recurse for each child process
+ [[     # Recurse for each child process =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Recurse for each child process =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Recurse for each child process =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Recurse for each child process =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Recurse for each child process'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     for child in $children; do'
LINE:     for child in $children; do
+ [[     for child in $children; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Recurse for each child process =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Recurse for each child process =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for child in $children; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     for child in $children; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    for child in $children; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ptree "$child" "  $indent"'
LINE:         ptree "$child" "  $indent"
+ [[         ptree "$child" "  $indent" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     for child in $children; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     for child in $children; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ptree "$child" "  $indent" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ptree "$child" "  $indent" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ptree "$child" "  $indent"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done'
LINE:     done
+ [[     done =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ptree "$child" "  $indent" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ptree "$child" "  $indent" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: var_type'
LINE: # # Function: var_type
+ [[ # # Function: var_type =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: var_type =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: var_type\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `var_type` - Get the Type of a Variable'
LINE: # `var_type` - Get the Type of a Variable
+ [[ # `var_type` - Get the Type of a Variable =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `var_type` - Get the Type of a Variable =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `var_type` - Get the Type of a Variable =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `var_type` - Get the Type of a Variable =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`var_type` - Get the Type of a Variable\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**:'
LINE: # - **Purpose**:
+ [[ # - **Purpose**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**: =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**:\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Retrieves the type of a variable.'
LINE: #   - Retrieves the type of a variable.
+ [[ #   - Retrieves the type of a variable. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the type of a variable. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the type of a variable. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the type of a variable. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Retrieves the type of a variable.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `var_type=$(var_type "var_name")`'
LINE: #   - `var_type=$(var_type "var_name")`
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_type=$(var_type "var_name")` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `var_type=$(var_type "var_name")`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `var_name`: The name of the variable.'
LINE: #   - `var_name`: The name of the variable.
+ [[ #   - `var_name`: The name of the variable. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `var_name`: The name of the variable. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_name`: The name of the variable. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `var_name`: The name of the variable. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `var_name`: The name of the variable.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.'
LINE: #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None.'
LINE: #   - None.
+ [[ #   - None. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: var_type() {'
LINE: var_type() {
+ [[ var_type() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ var_type() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ var_type() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ var_type() { =~ ^#+ ]]
+ [[ var_type() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=var_type
+ current_function_name=var_type
+ extracted_markdown='## var_type\n# Function: var_type\n`var_type` - Get the Type of a Variable\n## Description\n- **Purpose**:\n  - Retrieves the type of a variable.\n- **Usage**: \n  - `var_type=$(var_type "var_name")`\n- **Input Parameters**: \n  - `var_name`: The name of the variable.\n- **Output**: \n  - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.\n- **Exceptions**: \n  - None.\n'
+ echo -e '## var_type\n# Function: var_type\n`var_type` - Get the Type of a Variable\n## Description\n- **Purpose**:\n  - Retrieves the type of a variable.\n- **Usage**: \n  - `var_type=$(var_type "var_name")`\n- **Input Parameters**: \n  - `var_name`: The name of the variable.\n- **Output**: \n  - The type of the variable as a string. Can be one of `array`, `associative`, `scalar`, or `unknown`.\n- **Exceptions**: \n  - None.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local var_name="$1"'
LINE:     local var_name="$1"
+ [[     local var_name="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local var_name="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_name="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local var_name="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local var_name="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d '\'' '\'' -f 2) '
LINE:     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2) 
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_name="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local var_name="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d '\'' '\'' -f 2) '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     case "$var_type" in'
LINE:     case "$var_type" in
+ [[     case "$var_type" in =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local var_type=$(declare -p "$var_name" 2>/dev/null | cut -d ' ' -f 2)  =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$var_type" in =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     case "$var_type" in =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    case "$var_type" in'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         -a)'
LINE:         -a)
+ [[         -a) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     case "$var_type" in =~ ^}$ ]]
+ [[ false == false ]]
+ [[     case "$var_type" in =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -a) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         -a) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        -a)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "array"'
LINE:             echo "array"
+ [[             echo "array" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -a) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         -a) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "array" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "array" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "array"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "array" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "array" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         -A)'
LINE:         -A)
+ [[         -A) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -A) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         -A) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        -A)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "associative"'
LINE:             echo "associative"
+ [[             echo "associative" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         -A) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         -A) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "associative" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "associative" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "associative"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "associative" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "associative" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         --)'
LINE:         --)
+ [[         --) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         --) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         --) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        --)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "scalar"'
LINE:             echo "scalar"
+ [[             echo "scalar" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         --) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         --) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "scalar" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "scalar" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "scalar"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "scalar" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "scalar" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         *)'
LINE:         *)
+ [[         *) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         *) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        *)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "unknown"'
LINE:             echo "unknown"
+ [[             echo "unknown" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         *) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         *) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "unknown" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "unknown" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "unknown"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ;;'
LINE:             ;;
+ [[             ;; =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "unknown" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "unknown" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ;; =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ;;'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     esac'
LINE:     esac
+ [[     esac =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ;; =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ;; =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     esac =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    esac'
+ continue
+ IFS=
+ read -r line
+ [[ -n } ]]
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     esac =~ ^}$ ]]
+ [[ false == false ]]
+ [[     esac =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ set +x
********************** Processing script name: /Users/mps/projects/AI-PROJECTS/venv-build-checker/bin/shinclude/venv_funcs.sh
********************** Processing script markdown file: docs/shdoc/bin/shinclude/scripts/venv_funcs.sh.md
Generating markdown for script: venv_funcs.sh
+ IFS=
+ read -r line
+ echo 'LINE: #!/bin/bash'
LINE: #!/bin/bash
+ [[ #!/bin/bash =~ ^#! ]]
+ echo '**************************  Found shebang line'
**************************  Found shebang line
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found blank or single comment line at beginning of script'
**************************  Found blank or single comment line at beginning of script
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts'
LINE: # ## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts
+ [[ # ## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts =~ ^#! ]]
+ [[ true == true ]]
+ [[ # ## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts =~ ^[[:space:]]*$ ]]
+ [[ # ## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - This script provides a collection of functions to manage conda virtual environments.'
LINE: #   - This script provides a collection of functions to manage conda virtual environments.
+ [[ #   - This script provides a collection of functions to manage conda virtual environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - This script provides a collection of functions to manage conda virtual environments. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - This script provides a collection of functions to manage conda virtual environments.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Functions include creating, deleting, switching, and cloning environments, among others.'
LINE: #   - Functions include creating, deleting, switching, and cloning environments, among others.
+ [[ #   - Functions include creating, deleting, switching, and cloning environments, among others. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Functions include creating, deleting, switching, and cloning environments, among others. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Functions include creating, deleting, switching, and cloning environments, among others.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Source this script in other bash scripts to import the virtual environment management functions.'
LINE: #   - Source this script in other bash scripts to import the virtual environment management functions.
+ [[ #   - Source this script in other bash scripts to import the virtual environment management functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in other bash scripts to import the virtual environment management functions. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Source this script in other bash scripts to import the virtual environment management functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - For example, in another script: `source venv_funcs.sh`.'
LINE: #   - For example, in another script: `source venv_funcs.sh`.
+ [[ #   - For example, in another script: `source venv_funcs.sh`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - For example, in another script: `source venv_funcs.sh`. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - For example, in another script: `source venv_funcs.sh`.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None. All input is handled by the individual functions.'
LINE: #   - None. All input is handled by the individual functions.
+ [[ #   - None. All input is handled by the individual functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - None. All input is handled by the individual functions. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - None. All input is handled by the individual functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Output**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The script provides various virtual environment management functions for use in other bash scripts.'
LINE: #   - The script provides various virtual environment management functions for use in other bash scripts.
+ [[ #   - The script provides various virtual environment management functions for use in other bash scripts. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - The script provides various virtual environment management functions for use in other bash scripts. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - The script provides various virtual environment management functions for use in other bash scripts.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Some functions may return specific error codes or print error messages to STDERR.'
LINE: #   - Some functions may return specific error codes or print error messages to STDERR.
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Some functions may return specific error codes or print error messages to STDERR.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Refer to individual function documentation for details.'
LINE: #   - Refer to individual function documentation for details.
+ [[ #   - Refer to individual function documentation for details. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Refer to individual function documentation for details. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Refer to individual function documentation for details.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Internal Variables**'
LINE: # - **Internal Variables**
+ [[ # - **Internal Variables** =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Internal Variables** =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Internal Variables**\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.'
LINE: #   - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.
+ [[ #   - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - __VENV_PREFIX The prefix of the VENV'
LINE: #   - __VENV_PREFIX The prefix of the VENV
+ [[ #   - __VENV_PREFIX The prefix of the VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - __VENV_PREFIX The prefix of the VENV =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - __VENV_PREFIX The prefix of the VENV\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - __VENV_DESC   A very short description of the VENV.'
LINE: #   - __VENV_DESC   A very short description of the VENV.
+ [[ #   - __VENV_DESC   A very short description of the VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - __VENV_DESC   A very short description of the VENV. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - __VENV_DESC   A very short description of the VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Functions**:'
LINE: # - **Functions**:
+ [[ # - **Functions**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Functions**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Functions**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `push_venv()`: Specialized push the default VENV onto the stack.'
LINE: #   - `push_venv()`: Specialized push the default VENV onto the stack.
+ [[ #   - `push_venv()`: Specialized push the default VENV onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `push_venv()`: Specialized push the default VENV onto the stack. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `push_venv()`: Specialized push the default VENV onto the stack.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `pop_venv()`: Specialized pop the VENV off the stack and decrement.'
LINE: #   - `pop_venv()`: Specialized pop the VENV off the stack and decrement.
+ [[ #   - `pop_venv()`: Specialized pop the VENV off the stack and decrement. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv()`: Specialized pop the VENV off the stack and decrement. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `pop_venv()`: Specialized pop the VENV off the stack and decrement.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `__set_venv_vars()`: Sets internal VENV variables.'
LINE: #   - `__set_venv_vars()`: Sets internal VENV variables.
+ [[ #   - `__set_venv_vars()`: Sets internal VENV variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars()`: Sets internal VENV variables. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `__set_venv_vars()`: Sets internal VENV variables.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `snum()`: Force set the VENV Sequence number.'
LINE: #   - `snum()`: Force set the VENV Sequence number.
+ [[ #   - `snum()`: Force set the VENV Sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `snum()`: Force set the VENV Sequence number. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `snum()`: Force set the VENV Sequence number.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vpfx()`: Return the current VENV prefix.'
LINE: #   - `vpfx()`: Return the current VENV prefix.
+ [[ #   - `vpfx()`: Return the current VENV prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `vpfx()`: Return the current VENV prefix. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `vpfx()`: Return the current VENV prefix.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vnum()`: Return the current VENV sequence number.'
LINE: #   - `vnum()`: Return the current VENV sequence number.
+ [[ #   - `vnum()`: Return the current VENV sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `vnum()`: Return the current VENV sequence number. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `vnum()`: Return the current VENV sequence number.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vdsc()`: Return the current VENV description.'
LINE: #   - `vdsc()`: Return the current VENV description.
+ [[ #   - `vdsc()`: Return the current VENV description. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `vdsc()`: Return the current VENV description. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `vdsc()`: Return the current VENV description.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `cact()`: Change active VENV.'
LINE: #   - `cact()`: Change active VENV.
+ [[ #   - `cact()`: Change active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `cact()`: Change active VENV. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `cact()`: Change active VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `dact()`: Deactivate the current VENV.'
LINE: #   - `dact()`: Deactivate the current VENV.
+ [[ #   - `dact()`: Deactivate the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `dact()`: Deactivate the current VENV. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `dact()`: Deactivate the current VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `pact()`: Switch to the Previous Active VENV.'
LINE: #   - `pact()`: Switch to the Previous Active VENV.
+ [[ #   - `pact()`: Switch to the Previous Active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `pact()`: Switch to the Previous Active VENV. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `pact()`: Switch to the Previous Active VENV.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `lenv()`: List All Current VENVs.'
LINE: #   - `lenv()`: List All Current VENVs.
+ [[ #   - `lenv()`: List All Current VENVs. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `lenv()`: List All Current VENVs. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `lenv()`: List All Current VENVs.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `lastenv()`: Retrieve the Last Environment with a Given Prefix.'
LINE: #   - `lastenv()`: Retrieve the Last Environment with a Given Prefix.
+ [[ #   - `lastenv()`: Retrieve the Last Environment with a Given Prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `lastenv()`: Retrieve the Last Environment with a Given Prefix. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `lastenv()`: Retrieve the Last Environment with a Given Prefix.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `benv()`: Create a New Base Virtual Environment.'
LINE: #   - `benv()`: Create a New Base Virtual Environment.
+ [[ #   - `benv()`: Create a New Base Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `benv()`: Create a New Base Virtual Environment. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `benv()`: Create a New Base Virtual Environment.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `nenv()`: Create a New Virtual Environment in a Series.'
LINE: #   - `nenv()`: Create a New Virtual Environment in a Series.
+ [[ #   - `nenv()`: Create a New Virtual Environment in a Series. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - `nenv()`: Create a New Virtual Environment in a Series. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - `nenv()`: Create a New Virtual Environment in a Series.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage Example**:'
LINE: # - **Usage Example**:
+ [[ # - **Usage Example**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage Example**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Usage Example**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   ```shellscript'
LINE: #   ```shellscript
+ [[ #   ```shellscript =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   ```shellscript =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  ```shellscript\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   source venv_funcs.sh'
LINE: #   source venv_funcs.sh
+ [[ #   source venv_funcs.sh =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   source venv_funcs.sh =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  source venv_funcs.sh\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   benv myenv'
LINE: #   benv myenv
+ [[ #   benv myenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   benv myenv =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  benv myenv\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   cact myenv'
LINE: #   cact myenv
+ [[ #   cact myenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   cact myenv =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  cact myenv\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   ```'
LINE: #   ```
+ [[ #   ``` =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   ``` =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  ```\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Dependencies**: '
LINE: # - **Dependencies**: 
+ [[ # - **Dependencies**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Dependencies**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Dependencies**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - This script depends on the `conda` command-line tool for managing virtual environments.'
LINE: #   - This script depends on the `conda` command-line tool for managing virtual environments.
+ [[ #   - This script depends on the `conda` command-line tool for managing virtual environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - This script depends on the `conda` command-line tool for managing virtual environments. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - This script depends on the `conda` command-line tool for managing virtual environments.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The `util_funcs.sh` script is also required and should be located in the same directory as this script.'
LINE: #   - The `util_funcs.sh` script is also required and should be located in the same directory as this script.
+ [[ #   - The `util_funcs.sh` script is also required and should be located in the same directory as this script. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - The `util_funcs.sh` script is also required and should be located in the same directory as this script. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - The `util_funcs.sh` script is also required and should be located in the same directory as this script.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Notes**:'
LINE: # - **Notes**:
+ [[ # - **Notes**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Notes**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Notes**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - This script assumes that the `conda` command is available in the system'\''s PATH.'
LINE: #   - This script assumes that the `conda` command is available in the system's PATH.
+ [[ #   - This script assumes that the `conda` command is available in the system's PATH. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - This script assumes that the `conda` command is available in the system's PATH. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - This script assumes that the `conda` command is available in the system'\''s PATH.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - It is recommended to source this script in other scripts rather than executing it directly.'
LINE: #   - It is recommended to source this script in other scripts rather than executing it directly.
+ [[ #   - It is recommended to source this script in other scripts rather than executing it directly. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - It is recommended to source this script in other scripts rather than executing it directly. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - It is recommended to source this script in other scripts rather than executing it directly.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Make sure to set the appropriate permissions on this script to allow execution.'
LINE: #   - Make sure to set the appropriate permissions on this script to allow execution.
+ [[ #   - Make sure to set the appropriate permissions on this script to allow execution. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Make sure to set the appropriate permissions on this script to allow execution. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Make sure to set the appropriate permissions on this script to allow execution.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Author**: [Your Name]'
LINE: # - **Author**: [Your Name]
+ [[ # - **Author**: [Your Name] =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Author**: [Your Name] =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Author**: [Your Name]\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Last Modified**: [Date]'
LINE: # - **Last Modified**: [Date]
+ [[ # - **Last Modified**: [Date] =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Last Modified**: [Date] =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Last Modified**: [Date]\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Version**: [Version Number]'
LINE: # - **Version**: [Version Number]
+ [[ # - **Version**: [Version Number] =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Version**: [Version Number] =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Version**: [Version Number]\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  End of script documentation'
**************************  End of script documentation
+ echo -e '# venv_funcs.sh\n## Description\n## venv_funcs.sh - Virtual Environment Management Functions for Bash Scripts\n#\n- **Purpose**: \n  - This script provides a collection of functions to manage conda virtual environments.\n  - Functions include creating, deleting, switching, and cloning environments, among others.\n#\n- **Usage**: \n  - Source this script in other bash scripts to import the virtual environment management functions.\n  - For example, in another script: `source venv_funcs.sh`.\n#\n- **Input Parameters**: \n  - None. All input is handled by the individual functions.\n#\n- **Output**: \n  - The script provides various virtual environment management functions for use in other bash scripts.\n#\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n#\n- **Internal Variables**\n  - __VENV_NUM    The sequence of the venv in a "__VENV_PREFIX" series.\n  - __VENV_PREFIX The prefix of the VENV\n  - __VENV_DESC   A very short description of the VENV.\n#\n- **Functions**:\n  - `push_venv()`: Specialized push the default VENV onto the stack.\n  - `pop_venv()`: Specialized pop the VENV off the stack and decrement.\n  - `__set_venv_vars()`: Sets internal VENV variables.\n  - `snum()`: Force set the VENV Sequence number.\n  - `vpfx()`: Return the current VENV prefix.\n  - `vnum()`: Return the current VENV sequence number.\n  - `vdsc()`: Return the current VENV description.\n  - `cact()`: Change active VENV.\n  - `dact()`: Deactivate the current VENV.\n  - `pact()`: Switch to the Previous Active VENV.\n  - `lenv()`: List All Current VENVs.\n  - `lastenv()`: Retrieve the Last Environment with a Given Prefix.\n  - `benv()`: Create a New Base Virtual Environment.\n  - `nenv()`: Create a New Virtual Environment in a Series.\n#\n- **Usage Example**:\n  ```shellscript\n  source venv_funcs.sh\n  benv myenv\n  cact myenv\n  ```\n#\n- **Dependencies**: \n  - This script depends on the `conda` command-line tool for managing virtual environments.\n  - The `util_funcs.sh` script is also required and should be located in the same directory as this script.\n#\n- **Notes**:\n  - This script assumes that the `conda` command is available in the system'\''s PATH.\n  - It is recommended to source this script in other scripts rather than executing it directly.\n  - Make sure to set the appropriate permissions on this script to allow execution.\n#\n- **Author**: [Your Name]\n- **Last Modified**: [Date]\n#\n- **Version**: [Version Number]\n#\n'
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Capture the fully qualified path of the sourced script'
LINE: # Capture the fully qualified path of the sourced script
+ [[ # Capture the fully qualified path of the sourced script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Capture the fully qualified path of the sourced script =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Capture the fully qualified path of the sourced script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
LINE: [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^#+ ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Don'\''t source this script if it'\''s already been sourced.'
LINE: # Don't source this script if it's already been sourced.
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -L "${BASH_SOURCE[0]}" ] && THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") || THIS_SCRIPT="${BASH_SOURCE[0]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: echo "Sourcing: ${THIS_SCRIPT}"'
LINE: echo "Sourcing: ${THIS_SCRIPT}"
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Extract script name, directory, and arguments'
LINE: # Extract script name, directory, and arguments
+ [[ # Extract script name, directory, and arguments =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Extract script name, directory, and arguments =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Extract script name, directory, and arguments\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: MY_NAME=$(basename ${THIS_SCRIPT})'
LINE: MY_NAME=$(basename ${THIS_SCRIPT})
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^#+ ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^[a-zA-Z_#] ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: MY_NAME=$(basename ${THIS_SCRIPT})'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: MY_NAME=$(basename ${THIS_SCRIPT})'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: MY_NAME=$(basename ${THIS_SCRIPT})'
venv_funcs.sh WARNING(30): Invalid line type found: MY_NAME=$(basename ${THIS_SCRIPT})
+ previous_line='MY_NAME=$(basename ${THIS_SCRIPT})'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
LINE: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ MY_NAME=$(basename ${THIS_SCRIPT}) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^#+ ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")
+ previous_line='__VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")")'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_BASE=$(dirname "${__VENV_BIN}")'
LINE: __VENV_BASE=$(dirname "${__VENV_BIN}")
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BIN=$(dirname "$(dirname "${THIS_SCRIPT}")") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^#+ ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_BASE=$(dirname "${__VENV_BIN}")
+ previous_line='__VENV_BASE=$(dirname "${__VENV_BIN}")'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_ARGS=$*'
LINE: __VENV_ARGS=$*
+ [[ __VENV_ARGS=$* =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_BASE=$(dirname "${__VENV_BIN}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_ARGS=$* =~ ^#+ ]]
+ [[ __VENV_ARGS=$* =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_ARGS=$* =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_ARGS=$* =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_ARGS=$*'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_ARGS=$*'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_ARGS=$*'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_ARGS=$*
+ previous_line='__VENV_ARGS=$*'
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
LINE: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_ARGS=$* =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^#+ ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"
+ previous_line='__VENV_INCLUDE="${__VENV_BASE}/bin/shinclude"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INCLUDE="${__VENV_BASE}/bin/shinclude" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \'
LINE: [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 )'
LINE:     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 )
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^}$ ]]
+ [[ false == false ]]
+ [[ [ -f "${__VENV_INCLUDE}/util_funcs.sh" ] && . "${__VENV_INCLUDE}/util_funcs.sh" \ =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 )'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     || ( echo "Could not find util_funcs.sh in INCLUDEDIR: ${__VENV_INCLUDE}" && exit 1 ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INTERNAL_FUNCTIONS=('
LINE: __VENV_INTERNAL_FUNCTIONS=(
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=(
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ IFS=
+ read -r line
+ echo 'LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}'
LINE:     ${__VENV_INTERNAL_FUNCTIONS[@]}
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ false == false ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ${__VENV_INTERNAL_FUNCTIONS[@]}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "push_venv"'
LINE:     "push_venv"
+ [[     "push_venv" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ${__VENV_INTERNAL_FUNCTIONS[@]} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "push_venv" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "push_venv" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "push_venv"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "pop_venv"'
LINE:     "pop_venv"
+ [[     "pop_venv" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "push_venv" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "push_venv" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "pop_venv" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "pop_venv" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "pop_venv"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "__set_venv_vars"'
LINE:     "__set_venv_vars"
+ [[     "__set_venv_vars" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "pop_venv" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "pop_venv" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "__set_venv_vars" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "__set_venv_vars" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "__set_venv_vars"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: )'
LINE: )
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "__set_venv_vars" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     "__set_venv_vars" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # This is so we can pass a return code up through sub-shells since set values are lost in subshells.'
LINE: # This is so we can pass a return code up through sub-shells since set values are lost in subshells.
+ [[ # This is so we can pass a return code up through sub-shells since set values are lost in subshells. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # This is so we can pass a return code up through sub-shells since set values are lost in subshells. =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='This is so we can pass a return code up through sub-shells since set values are lost in subshells.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # May or may not be a good ide, but we might want to pass get the return value of our function calls,'
LINE: # May or may not be a good ide, but we might want to pass get the return value of our function calls,
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # May or may not be a good ide, but we might want to pass get the return value of our function calls, =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='May or may not be a good ide, but we might want to pass get the return value of our function calls,\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd'
LINE: # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='and not that o fthe last command that ren in the function call which may me 0 for an echo comamnd\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # when it'\''s the last command in th efunction and we want the return code of the function.'
LINE: # when it's the last command in th efunction and we want the return code of the function.
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # when it's the last command in th efunction and we want the return code of the function. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='when it'\''s the last command in th efunction and we want the return code of the function.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # This is something we would like where the echo sattement will return a value lik ethe last item'
LINE: # This is something we would like where the echo sattement will return a value lik ethe last item
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # This is something we would like where the echo sattement will return a value lik ethe last item =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='This is something we would like where the echo sattement will return a value lik ethe last item\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use'
LINE: # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='poped off the stack. So instead of a sub-shell, whcih will also not return a value, we can use\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # this to set the return code and exit the function passing thie to return or exit.  echo would be'
LINE: # this to set the return code and exit the function passing thie to return or exit.  echo would be
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # this to set the return code and exit the function passing thie to return or exit.  echo would be =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='this to set the return code and exit the function passing thie to return or exit.  echo would be\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # the last command in the function and we would get the return code of the function.'
LINE: # the last command in the function and we would get the return code of the function.
+ [[ # the last command in the function and we would get the return code of the function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # the last command in the function and we would get the return code of the function. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # the last command in the function and we would get the return code of the function. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # the last command in the function and we would get the return code of the function. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='the last command in the function and we would get the return code of the function.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #__rc__ is internal aand is in a our function shell includes.'
LINE: #__rc__ is internal aand is in a our function shell includes.
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #__rc__ is internal aand is in a our function shell includes. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='#__rc__ is internal aand is in a our function shell includes.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # It woudl be nice to come up with a fairly "automatuc" way to do this.'
LINE: # It woudl be nice to come up with a fairly "automatuc" way to do this.
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # It woudl be nice to come up with a fairly "automatuc" way to do this. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='It woudl be nice to come up with a fairly "automatuc" way to do this.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __rc__=0'
LINE: __rc__=0
+ [[ __rc__=0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __rc__=0 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __rc__=0 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __rc__=0 =~ ^#+ ]]
+ [[ __rc__=0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __rc__=0 =~ ^[a-zA-Z_#] ]]
+ [[ __rc__=0 =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __rc__=0'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __rc__=0'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __rc__=0'
venv_funcs.sh WARNING(30): Invalid line type found: __rc__=0
+ previous_line=__rc__=0
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __rc__=0 =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Initialize the stack'
LINE: # Initialize the stack
+ [[ # Initialize the stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initialize the stack =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Initialize the stack\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_STACK=()'
LINE: __VENV_STACK=()
+ [[ __VENV_STACK=() =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_STACK=() =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_STACK=() =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_STACK=() =~ ^#+ ]]
+ [[ __VENV_STACK=() =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_STACK=() =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_STACK=() =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_STACK=()'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_STACK=()'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_STACK=()'
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_STACK=()
+ previous_line='__VENV_STACK=()'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_STACK=() =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: push_venv'
LINE: # # Function: push_venv
+ [[ # # Function: push_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: push_venv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: push_venv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `push_venv` - Specialized push the default VENV onto the stack.'
LINE: # `push_venv` - Specialized push the default VENV onto the stack.
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `push_venv` - Specialized push the default VENV onto the stack. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`push_venv` - Specialized push the default VENV onto the stack.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Pushes the default virtual environment onto the stack.'
LINE: #   - Pushes the default virtual environment onto the stack.
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pushes the default virtual environment onto the stack. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Pushes the default virtual environment onto the stack.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `push_venv`'
LINE: #   - `push_venv`
+ [[ #   - `push_venv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `push_venv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_venv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `push_venv` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `push_venv`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Modifies the stack to include the current environment.'
LINE: #   - Modifies the stack to include the current environment.
+ [[ #   - Modifies the stack to include the current environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to include the current environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to include the current environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to include the current environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Modifies the stack to include the current environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: push_venv() {'
LINE: push_venv() {
+ [[ push_venv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ push_venv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_venv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ push_venv() { =~ ^#+ ]]
+ [[ push_venv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=push_venv
+ current_function_name=push_venv
+ extracted_markdown='## push_venv\n# Function: push_venv\n`push_venv` - Specialized push the default VENV onto the stack.\n## Description\n- **Purpose**: \n  - Pushes the default virtual environment onto the stack.\n- **Usage**: \n  - `push_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to include the current environment.\n- **Exceptions**: \n  - None\n'
+ echo -e '## push_venv\n# Function: push_venv\n`push_venv` - Specialized push the default VENV onto the stack.\n## Description\n- **Purpose**: \n  - Pushes the default virtual environment onto the stack.\n- **Usage**: \n  - `push_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to include the current environment.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}"'
LINE:     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}"
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     push_stack __VENV_STACK "${CONDA_DEFAULT_ENV}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: pop_venv'
LINE: # # Function: pop_venv
+ [[ # # Function: pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pop_venv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: pop_venv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `pop_venv` - Specialized pop the VENV off the stack and decrement.'
LINE: # `pop_venv` - Specialized pop the VENV off the stack and decrement.
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pop_venv` - Specialized pop the VENV off the stack and decrement. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`pop_venv` - Specialized pop the VENV off the stack and decrement.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Pops the virtual environment off the stack and decrements.'
LINE: #   - Pops the virtual environment off the stack and decrements.
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Pops the virtual environment off the stack and decrements. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Pops the virtual environment off the stack and decrements.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `pop_venv`'
LINE: #   - `pop_venv`
+ [[ #   - `pop_venv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pop_venv` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `pop_venv`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Modifies the stack to remove the current environment.'
LINE: #   - Modifies the stack to remove the current environment.
+ [[ #   - Modifies the stack to remove the current environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to remove the current environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to remove the current environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Modifies the stack to remove the current environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Modifies the stack to remove the current environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: pop_venv() {'
LINE: pop_venv() {
+ [[ pop_venv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pop_venv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_venv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pop_venv() { =~ ^#+ ]]
+ [[ pop_venv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=pop_venv
+ current_function_name=pop_venv
+ extracted_markdown='## pop_venv\n# Function: pop_venv\n`pop_venv` - Specialized pop the VENV off the stack and decrement.\n## Description\n- **Purpose**: \n  - Pops the virtual environment off the stack and decrements.\n- **Usage**: \n  - `pop_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to remove the current environment.\n- **Exceptions**: \n  - None\n'
+ echo -e '## pop_venv\n# Function: pop_venv\n`pop_venv` - Specialized pop the VENV off the stack and decrement.\n## Description\n- **Purpose**: \n  - Pops the virtual environment off the stack and decrements.\n- **Usage**: \n  - `pop_venv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Modifies the stack to remove the current environment.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local stack_value'
LINE:     local stack_value
+ [[     local stack_value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_value =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local stack_value'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     pop_stack __VENV_STACK'
LINE:     pop_stack __VENV_STACK
+ [[     pop_stack __VENV_STACK =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_stack __VENV_STACK =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     pop_stack __VENV_STACK =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    pop_stack __VENV_STACK'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     stack_value=${__sv__}'
LINE:     stack_value=${__sv__}
+ [[     stack_value=${__sv__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_stack __VENV_STACK =~ ^}$ ]]
+ [[ false == false ]]
+ [[     pop_stack __VENV_STACK =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value=${__sv__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     stack_value=${__sv__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    stack_value=${__sv__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     return ${__rc__}'
LINE:     return ${__rc__}
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value=${__sv__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     stack_value=${__sv__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: __set_venv_vars'
LINE: # # Function: __set_venv_vars
+ [[ # # Function: __set_venv_vars =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: __set_venv_vars =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: __set_venv_vars\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `__set_venv_vars` - Sets internal VENV variables.'
LINE: # `__set_venv_vars` - Sets internal VENV variables.
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__set_venv_vars` - Sets internal VENV variables. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`__set_venv_vars` - Sets internal VENV variables.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Sets internal variables related to virtual environment management.'
LINE: #   - Sets internal variables related to virtual environment management.
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Sets internal variables related to virtual environment management. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Sets internal variables related to virtual environment management.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `__set_venv_vars`'
LINE: #   - `__set_venv_vars`
+ [[ #   - `__set_venv_vars` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__set_venv_vars` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `__set_venv_vars`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Initializes internal VENV variables.'
LINE: #   - Initializes internal VENV variables.
+ [[ #   - Initializes internal VENV variables. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Initializes internal VENV variables. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes internal VENV variables. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Initializes internal VENV variables. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Initializes internal VENV variables.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __set_venv_vars() {'
LINE: __set_venv_vars() {
+ [[ __set_venv_vars() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __set_venv_vars() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __set_venv_vars() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __set_venv_vars() { =~ ^#+ ]]
+ [[ __set_venv_vars() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=__set_venv_vars
+ current_function_name=__set_venv_vars
+ extracted_markdown='## __set_venv_vars\n# Function: __set_venv_vars\n`__set_venv_vars` - Sets internal VENV variables.\n## Description\n- **Purpose**: \n  - Sets internal variables related to virtual environment management.\n- **Usage**: \n  - `__set_venv_vars`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Initializes internal VENV variables.\n- **Exceptions**: \n  - None\n'
+ echo -e '## __set_venv_vars\n# Function: __set_venv_vars\n`__set_venv_vars` - Sets internal VENV variables.\n## Description\n- **Purpose**: \n  - Sets internal variables related to virtual environment management.\n- **Usage**: \n  - `__set_venv_vars`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Initializes internal VENV variables.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_PREFIX=$(echo "$*" | cut -d '\''.'\'' -f 1)'
LINE:     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1)
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_PREFIX=$(echo "$*" | cut -d '\''.'\'' -f 1)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_DESC=$(echo "$*" | cut -d '\''.'\'' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '\''.'\'' -f 2)'
LINE:     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2)
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_PREFIX=$(echo "$*" | cut -d '.' -f 1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_DESC=$(echo "$*" | cut -d '\''.'\'' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '\''.'\'' -f 2)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_DESC=$(echo "$*" | cut -d '.' -f 3-) &&  __VENV_NUM=$(echo "$*" | cut -d '.' -f 2) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: snum'
LINE: # # Function: snum
+ [[ # # Function: snum =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: snum =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: snum\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `snum` - Force set the VENV Sequence number.'
LINE: # `snum` - Force set the VENV Sequence number.
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `snum` - Force set the VENV Sequence number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`snum` - Force set the VENV Sequence number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Forces the setting of the VENV sequence number.'
LINE: #   - Forces the setting of the VENV sequence number.
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Forces the setting of the VENV sequence number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Forces the setting of the VENV sequence number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `snum [number]`'
LINE: #   - `snum [number]`
+ [[ #   - `snum [number]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `snum [number]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `snum [number]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `snum [number]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `snum [number]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `number` (integer) - The sequence number to set.'
LINE: #   - `number` (integer) - The sequence number to set.
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `number` (integer) - The sequence number to set. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `number` (integer) - The sequence number to set.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Updates the sequence number for the current VENV.'
LINE: #   - Updates the sequence number for the current VENV.
+ [[ #   - Updates the sequence number for the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Updates the sequence number for the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Updates the sequence number for the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Updates the sequence number for the current VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Updates the sequence number for the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: snum() {'
LINE: snum() {
+ [[ snum() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ snum() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ snum() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ snum() { =~ ^#+ ]]
+ [[ snum() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=snum
+ current_function_name=snum
+ extracted_markdown='## snum\n# Function: snum\n`snum` - Force set the VENV Sequence number.\n## Description\n- **Purpose**: \n  - Forces the setting of the VENV sequence number.\n- **Usage**: \n  - `snum [number]`\n- **Input Parameters**: \n  - `number` (integer) - The sequence number to set.\n- **Output**: \n  - Updates the sequence number for the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## snum\n# Function: snum\n`snum` - Force set the VENV Sequence number.\n## Description\n- **Purpose**: \n  - Forces the setting of the VENV sequence number.\n- **Usage**: \n  - `snum [number]`\n- **Input Parameters**: \n  - `number` (integer) - The sequence number to set.\n- **Output**: \n  - Updates the sequence number for the current VENV.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local new_num=$1'
LINE:     local new_num=$1
+ [[     local new_num=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local new_num=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_num=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local new_num=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local new_num=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_num=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local new_num=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Validate that a number is actually provided'
LINE:     # Validate that a number is actually provided
+ [[     # Validate that a number is actually provided =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Validate that a number is actually provided =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that a number is actually provided =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate that a number is actually provided =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Validate that a number is actually provided'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${new_num}" ]; then'
LINE:     if [ -z "${new_num}" ]; then
+ [[     if [ -z "${new_num}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that a number is actually provided =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate that a number is actually provided =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${new_num}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${new_num}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${new_num}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: No sequence number provided." >&2'
LINE:         echo "Error: No sequence number provided." >&2
+ [[         echo "Error: No sequence number provided." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${new_num}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${new_num}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No sequence number provided." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No sequence number provided." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: No sequence number provided." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No sequence number provided." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No sequence number provided." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Validate that the provided number is numeric'
LINE:     # Validate that the provided number is numeric
+ [[     # Validate that the provided number is numeric =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Validate that the provided number is numeric =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is numeric =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate that the provided number is numeric =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Validate that the provided number is numeric'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then'
LINE:     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is numeric =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate that the provided number is numeric =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Sequence number must be numeric." >&2'
LINE:         echo "Error: Sequence number must be numeric." >&2
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if ! [[ "${new_num}" =~ ^[0-9]+$ ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Sequence number must be numeric." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Sequence number must be numeric." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Sequence number must be numeric." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Validate that the provided number is within a valid range (00-99)'
LINE:     # Validate that the provided number is within a valid range (00-99)
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate that the provided number is within a valid range (00-99) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Validate that the provided number is within a valid range (00-99)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then'
LINE:     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate that the provided number is within a valid range (00-99) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Sequence number must be between 00 and 99." >&2'
LINE:         echo "Error: Sequence number must be between 00 and 99." >&2
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ "${new_num}" -lt 0 ] || [ "${new_num}" -gt 99 ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Sequence number must be between 00 and 99." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Sequence number must be between 00 and 99." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_NUM=$( zero_pad "${new_num}" )'
LINE:     __VENV_NUM=$( zero_pad "${new_num}" )
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_NUM=$( zero_pad "${new_num}" )'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NUM=$( zero_pad "${new_num}" ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: vpfx'
LINE: # # Function: vpfx
+ [[ # # Function: vpfx =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vpfx =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: vpfx\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `vpfx` - Return the current VENV prefix.'
LINE: # `vpfx` - Return the current VENV prefix.
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vpfx` - Return the current VENV prefix. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`vpfx` - Return the current VENV prefix.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns the prefix of the current virtual environment.'
LINE: #   - Returns the prefix of the current virtual environment.
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the prefix of the current virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns the prefix of the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vpfx`'
LINE: #   - `vpfx`
+ [[ #   - `vpfx` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vpfx` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vpfx` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vpfx` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `vpfx`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The prefix of the current VENV.'
LINE: #   - The prefix of the current VENV.
+ [[ #   - The prefix of the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The prefix of the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The prefix of the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The prefix of the current VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The prefix of the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: vpfx() {'
LINE: vpfx() {
+ [[ vpfx() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vpfx() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vpfx() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vpfx() { =~ ^#+ ]]
+ [[ vpfx() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=vpfx
+ current_function_name=vpfx
+ extracted_markdown='## vpfx\n# Function: vpfx\n`vpfx` - Return the current VENV prefix.\n## Description\n- **Purpose**: \n  - Returns the prefix of the current virtual environment.\n- **Usage**: \n  - `vpfx`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The prefix of the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## vpfx\n# Function: vpfx\n`vpfx` - Return the current VENV prefix.\n## Description\n- **Purpose**: \n  - Returns the prefix of the current virtual environment.\n- **Usage**: \n  - `vpfx`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The prefix of the current VENV.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${__VENV_PREFIX}" ]; then'
LINE:     if [ -z "${__VENV_PREFIX}" ]; then
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${__VENV_PREFIX}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${__VENV_PREFIX}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: No VENV prefix has been set." >&2'
LINE:         echo "Error: No VENV prefix has been set." >&2
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${__VENV_PREFIX}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV prefix has been set." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: No VENV prefix has been set." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV prefix has been set." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "${__VENV_PREFIX}"'
LINE:     echo "${__VENV_PREFIX}"
+ [[     echo "${__VENV_PREFIX}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${__VENV_PREFIX}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "${__VENV_PREFIX}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${__VENV_PREFIX}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: vnum'
LINE: # # Function: vnum
+ [[ # # Function: vnum =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vnum =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: vnum\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `vnum` - Return the current VENV sequence number.'
LINE: # `vnum` - Return the current VENV sequence number.
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vnum` - Return the current VENV sequence number. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`vnum` - Return the current VENV sequence number.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns the sequence number of the current virtual environment.'
LINE: #   - Returns the sequence number of the current virtual environment.
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the sequence number of the current virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns the sequence number of the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vnum`'
LINE: #   - `vnum`
+ [[ #   - `vnum` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vnum` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vnum` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vnum` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `vnum`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The sequence number of the current VENV.'
LINE: #   - The sequence number of the current VENV.
+ [[ #   - The sequence number of the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The sequence number of the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sequence number of the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The sequence number of the current VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The sequence number of the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: vnum() {'
LINE: vnum() {
+ [[ vnum() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vnum() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vnum() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vnum() { =~ ^#+ ]]
+ [[ vnum() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=vnum
+ current_function_name=vnum
+ extracted_markdown='## vnum\n# Function: vnum\n`vnum` - Return the current VENV sequence number.\n## Description\n- **Purpose**: \n  - Returns the sequence number of the current virtual environment.\n- **Usage**: \n  - `vnum`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The sequence number of the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## vnum\n# Function: vnum\n`vnum` - Return the current VENV sequence number.\n## Description\n- **Purpose**: \n  - Returns the sequence number of the current virtual environment.\n- **Usage**: \n  - `vnum`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The sequence number of the current VENV.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${__VENV_NUM}" ]; then'
LINE:     if [ -z "${__VENV_NUM}" ]; then
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${__VENV_NUM}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${__VENV_NUM}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: No VENV sequence number has been set." >&2'
LINE:         echo "Error: No VENV sequence number has been set." >&2
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${__VENV_NUM}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV sequence number has been set." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: No VENV sequence number has been set." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "${__VENV_NUM}"'
LINE:     echo "${__VENV_NUM}"
+ [[     echo "${__VENV_NUM}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     echo "${__VENV_NUM}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_NUM}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${__VENV_NUM}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "${__VENV_NUM}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_NUM}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${__VENV_NUM}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: vdsc'
LINE: # # Function: vdsc
+ [[ # # Function: vdsc =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: vdsc =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: vdsc\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `vdsc` - Return the current VENV description.'
LINE: # `vdsc` - Return the current VENV description.
+ [[ # `vdsc` - Return the current VENV description. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `vdsc` - Return the current VENV description. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vdsc` - Return the current VENV description. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `vdsc` - Return the current VENV description. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`vdsc` - Return the current VENV description.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Returns the description of the current virtual environment.'
LINE: #   - Returns the description of the current virtual environment.
+ [[ #   - Returns the description of the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Returns the description of the current virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Returns the description of the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `vdsc`'
LINE: #   - `vdsc`
+ [[ #   - `vdsc` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `vdsc` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vdsc` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `vdsc` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `vdsc`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The description of the current VENV.'
LINE: #   - The description of the current VENV.
+ [[ #   - The description of the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The description of the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The description of the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The description of the current VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The description of the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: vdsc() {'
LINE: vdsc() {
+ [[ vdsc() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ vdsc() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vdsc() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ vdsc() { =~ ^#+ ]]
+ [[ vdsc() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=vdsc
+ current_function_name=vdsc
+ extracted_markdown='## vdsc\n# Function: vdsc\n`vdsc` - Return the current VENV description.\n## Description\n- **Purpose**: \n  - Returns the description of the current virtual environment.\n- **Usage**: \n  - `vdsc`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The description of the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## vdsc\n# Function: vdsc\n`vdsc` - Return the current VENV description.\n## Description\n- **Purpose**: \n  - Returns the description of the current virtual environment.\n- **Usage**: \n  - `vdsc`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - The description of the current VENV.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${__VENV_DESC}" ]; then'
LINE:     if [ -z "${__VENV_DESC}" ]; then
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${__VENV_DESC}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${__VENV_DESC}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: No VENV sequence number has been set." >&2'
LINE:         echo "Error: No VENV sequence number has been set." >&2
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${__VENV_DESC}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV sequence number has been set." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: No VENV sequence number has been set." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV sequence number has been set." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "${__VENV_DESC}"'
LINE:     echo "${__VENV_DESC}"
+ [[     echo "${__VENV_DESC}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     echo "${__VENV_DESC}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_DESC}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${__VENV_DESC}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "${__VENV_DESC}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${__VENV_DESC}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${__VENV_DESC}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: cact'
LINE: # # Function: cact
+ [[ # # Function: cact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: cact =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: cact\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `cact` - Change active VENV.'
LINE: # `cact` - Change active VENV.
+ [[ # `cact` - Change active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `cact` - Change active VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `cact` - Change active VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `cact` - Change active VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`cact` - Change active VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Changes the active virtual environment to the specified one.'
LINE: #   - Changes the active virtual environment to the specified one.
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Changes the active virtual environment to the specified one. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Changes the active virtual environment to the specified one.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `cact [env_name]`'
LINE: #   - `cact [env_name]`
+ [[ #   - `cact [env_name]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `cact [env_name]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cact [env_name]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cact [env_name]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `cact [env_name]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `env_name` (string) - The name of the environment to activate.'
LINE: #   - `env_name` (string) - The name of the environment to activate.
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to activate. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `env_name` (string) - The name of the environment to activate.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Activates the specified virtual environment.'
LINE: #   - Activates the specified virtual environment.
+ [[ #   - Activates the specified virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Activates the specified virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the specified virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the specified virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Activates the specified virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors if the environment does not exist.'
LINE: #   - Errors if the environment does not exist.
+ [[ #   - Errors if the environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors if the environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: cact() {'
LINE: cact() {
+ [[ cact() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ cact() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ cact() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ cact() { =~ ^#+ ]]
+ [[ cact() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=cact
+ current_function_name=cact
+ extracted_markdown='## cact\n# Function: cact\n`cact` - Change active VENV.\n## Description\n- **Purpose**: \n  - Changes the active virtual environment to the specified one.\n- **Usage**: \n  - `cact [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to activate.\n- **Output**: \n  - Activates the specified virtual environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ echo -e '## cact\n# Function: cact\n`cact` - Change active VENV.\n## Description\n- **Purpose**: \n  - Changes the active virtual environment to the specified one.\n- **Usage**: \n  - `cact [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to activate.\n- **Output**: \n  - Activates the specified virtual environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local new_env="$1"'
LINE:     local new_env="$1"
+ [[     local new_env="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local new_env="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_env="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local new_env="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local new_env="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Validate input'
LINE:     # Validate input
+ [[     # Validate input =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local new_env="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local new_env="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate input =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Validate input =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Validate input'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "$1" ]; then'
LINE:     if [ -z "$1" ]; then
+ [[     if [ -z "$1" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Validate input =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Validate input =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$1" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "$1" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: No VENV name provided." 1>&2'
LINE:         echo "Error: No VENV name provided." 1>&2
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$1" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No VENV name provided." 1>&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: No VENV name provided." 1>&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No VENV name provided." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then'
LINE:     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Environment ${new_env} is already active." 1>&2'
LINE:         echo "Environment ${new_env} is already active." 1>&2
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ ${CONDA_DEFAULT_ENV} == "$new_env" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Environment ${new_env} is already active." 1>&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Environment ${new_env} is already active." 1>&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return 0'
LINE:         return 0
+ [[         return 0 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Environment ${new_env} is already active." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 0 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return 0 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return 0'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 0 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return 0 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Pop from stack if top of stack matches the new environment'
LINE:     # Pop from stack if top of stack matches the new environment
+ [[     # Pop from stack if top of stack matches the new environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Pop from stack if top of stack matches the new environment =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Pop from stack if top of stack matches the new environment'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then'
LINE:     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Pop from stack if top of stack matches the new environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         pop_venv'
LINE:         pop_venv
+ [[         pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${__VENV_STACK[${#__VENV_STACK[@]}]}" == "$new_env" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         pop_venv =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        pop_venv'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[         pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Set variables'
LINE:     # Set variables
+ [[     # Set variables =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Set variables =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set variables =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Set variables =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Set variables'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_NAME=$1'
LINE:     __VENV_NAME=$1
+ [[     __VENV_NAME=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set variables =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Set variables =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NAME=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_NAME=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __set_venv_vars ${__VENV_NAME}'
LINE:     __set_venv_vars ${__VENV_NAME}
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NAME=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __set_venv_vars ${__VENV_NAME} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __set_venv_vars ${__VENV_NAME}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_PARMS=$(echo "$*" | cut -d '\''.'\'' -f 4-)'
LINE:     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-)
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __set_venv_vars ${__VENV_NAME} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_PARMS=$(echo "$*" | cut -d '\''.'\'' -f 4-)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Push new environment to stack'
LINE:     # Push new environment to stack
+ [[     # Push new environment to stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_PARMS=$(echo "$*" | cut -d '.' -f 4-) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Push new environment to stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Push new environment to stack =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Push new environment to stack'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     push_venv'
LINE:     push_venv
+ [[     push_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Push new environment to stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Push new environment to stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     push_venv =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    push_venv'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Deactivate current environment'
LINE:     # Deactivate current environment
+ [[     # Deactivate current environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     push_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[     push_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Deactivate current environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Deactivate current environment =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Deactivate current environment'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # dact'
LINE:     # dact
+ [[     # dact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Deactivate current environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Deactivate current environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # dact =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # dact =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # dact'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Activate new environment'
LINE:     # Activate new environment
+ [[     # Activate new environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # dact =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # dact =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate new environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Activate new environment =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Activate new environment'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Activating new environment: ${__VENV_NAME}..."'
LINE:     echo "Activating new environment: ${__VENV_NAME}..."
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate new environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Activate new environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Activating new environment: ${__VENV_NAME}..." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Activating new environment: ${__VENV_NAME}..."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; }'
LINE:     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; }
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Activating new environment: ${__VENV_NAME}..." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; }'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda activate "${__VENV_NAME}" || { echo "Error: Failed to activate new environment." 1>&2; return 1; } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: dact'
LINE: # # Function: dact
+ [[ # # Function: dact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: dact =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: dact\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `dact` - Deactivate the current VENV.'
LINE: # `dact` - Deactivate the current VENV.
+ [[ # `dact` - Deactivate the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `dact` - Deactivate the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `dact` - Deactivate the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `dact` - Deactivate the current VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`dact` - Deactivate the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Deactivates the current virtual environment.'
LINE: #   - Deactivates the current virtual environment.
+ [[ #   - Deactivates the current virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Deactivates the current virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `dact`'
LINE: #   - `dact`
+ [[ #   - `dact` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `dact` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dact` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `dact` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `dact`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Deactivates the current VENV.'
LINE: #   - Deactivates the current VENV.
+ [[ #   - Deactivates the current VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Deactivates the current VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: dact() {'
LINE: dact() {
+ [[ dact() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ dact() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ dact() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ dact() { =~ ^#+ ]]
+ [[ dact() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=dact
+ current_function_name=dact
+ extracted_markdown='## dact\n# Function: dact\n`dact` - Deactivate the current VENV.\n## Description\n- **Purpose**: \n  - Deactivates the current virtual environment.\n- **Usage**: \n  - `dact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Deactivates the current VENV.\n- **Exceptions**: \n  - None\n'
+ echo -e '## dact\n# Function: dact\n`dact` - Deactivate the current VENV.\n## Description\n- **Purpose**: \n  - Deactivates the current virtual environment.\n- **Usage**: \n  - `dact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Deactivates the current VENV.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local stack_value'
LINE:     local stack_value
+ [[     local stack_value =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local stack_value =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local stack_value =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local stack_value'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local stack_value =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local stack_value =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${CONDA_DEFAULT_ENV}" ]; then'
LINE:     if [ -z "${CONDA_DEFAULT_ENV}" ]; then
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${CONDA_DEFAULT_ENV}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "No conda environment is currently activated." 1>&2'
LINE:         echo "No conda environment is currently activated." 1>&2
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${CONDA_DEFAULT_ENV}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "No conda environment is currently activated." 1>&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "No conda environment is currently activated." 1>&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "No conda environment is currently activated." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     '
LINE:     
+ [[      =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !      =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    '
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Check if the environment actually exists'
LINE:     # Check if the environment actually exists
+ [[     # Check if the environment actually exists =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[      =~ ^}$ ]]
+ [[ false == false ]]
+ [[      =~ ^[[:space:]]*$ ]]
+ [[     # Check if the environment actually exists =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the environment actually exists =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the environment actually exists =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Check if the environment actually exists'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if ! conda info --envs | awk '\''{print $1}'\'' | grep -q -w "${CONDA_DEFAULT_ENV}"; then'
LINE:     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the environment actually exists =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the environment actually exists =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if ! conda info --envs | awk '\''{print $1}'\'' | grep -q -w "${CONDA_DEFAULT_ENV}"; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2'
LINE:         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if ! conda info --envs | awk '{print $1}' | grep -q -w "${CONDA_DEFAULT_ENV}"; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Optionally pop from stack'
LINE:         # Optionally pop from stack
+ [[         # Optionally pop from stack =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Warning: The environment ${CONDA_DEFAULT_ENV} does not exist. It might have been renamed or deleted." 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Optionally pop from stack =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Optionally pop from stack =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Optionally pop from stack'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then'
LINE:         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Optionally pop from stack =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Optionally pop from stack =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             pop_venv'
LINE:             pop_venv
+ [[             pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ "${__VENV_STACK[-1]}" == "${CONDA_DEFAULT_ENV}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             pop_venv =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            pop_venv'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[             pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return 17'
LINE:         return 17
+ [[         return 17 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 17 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return 17 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return 17'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return 17 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return 17 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2'
LINE:     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     conda deactivate'
LINE:     conda deactivate
+ [[     conda deactivate =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Deactivating: ${CONDA_DEFAULT_ENV}" 1>&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda deactivate =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda deactivate =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    conda deactivate'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     pop_venv'
LINE:     pop_venv
+ [[     pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda deactivate =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda deactivate =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     pop_venv =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    pop_venv'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     stack_value="${__sv__}"'
LINE:     stack_value="${__sv__}"
+ [[     stack_value="${__sv__}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[     pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value="${__sv__}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     stack_value="${__sv__}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    stack_value="${__sv__}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     return ${__rc__}'
LINE:     return ${__rc__}
+ [[     return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     stack_value="${__sv__}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     stack_value="${__sv__}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: pact'
LINE: # # Function: pact
+ [[ # # Function: pact =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pact =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: pact\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `pact` - Switch to the Previous Active VENV.'
LINE: # `pact` - Switch to the Previous Active VENV.
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pact` - Switch to the Previous Active VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`pact` - Switch to the Previous Active VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Switches to the previous active virtual environment.'
LINE: #   - Switches to the previous active virtual environment.
+ [[ #   - Switches to the previous active virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Switches to the previous active virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Switches to the previous active virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Switches to the previous active virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Switches to the previous active virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `pact`'
LINE: #   - `pact`
+ [[ #   - `pact` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pact` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pact` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pact` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `pact`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Activates the previous VENV.'
LINE: #   - Activates the previous VENV.
+ [[ #   - Activates the previous VENV. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Activates the previous VENV. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the previous VENV. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Activates the previous VENV. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Activates the previous VENV.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors if no previous environment exists.'
LINE: #   - Errors if no previous environment exists.
+ [[ #   - Errors if no previous environment exists. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if no previous environment exists. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if no previous environment exists. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if no previous environment exists. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors if no previous environment exists.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: pact() {'
LINE: pact() {
+ [[ pact() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pact() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pact() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pact() { =~ ^#+ ]]
+ [[ pact() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=pact
+ current_function_name=pact
+ extracted_markdown='## pact\n# Function: pact\n`pact` - Switch to the Previous Active VENV.\n## Description\n- **Purpose**: \n  - Switches to the previous active virtual environment.\n- **Usage**: \n  - `pact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Activates the previous VENV.\n- **Exceptions**: \n  - Errors if no previous environment exists.\n'
+ echo -e '## pact\n# Function: pact\n`pact` - Switch to the Previous Active VENV.\n## Description\n- **Purpose**: \n  - Switches to the previous active virtual environment.\n- **Usage**: \n  - `pact`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Activates the previous VENV.\n- **Exceptions**: \n  - Errors if no previous environment exists.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     pop_venv'
LINE:     pop_venv
+ [[     pop_venv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     pop_venv =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     pop_venv =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    pop_venv'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local previous_env=${__sv__}'
LINE:     local previous_env=${__sv__}
+ [[     local previous_env=${__sv__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     pop_venv =~ ^}$ ]]
+ [[ false == false ]]
+ [[     pop_venv =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__sv__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local previous_env=${__sv__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local previous_env=${__sv__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__sv__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local previous_env=${__sv__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Change to previous VENV'
LINE:     # Change to previous VENV
+ [[     # Change to previous VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Change to previous VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Change to previous VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Change to previous VENV =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Change to previous VENV'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ $? -eq 0 ]; then'
LINE:     if [ $? -eq 0 ]; then
+ [[     if [ $? -eq 0 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Change to previous VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Change to previous VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ $? -eq 0 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ $? -eq 0 ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ $? -eq 0 ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         cact "$previous_env"'
LINE:         cact "$previous_env"
+ [[         cact "$previous_env" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ $? -eq 0 ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ $? -eq 0 ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cact "$previous_env" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         cact "$previous_env" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        cact "$previous_env"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         pop_venv > /dev/null'
LINE:         pop_venv > /dev/null
+ [[         pop_venv > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cact "$previous_env" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         cact "$previous_env" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         pop_venv > /dev/null =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        pop_venv > /dev/null'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         pop_venv > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[         pop_venv > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "No previous environment to switch to."'
LINE:         echo "No previous environment to switch to."
+ [[         echo "No previous environment to switch to." =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No previous environment to switch to." =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "No previous environment to switch to." =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "No previous environment to switch to."'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "No previous environment to switch to." =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "No previous environment to switch to." =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: lenv'
LINE: # # Function: lenv
+ [[ # # Function: lenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: lenv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: lenv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `lenv` - List All Current VENVs with last modification date.'
LINE: # `lenv` - List All Current VENVs with last modification date.
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lenv` - List All Current VENVs with last modification date. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`lenv` - List All Current VENVs with last modification date.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Lists all the currently available conda virtual environments with their last modification date.'
LINE: #   - Lists all the currently available conda virtual environments with their last modification date.
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists all the currently available conda virtual environments with their last modification date. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Lists all the currently available conda virtual environments with their last modification date.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `lenv`'
LINE: #   - `lenv`
+ [[ #   - `lenv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `lenv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lenv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lenv` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `lenv`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - A list of all existing conda virtual environments with their last modification date.'
LINE: #   - A list of all existing conda virtual environments with their last modification date.
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - A list of all existing conda virtual environments with their last modification date. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - A list of all existing conda virtual environments with their last modification date.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - If no environments are available, the output from `conda info -e` will indicate this.'
LINE: #   - If no environments are available, the output from `conda info -e` will indicate this.
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - If no environments are available, the output from `conda info -e` will indicate this. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - If no environments are available, the output from `conda info -e` will indicate this.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: lenv() {'
LINE: lenv() {
+ [[ lenv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ lenv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lenv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lenv() { =~ ^#+ ]]
+ [[ lenv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=lenv
+ current_function_name=lenv
+ extracted_markdown='## lenv\n# Function: lenv\n`lenv` - List All Current VENVs with last modification date.\n## Description\n- **Purpose**: \n  - Lists all the currently available conda virtual environments with their last modification date.\n- **Usage**: \n  - `lenv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - A list of all existing conda virtual environments with their last modification date.\n- **Exceptions**: \n  - If no environments are available, the output from `conda info -e` will indicate this.\n'
+ echo -e '## lenv\n# Function: lenv\n`lenv` - List All Current VENVs with last modification date.\n## Description\n- **Purpose**: \n  - Lists all the currently available conda virtual environments with their last modification date.\n- **Usage**: \n  - `lenv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - A list of all existing conda virtual environments with their last modification date.\n- **Exceptions**: \n  - If no environments are available, the output from `conda info -e` will indicate this.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Fetch environment information'
LINE:     # Fetch environment information
+ [[     # Fetch environment information =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Fetch environment information =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Fetch environment information =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Fetch environment information =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Fetch environment information'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local envs_info'
LINE:     local envs_info
+ [[     local envs_info =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Fetch environment information =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Fetch environment information =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local envs_info =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local envs_info =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local envs_info'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     envs_info=$(conda info --envs | grep -E -v '\''^#'\'')'
LINE:     envs_info=$(conda info --envs | grep -E -v '^#')
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local envs_info =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local envs_info =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    envs_info=$(conda info --envs | grep -E -v '\''^#'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     envs_info=$(conda info --envs | grep -E -v '^#') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Prepare a temporary file to store environment details'
LINE:     # Prepare a temporary file to store environment details
+ [[     # Prepare a temporary file to store environment details =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Prepare a temporary file to store environment details =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Prepare a temporary file to store environment details =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Prepare a temporary file to store environment details =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Prepare a temporary file to store environment details'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local temp_file'
LINE:     local temp_file
+ [[     local temp_file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Prepare a temporary file to store environment details =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Prepare a temporary file to store environment details =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local temp_file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local temp_file =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local temp_file'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     temp_file=$(mktemp)'
LINE:     temp_file=$(mktemp)
+ [[     temp_file=$(mktemp) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local temp_file =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local temp_file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     temp_file=$(mktemp) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     temp_file=$(mktemp) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    temp_file=$(mktemp)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     temp_file=$(mktemp) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     temp_file=$(mktemp) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Iterate over each environment and fetch creation date'
LINE:     # Iterate over each environment and fetch creation date
+ [[     # Iterate over each environment and fetch creation date =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Iterate over each environment and fetch creation date =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Iterate over each environment and fetch creation date'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     while IFS= read -r line; do'
LINE:     while IFS= read -r line; do
+ [[     while IFS= read -r line; do =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Iterate over each environment and fetch creation date =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     while IFS= read -r line; do =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     while IFS= read -r line; do =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    while IFS= read -r line; do'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local env_name env_path creation_date active_marker'
LINE:         local env_name env_path creation_date active_marker
+ [[         local env_name env_path creation_date active_marker =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     while IFS= read -r line; do =~ ^}$ ]]
+ [[ false == false ]]
+ [[     while IFS= read -r line; do =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local env_name env_path creation_date active_marker =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local env_name env_path creation_date active_marker =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local env_name env_path creation_date active_marker'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         env_name=$(echo "$line" | awk '\''{print $1}'\'')'
LINE:         env_name=$(echo "$line" | awk '{print $1}')
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local env_name env_path creation_date active_marker =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local env_name env_path creation_date active_marker =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         env_name=$(echo "$line" | awk '{print $1}') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        env_name=$(echo "$line" | awk '\''{print $1}'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         env_path=$(echo "$line" | awk '\''{print $NF}'\'')'
LINE:         env_path=$(echo "$line" | awk '{print $NF}')
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         env_name=$(echo "$line" | awk '{print $1}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         env_path=$(echo "$line" | awk '{print $NF}') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        env_path=$(echo "$line" | awk '\''{print $NF}'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         env_path=$(echo "$line" | awk '{print $NF}') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Fetch creation date using stat'
LINE:         # Fetch creation date using stat
+ [[         # Fetch creation date using stat =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Fetch creation date using stat =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Fetch creation date using stat =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Fetch creation date using stat =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Fetch creation date using stat'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [ -d "$env_path" ]; then'
LINE:         if [ -d "$env_path" ]; then
+ [[         if [ -d "$env_path" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Fetch creation date using stat =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Fetch creation date using stat =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [ -d "$env_path" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [ -d "$env_path" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [ -d "$env_path" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             creation_date=$(stat -c "%y" "$env_path" | cut -d'\'' '\'' -f1)'
LINE:             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1)
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [ -d "$env_path" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [ -d "$env_path" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            creation_date=$(stat -c "%y" "$env_path" | cut -d'\'' '\'' -f1)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         else'
LINE:         else
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[             creation_date=$(stat -c "%y" "$env_path" | cut -d' ' -f1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             creation_date="N/A"'
LINE:             creation_date="N/A"
+ [[             creation_date="N/A" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date="N/A" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             creation_date="N/A" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            creation_date="N/A"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             creation_date="N/A" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             creation_date="N/A" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Remove $HOME from the path'
LINE:         # Remove $HOME from the path
+ [[         # Remove $HOME from the path =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Remove $HOME from the path =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Remove $HOME from the path =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Remove $HOME from the path =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Remove $HOME from the path'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         env_path=${env_path/$HOME/\~}'
LINE:         env_path=${env_path/$HOME/\~}
+ [[         env_path=${env_path/$HOME/\~} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Remove $HOME from the path =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Remove $HOME from the path =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=${env_path/$HOME/\~} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         env_path=${env_path/$HOME/\~} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        env_path=${env_path/$HOME/\~}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         env_path=${env_path/$HOME/\~} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         env_path=${env_path/$HOME/\~} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Handle active environment marker'
LINE:         # Handle active environment marker
+ [[         # Handle active environment marker =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Handle active environment marker =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Handle active environment marker =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Handle active environment marker =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Handle active environment marker'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if [[ "$line" == *\** ]]; then'
LINE:         if [[ "$line" == *\** ]]; then
+ [[         if [[ "$line" == *\** ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Handle active environment marker =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Handle active environment marker =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "$line" == *\** ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if [[ "$line" == *\** ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if [[ "$line" == *\** ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             active_marker="*"'
LINE:             active_marker="*"
+ [[             active_marker="*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if [[ "$line" == *\** ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if [[ "$line" == *\** ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker="*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             active_marker="*" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            active_marker="*"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         else'
LINE:         else
+ [[         else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker="*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             active_marker="*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             active_marker=" "'
LINE:             active_marker=" "
+ [[             active_marker=" " =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         else =~ ^}$ ]]
+ [[ false == false ]]
+ [[         else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker=" " =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             active_marker=" " =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            active_marker=" "'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             active_marker=" " =~ ^}$ ]]
+ [[ false == false ]]
+ [[             active_marker=" " =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Write to temporary file'
LINE:         # Write to temporary file
+ [[         # Write to temporary file =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Write to temporary file =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Write to temporary file =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Write to temporary file =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Write to temporary file'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file"'
LINE:         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file"
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Write to temporary file =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Write to temporary file =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     done <<< "$envs_info"'
LINE:     done <<< "$envs_info"
+ [[     done <<< "$envs_info" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         printf "%s\t%s %s\t%s\n" "$creation_date" "$active_marker" "$env_name" "$env_path" >> "$temp_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done <<< "$envs_info" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     done <<< "$envs_info" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    done <<< "$envs_info"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     done <<< "$envs_info" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     done <<< "$envs_info" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Display the results'
LINE:     # Display the results
+ [[     # Display the results =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Display the results =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the results =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Display the results =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Display the results'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     column -t -s $'\''\t'\'' < "$temp_file"'
LINE:     column -t -s $'\t' < "$temp_file"
+ [[     column -t -s $'\t' < "$temp_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Display the results =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Display the results =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     column -t -s $'\t' < "$temp_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     column -t -s $'\t' < "$temp_file" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    column -t -s $'\''\t'\'' < "$temp_file"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     column -t -s $'\t' < "$temp_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     column -t -s $'\t' < "$temp_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Clean up'
LINE:     # Clean up
+ [[     # Clean up =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Clean up =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clean up =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Clean up =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Clean up'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     rm "$temp_file"'
LINE:     rm "$temp_file"
+ [[     rm "$temp_file" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clean up =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Clean up =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     rm "$temp_file" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     rm "$temp_file" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    rm "$temp_file"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     rm "$temp_file" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     rm "$temp_file" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: lastenv'
LINE: # # Function: lastenv
+ [[ # # Function: lastenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: lastenv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: lastenv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `lastenv` - Retrieve the Last Environment with a Given Prefix.'
LINE: # `lastenv` - Retrieve the Last Environment with a Given Prefix.
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `lastenv` - Retrieve the Last Environment with a Given Prefix. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`lastenv` - Retrieve the Last Environment with a Given Prefix.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Retrieves the last environment with a specified prefix.'
LINE: #   - Retrieves the last environment with a specified prefix.
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Retrieves the last environment with a specified prefix. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Retrieves the last environment with a specified prefix.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `lastenv [prefix]`'
LINE: #   - `lastenv [prefix]`
+ [[ #   - `lastenv [prefix]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `lastenv [prefix]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lastenv [prefix]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `lastenv [prefix]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `lastenv [prefix]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `prefix` (string) - The prefix to search for.'
LINE: #   - `prefix` (string) - The prefix to search for.
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `prefix` (string) - The prefix to search for. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `prefix` (string) - The prefix to search for.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The name of the last environment with the given prefix.'
LINE: #   - The name of the last environment with the given prefix.
+ [[ #   - The name of the last environment with the given prefix. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The name of the last environment with the given prefix. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The name of the last environment with the given prefix. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The name of the last environment with the given prefix. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The name of the last environment with the given prefix.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: lastenv() {'
LINE: lastenv() {
+ [[ lastenv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ lastenv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lastenv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ lastenv() { =~ ^#+ ]]
+ [[ lastenv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=lastenv
+ current_function_name=lastenv
+ extracted_markdown='## lastenv\n# Function: lastenv\n`lastenv` - Retrieve the Last Environment with a Given Prefix.\n## Description\n- **Purpose**: \n  - Retrieves the last environment with a specified prefix.\n- **Usage**: \n  - `lastenv [prefix]`\n- **Input Parameters**: \n  - `prefix` (string) - The prefix to search for.\n- **Output**: \n  - The name of the last environment with the given prefix.\n- **Exceptions**: \n  - None\n'
+ echo -e '## lastenv\n# Function: lastenv\n`lastenv` - Retrieve the Last Environment with a Given Prefix.\n## Description\n- **Purpose**: \n  - Retrieves the last environment with a specified prefix.\n- **Usage**: \n  - `lastenv [prefix]`\n- **Input Parameters**: \n  - `prefix` (string) - The prefix to search for.\n- **Output**: \n  - The name of the last environment with the given prefix.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local prefix="$1"'
LINE:     local prefix="$1"
+ [[     local prefix="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local prefix="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local prefix="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local prefix="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1)'
LINE:     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1)
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local prefix="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "${last_env}"'
LINE:     echo "${last_env}"
+ [[     echo "${last_env}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local last_env=$(lenv | grep -E "^${prefix}." | tail -1 | cut -d " " -f 1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${last_env}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "${last_env}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "${last_env}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "${last_env}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "${last_env}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: benv'
LINE: # # Function: benv
+ [[ # # Function: benv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: benv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: benv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `benv` - Create a New Base Virtual Environment.'
LINE: # `benv` - Create a New Base Virtual Environment.
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `benv` - Create a New Base Virtual Environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`benv` - Create a New Base Virtual Environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Creates a new base conda virtual environment and activates it.'
LINE: #   - Creates a new base conda virtual environment and activates it.
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new base conda virtual environment and activates it. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Creates a new base conda virtual environment and activates it.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `benv ENV_NAME [EXTRA_OPTIONS]`'
LINE: #   - `benv ENV_NAME [EXTRA_OPTIONS]`
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `benv ENV_NAME [EXTRA_OPTIONS]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `benv ENV_NAME [EXTRA_OPTIONS]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `ENV_NAME` (string) - The name of the new environment to create.'
LINE: #   - `ENV_NAME` (string) - The name of the new environment to create.
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ENV_NAME` (string) - The name of the new environment to create. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `ENV_NAME` (string) - The name of the new environment to create.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.'
LINE: #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Creates and activates the new environment.'
LINE: #   - Creates and activates the new environment.
+ [[ #   - Creates and activates the new environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Creates and activates the new environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors during environment creation are handled by conda.'
LINE: #   - Errors during environment creation are handled by conda.
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors during environment creation are handled by conda.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: benv() {'
LINE: benv() {
+ [[ benv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ benv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ benv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ benv() { =~ ^#+ ]]
+ [[ benv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=benv
+ current_function_name=benv
+ extracted_markdown='## benv\n# Function: benv\n`benv` - Create a New Base Virtual Environment.\n## Description\n- **Purpose**: \n  - Creates a new base conda virtual environment and activates it.\n- **Usage**: \n  - `benv ENV_NAME [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `ENV_NAME` (string) - The name of the new environment to create.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.\n- **Output**: \n  - Creates and activates the new environment.\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ echo -e '## benv\n# Function: benv\n`benv` - Create a New Base Virtual Environment.\n## Description\n- **Purpose**: \n  - Creates a new base conda virtual environment and activates it.\n- **Usage**: \n  - `benv ENV_NAME [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `ENV_NAME` (string) - The name of the new environment to create.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to `conda create`.\n- **Output**: \n  - Creates and activates the new environment.\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env_name="$1"; shift'
LINE:     local env_name="$1"; shift
+ [[     local env_name="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env_name="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_name="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_name="$1"; shift =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env_name="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local extra_options="$*"'
LINE:     local extra_options="$*"
+ [[     local extra_options="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_name="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_name="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local extra_options="$*" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local extra_options="$*"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local extra_options="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Creating base virtual environment ${env_name} ${extra_options}"'
LINE:     echo "Creating base virtual environment ${env_name} ${extra_options}"
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Creating base virtual environment ${env_name} ${extra_options}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     conda create -n "${env_name}" ${extra_options} -y || {'
LINE:     conda create -n "${env_name}" ${extra_options} -y || {
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Creating base virtual environment ${env_name} ${extra_options}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda create -n "${env_name}" ${extra_options} -y || { =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    conda create -n "${env_name}" ${extra_options} -y || {'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Failed to create environment ${env_name}" >&2'
LINE:         echo "Error: Failed to create environment ${env_name}" >&2
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda create -n "${env_name}" ${extra_options} -y || { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Failed to create environment ${env_name}" >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Failed to create environment ${env_name}" >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     }'
LINE:     }
+ [[     } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    }'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Base environment created - activating ${env_name}"'
LINE:     echo "Base environment created - activating ${env_name}"
+ [[     echo "Base environment created - activating ${env_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Base environment created - activating ${env_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Base environment created - activating ${env_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     cact "${env_name}"'
LINE:     cact "${env_name}"
+ [[     cact "${env_name}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Base environment created - activating ${env_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${env_name}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact "${env_name}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    cact "${env_name}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${env_name}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact "${env_name}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: nenv'
LINE: # # Function: nenv
+ [[ # # Function: nenv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: nenv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: nenv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `nenv` - Create a New Virtual Environment in a Series.'
LINE: # `nenv` - Create a New Virtual Environment in a Series.
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `nenv` - Create a New Virtual Environment in a Series. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`nenv` - Create a New Virtual Environment in a Series.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.'
LINE: #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `nenv PREFIX [EXTRA_OPTIONS]`'
LINE: #   - `nenv PREFIX [EXTRA_OPTIONS]`
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `nenv PREFIX [EXTRA_OPTIONS]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `nenv PREFIX [EXTRA_OPTIONS]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `PREFIX` (string) - The prefix to identify the series of environments.'
LINE: #   - `PREFIX` (string) - The prefix to identify the series of environments.
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `PREFIX` (string) - The prefix to identify the series of environments. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `PREFIX` (string) - The prefix to identify the series of environments.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.'
LINE: #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Creates and activates the new environment with sequence number "00".'
LINE: #   - Creates and activates the new environment with sequence number "00".
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates and activates the new environment with sequence number "00". =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Creates and activates the new environment with sequence number "00".\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors during environment creation are handled by conda.'
LINE: #   - Errors during environment creation are handled by conda.
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during environment creation are handled by conda. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors during environment creation are handled by conda.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: nenv() {'
LINE: nenv() {
+ [[ nenv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ nenv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ nenv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ nenv() { =~ ^#+ ]]
+ [[ nenv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=nenv
+ current_function_name=nenv
+ extracted_markdown='## nenv\n# Function: nenv\n`nenv` - Create a New Virtual Environment in a Series.\n## Description\n- **Purpose**: \n  - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.\n- **Usage**: \n  - `nenv PREFIX [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `PREFIX` (string) - The prefix to identify the series of environments.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.\n- **Output**: \n  - Creates and activates the new environment with sequence number "00".\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ echo -e '## nenv\n# Function: nenv\n`nenv` - Create a New Virtual Environment in a Series.\n## Description\n- **Purpose**: \n  - Creates a new conda virtual environment in a series identified by a prefix as a clone of the current venv.\n- **Usage**: \n  - `nenv PREFIX [EXTRA_OPTIONS]`\n- **Input Parameters**: \n  - `PREFIX` (string) - The prefix to identify the series of environments.\n  - `EXTRA_OPTIONS` (string, optional) - Additional options to pass to the environment creation.\n- **Output**: \n  - Creates and activates the new environment with sequence number "00".\n- **Exceptions**: \n  - Errors during environment creation are handled by conda.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local prefix="$1"; shift'
LINE:     local prefix="$1"; shift
+ [[     local prefix="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local prefix="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local prefix="$1"; shift =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local prefix="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local extra_options="$*"'
LINE:     local extra_options="$*"
+ [[     local extra_options="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local prefix="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local prefix="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local extra_options="$*" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local extra_options="$*"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local extra_options="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local extra_options="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     [ -z "${prefix}" ] && {'
LINE:     [ -z "${prefix}" ] && {
+ [[     [ -z "${prefix}" ] && { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     [ -z "${prefix}" ] && { =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -z "${prefix}" ] && { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     [ -z "${prefix}" ] && { =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    [ -z "${prefix}" ] && {'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Prefix is required." >&2'
LINE:         echo "Error: Prefix is required." >&2
+ [[         echo "Error: Prefix is required." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     [ -z "${prefix}" ] && { =~ ^}$ ]]
+ [[ false == false ]]
+ [[     [ -z "${prefix}" ] && { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Prefix is required." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Prefix is required." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Prefix is required." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Prefix is required." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Prefix is required." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     }'
LINE:     }
+ [[     } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    }'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     } =~ ^}$ ]]
+ [[ false == false ]]
+ [[     } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Reset the sequence number to start from "00"'
LINE:     # Reset the sequence number to start from "00"
+ [[     # Reset the sequence number to start from "00" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Reset the sequence number to start from "00" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Reset the sequence number to start from "00" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Reset the sequence number to start from "00" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Reset the sequence number to start from "00"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_NUM=""'
LINE:     __VENV_NUM=""
+ [[     __VENV_NUM="" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Reset the sequence number to start from "00" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Reset the sequence number to start from "00" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM="" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NUM="" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_NUM=""'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Set the global prefix'
LINE:     # Set the global prefix
+ [[     # Set the global prefix =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM="" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NUM="" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set the global prefix =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Set the global prefix =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Set the global prefix'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_PREFIX="${prefix}"'
LINE:     __VENV_PREFIX="${prefix}"
+ [[     __VENV_PREFIX="${prefix}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Set the global prefix =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Set the global prefix =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX="${prefix}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_PREFIX="${prefix}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_PREFIX="${prefix}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Create a clone of the base environment'
LINE:     # Create a clone of the base environment
+ [[     # Create a clone of the base environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_PREFIX="${prefix}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_PREFIX="${prefix}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Create a clone of the base environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Create a clone of the base environment =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Create a clone of the base environment'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     ccln "base"'
LINE:     ccln "base"
+ [[     ccln "base" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Create a clone of the base environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Create a clone of the base environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ccln "base" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     ccln "base" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    ccln "base"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     ccln "base" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     ccln "base" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: denv'
LINE: # # Function: denv
+ [[ # # Function: denv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: denv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: denv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `denv` - Delete a Virtual Environment.'
LINE: # `denv` - Delete a Virtual Environment.
+ [[ # `denv` - Delete a Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `denv` - Delete a Virtual Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `denv` - Delete a Virtual Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `denv` - Delete a Virtual Environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`denv` - Delete a Virtual Environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Deletes the specified virtual environment.'
LINE: #   - Deletes the specified virtual environment.
+ [[ #   - Deletes the specified virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified virtual environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified virtual environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Deletes the specified virtual environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `denv [env_name]`'
LINE: #   - `denv [env_name]`
+ [[ #   - `denv [env_name]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `denv [env_name]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `denv [env_name]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `denv [env_name]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `denv [env_name]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `env_name` (string) - The name of the environment to delete.'
LINE: #   - `env_name` (string) - The name of the environment to delete.
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env_name` (string) - The name of the environment to delete. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `env_name` (string) - The name of the environment to delete.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Deletes the specified environment.'
LINE: #   - Deletes the specified environment.
+ [[ #   - Deletes the specified environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deletes the specified environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Deletes the specified environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors if the environment does not exist.'
LINE: #   - Errors if the environment does not exist.
+ [[ #   - Errors if the environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the environment does not exist. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors if the environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: denv() {'
LINE: denv() {
+ [[ denv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ denv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ denv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ denv() { =~ ^#+ ]]
+ [[ denv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=denv
+ current_function_name=denv
+ extracted_markdown='## denv\n# Function: denv\n`denv` - Delete a Virtual Environment.\n## Description\n- **Purpose**: \n  - Deletes the specified virtual environment.\n- **Usage**: \n  - `denv [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to delete.\n- **Output**: \n  - Deletes the specified environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ echo -e '## denv\n# Function: denv\n`denv` - Delete a Virtual Environment.\n## Description\n- **Purpose**: \n  - Deletes the specified virtual environment.\n- **Usage**: \n  - `denv [env_name]`\n- **Input Parameters**: \n  - `env_name` (string) - The name of the environment to delete.\n- **Output**: \n  - Deletes the specified environment.\n- **Exceptions**: \n  - Errors if the environment does not exist.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env_to_delete="$1"'
LINE:     local env_to_delete="$1"
+ [[     local env_to_delete="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env_to_delete="$1" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_to_delete="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env_to_delete="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_to_delete="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${env_to_delete}" ]; then'
LINE:     if [ -z "${env_to_delete}" ]; then
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${env_to_delete}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${env_to_delete}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: Environment name is required for deletion." >&2'
LINE:         echo "Error: Environment name is required for deletion." >&2
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: Environment name is required for deletion." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: Environment name is required for deletion." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: Environment name is required for deletion." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Removing environment -> ${env_to_delete}"'
LINE:     echo "Removing environment -> ${env_to_delete}"
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Removing environment -> ${env_to_delete}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Removing environment -> ${env_to_delete}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     conda remove --all -n ${env_to_delete} -y'
LINE:     conda remove --all -n ${env_to_delete} -y
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Removing environment -> ${env_to_delete}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda remove --all -n ${env_to_delete} -y =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    conda remove --all -n ${env_to_delete} -y'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda remove --all -n ${env_to_delete} -y =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: renv'
LINE: # # Function: renv
+ [[ # # Function: renv =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: renv =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: renv\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `renv` - Revert to Previous Virtual Environment.'
LINE: # `renv` - Revert to Previous Virtual Environment.
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `renv` - Revert to Previous Virtual Environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`renv` - Revert to Previous Virtual Environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.'
LINE: #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Deactivates the current active environment, deletes it, and then re-activates the previously active environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `renv`'
LINE: #   - `renv`
+ [[ #   - `renv` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `renv` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `renv` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `renv` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `renv`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Removes the current environment and reverts to the previous one.'
LINE: #   - Removes the current environment and reverts to the previous one.
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Removes the current environment and reverts to the previous one. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Removes the current environment and reverts to the previous one.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors during deactivation or deletion are handled by conda.'
LINE: #   - Errors during deactivation or deletion are handled by conda.
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors during deactivation or deletion are handled by conda. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors during deactivation or deletion are handled by conda.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: renv() {'
LINE: renv() {
+ [[ renv() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ renv() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ renv() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ renv() { =~ ^#+ ]]
+ [[ renv() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=renv
+ current_function_name=renv
+ extracted_markdown='## renv\n# Function: renv\n`renv` - Revert to Previous Virtual Environment.\n## Description\n- **Purpose**: \n  - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.\n- **Usage**: \n  - `renv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Removes the current environment and reverts to the previous one.\n- **Exceptions**: \n  - Errors during deactivation or deletion are handled by conda.\n'
+ echo -e '## renv\n# Function: renv\n`renv` - Revert to Previous Virtual Environment.\n## Description\n- **Purpose**: \n  - Deactivates the current active environment, deletes it, and then re-activates the previously active environment.\n- **Usage**: \n  - `renv`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Removes the current environment and reverts to the previous one.\n- **Exceptions**: \n  - Errors during deactivation or deletion are handled by conda.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env_to_delete=${CONDA_DEFAULT_ENV}'
LINE:     local env_to_delete=${CONDA_DEFAULT_ENV}
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env_to_delete=${CONDA_DEFAULT_ENV}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local previous_env=${__VENV_PREV}'
LINE:     local previous_env=${__VENV_PREV}
+ [[     local previous_env=${__VENV_PREV} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_to_delete=${CONDA_DEFAULT_ENV} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__VENV_PREV} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local previous_env=${__VENV_PREV} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local previous_env=${__VENV_PREV}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local previous_env=${__VENV_PREV} =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local previous_env=${__VENV_PREV} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${env_to_delete}" ]; then'
LINE:     if [ -z "${env_to_delete}" ]; then
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${env_to_delete}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${env_to_delete}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Error: No active environment to remove." >&2'
LINE:         echo "Error: No active environment to remove." >&2
+ [[         echo "Error: No active environment to remove." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${env_to_delete}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No active environment to remove." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Error: No active environment to remove." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Error: No active environment to remove." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Error: No active environment to remove." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Error: No active environment to remove." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "${previous_env}" ]; then'
LINE:     if [ -z "${previous_env}" ]; then
+ [[     if [ -z "${previous_env}" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "${previous_env}" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "${previous_env}" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2'
LINE:         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "${previous_env}" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Warning: No previous environment to revert to. Reverting to base environment." >&2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         previous_env="base"'
LINE:         previous_env="base"
+ [[         previous_env="base" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Warning: No previous environment to revert to. Reverting to base environment." >&2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         previous_env="base" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         previous_env="base" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        previous_env="base"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         previous_env="base" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         previous_env="base" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     dact  # Deactivate the current environment'
LINE:     dact  # Deactivate the current environment
+ [[     dact  # Deactivate the current environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     dact  # Deactivate the current environment =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact  # Deactivate the current environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     dact  # Deactivate the current environment =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    dact  # Deactivate the current environment'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     denv ${env_to_delete}  # Delete the environment'
LINE:     denv ${env_to_delete}  # Delete the environment
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact  # Deactivate the current environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     dact  # Deactivate the current environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     denv ${env_to_delete}  # Delete the environment =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    denv ${env_to_delete}  # Delete the environment'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     cact ${previous_env}  # Reactivate the previous environment'
LINE:     cact ${previous_env}  # Reactivate the previous environment
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     denv ${env_to_delete}  # Delete the environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact ${previous_env}  # Reactivate the previous environment =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    cact ${previous_env}  # Reactivate the previous environment'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact ${previous_env}  # Reactivate the previous environment =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: ccln'
LINE: # # Function: ccln
+ [[ # # Function: ccln =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: ccln =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: ccln\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `ccln` - Clone a Conda Environment.'
LINE: # `ccln` - Clone a Conda Environment.
+ [[ # `ccln` - Clone a Conda Environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `ccln` - Clone a Conda Environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ccln` - Clone a Conda Environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `ccln` - Clone a Conda Environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`ccln` - Clone a Conda Environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Clones an existing conda environment.'
LINE: #   - Clones an existing conda environment.
+ [[ #   - Clones an existing conda environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Clones an existing conda environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Clones an existing conda environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Clones an existing conda environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Clones an existing conda environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `ccln [source_env] [target_env]`'
LINE: #   - `ccln [source_env] [target_env]`
+ [[ #   - `ccln [source_env] [target_env]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `ccln [source_env] [target_env]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ccln [source_env] [target_env]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `ccln [source_env] [target_env]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `ccln [source_env] [target_env]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `source_env` (string) - The name of the environment to clone.'
LINE: #   - `source_env` (string) - The name of the environment to clone.
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `source_env` (string) - The name of the environment to clone. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `source_env` (string) - The name of the environment to clone.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `target_env` (string) - The name of the new cloned environment.'
LINE: #   - `target_env` (string) - The name of the new cloned environment.
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `target_env` (string) - The name of the new cloned environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `target_env` (string) - The name of the new cloned environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Creates a clone of the specified environment.'
LINE: #   - Creates a clone of the specified environment.
+ [[ #   - Creates a clone of the specified environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Creates a clone of the specified environment. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a clone of the specified environment. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Creates a clone of the specified environment. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Creates a clone of the specified environment.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors if the source environment does not exist.'
LINE: #   - Errors if the source environment does not exist.
+ [[ #   - Errors if the source environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if the source environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the source environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if the source environment does not exist. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors if the source environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: ccln() {'
LINE: ccln() {
+ [[ ccln() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ccln() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ccln() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ccln() { =~ ^#+ ]]
+ [[ ccln() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=ccln
+ current_function_name=ccln
+ extracted_markdown='## ccln\n# Function: ccln\n`ccln` - Clone a Conda Environment.\n## Description\n- **Purpose**: \n  - Clones an existing conda environment.\n- **Usage**: \n  - `ccln [source_env] [target_env]`\n- **Input Parameters**: \n  - `source_env` (string) - The name of the environment to clone.\n  - `target_env` (string) - The name of the new cloned environment.\n- **Output**: \n  - Creates a clone of the specified environment.\n- **Exceptions**: \n  - Errors if the source environment does not exist.\n'
+ echo -e '## ccln\n# Function: ccln\n`ccln` - Clone a Conda Environment.\n## Description\n- **Purpose**: \n  - Clones an existing conda environment.\n- **Usage**: \n  - `ccln [source_env] [target_env]`\n- **Input Parameters**: \n  - `source_env` (string) - The name of the environment to clone.\n  - `target_env` (string) - The name of the new cloned environment.\n- **Output**: \n  - Creates a clone of the specified environment.\n- **Exceptions**: \n  - Errors if the source environment does not exist.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # If no description is provided, use the description of the current VENV'
LINE:     # If no description is provided, use the description of the current VENV
+ [[     # If no description is provided, use the description of the current VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # If no description is provided, use the description of the current VENV =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # If no description is provided, use the description of the current VENV'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ -z "$1" ]; then'
LINE:     if [ -z "$1" ]; then
+ [[     if [ -z "$1" ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # If no description is provided, use the description of the current VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ -z "$1" ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ -z "$1" ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __VENV_DESC=$( vdsc )'
LINE:         __VENV_DESC=$( vdsc )
+ [[         __VENV_DESC=$( vdsc ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ -z "$1" ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ -z "$1" ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$( vdsc ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __VENV_DESC=$( vdsc ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __VENV_DESC=$( vdsc )'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$( vdsc ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __VENV_DESC=$( vdsc ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __VENV_DESC=$1'
LINE:         __VENV_DESC=$1
+ [[         __VENV_DESC=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __VENV_DESC=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __VENV_DESC=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __VENV_DESC=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __VENV_DESC=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_NUM=$( next_step "$(vnum)" )'
LINE:     __VENV_NUM=$( next_step "$(vnum)" )
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_NUM=$( next_step "$(vnum)" )'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}"'
LINE:     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}"
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NUM=$( next_step "$(vnum)" ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     __VENV_NAME="${__VENV_PREFIX}.${__VENV_NUM}.${__VENV_DESC}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Clone the VENV'
LINE:     # Clone the VENV
+ [[     # Clone the VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Clone the VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clone the VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Clone the VENV =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Clone the VENV'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $?'
LINE:     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $?
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Clone the VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Clone the VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $?'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^}$ ]]
+ [[ false == false ]]
+ [[     conda create --clone "${CONDA_DEFAULT_ENV}" -n "${__VENV_NAME}" -y || return $? =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Switch to the newly created VENV'
LINE:     # Switch to the newly created VENV
+ [[     # Switch to the newly created VENV =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Switch to the newly created VENV =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Switch to the newly created VENV =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Switch to the newly created VENV =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Switch to the newly created VENV'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     cact "${__VENV_NAME}"'
LINE:     cact "${__VENV_NAME}"
+ [[     cact "${__VENV_NAME}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Switch to the newly created VENV =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Switch to the newly created VENV =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${__VENV_NAME}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact "${__VENV_NAME}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    cact "${__VENV_NAME}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact "${__VENV_NAME}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact "${__VENV_NAME}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: venvdiff'
LINE: # # Function: venvdiff
+ [[ # # Function: venvdiff =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: venvdiff =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: venvdiff\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `venvdiff` - Compare Two Virtual Environments.'
LINE: # `venvdiff` - Compare Two Virtual Environments.
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `venvdiff` - Compare Two Virtual Environments. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`venvdiff` - Compare Two Virtual Environments.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Compares two virtual environments and lists differences.'
LINE: #   - Compares two virtual environments and lists differences.
+ [[ #   - Compares two virtual environments and lists differences. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Compares two virtual environments and lists differences. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Compares two virtual environments and lists differences. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Compares two virtual environments and lists differences. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Compares two virtual environments and lists differences.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `venvdiff [env1] [env2]`'
LINE: #   - `venvdiff [env1] [env2]`
+ [[ #   - `venvdiff [env1] [env2]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `venvdiff [env1] [env2]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `venvdiff [env1] [env2]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `venvdiff [env1] [env2]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `venvdiff [env1] [env2]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `env1` (string) - The first environment to compare.'
LINE: #   - `env1` (string) - The first environment to compare.
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env1` (string) - The first environment to compare. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `env1` (string) - The first environment to compare.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `env2` (string) - The second environment to compare.'
LINE: #   - `env2` (string) - The second environment to compare.
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `env2` (string) - The second environment to compare. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `env2` (string) - The second environment to compare.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Lists the differences between the two environments.'
LINE: #   - Lists the differences between the two environments.
+ [[ #   - Lists the differences between the two environments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Lists the differences between the two environments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the differences between the two environments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Lists the differences between the two environments. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Lists the differences between the two environments.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Errors if either environment does not exist.'
LINE: #   - Errors if either environment does not exist.
+ [[ #   - Errors if either environment does not exist. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Errors if either environment does not exist. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if either environment does not exist. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Errors if either environment does not exist. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Errors if either environment does not exist.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: venvdiff() {'
LINE: venvdiff() {
+ [[ venvdiff() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ venvdiff() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ venvdiff() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ venvdiff() { =~ ^#+ ]]
+ [[ venvdiff() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=venvdiff
+ current_function_name=venvdiff
+ extracted_markdown='## venvdiff\n# Function: venvdiff\n`venvdiff` - Compare Two Virtual Environments.\n## Description\n- **Purpose**: \n  - Compares two virtual environments and lists differences.\n- **Usage**: \n  - `venvdiff [env1] [env2]`\n- **Input Parameters**: \n  - `env1` (string) - The first environment to compare.\n  - `env2` (string) - The second environment to compare.\n- **Output**: \n  - Lists the differences between the two environments.\n- **Exceptions**: \n  - Errors if either environment does not exist.\n'
+ echo -e '## venvdiff\n# Function: venvdiff\n`venvdiff` - Compare Two Virtual Environments.\n## Description\n- **Purpose**: \n  - Compares two virtual environments and lists differences.\n- **Usage**: \n  - `venvdiff [env1] [env2]`\n- **Input Parameters**: \n  - `env1` (string) - The first environment to compare.\n  - `env2` (string) - The second environment to compare.\n- **Output**: \n  - Lists the differences between the two environments.\n- **Exceptions**: \n  - Errors if either environment does not exist.\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Check that two arguments are provided'
LINE:     # Check that two arguments are provided
+ [[     # Check that two arguments are provided =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check that two arguments are provided =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check that two arguments are provided =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check that two arguments are provided =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Check that two arguments are provided'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [ "$#" -ne 2 ]; then'
LINE:     if [ "$#" -ne 2 ]; then
+ [[     if [ "$#" -ne 2 ]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check that two arguments are provided =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check that two arguments are provided =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$#" -ne 2 ]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [ "$#" -ne 2 ]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [ "$#" -ne 2 ]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         echo "Usage: venvdiff env1 env2"'
LINE:         echo "Usage: venvdiff env1 env2"
+ [[         echo "Usage: venvdiff env1 env2" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [ "$#" -ne 2 ]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [ "$#" -ne 2 ]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: venvdiff env1 env2" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         echo "Usage: venvdiff env1 env2" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        echo "Usage: venvdiff env1 env2"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __rc__=1'
LINE:         __rc__=1
+ [[         __rc__=1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         echo "Usage: venvdiff env1 env2" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         echo "Usage: venvdiff env1 env2" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __rc__=1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __rc__=1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         return ${__rc__}'
LINE:         return ${__rc__}
+ [[         return ${__rc__} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __rc__=1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __rc__=1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         return ${__rc__} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        return ${__rc__}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         return ${__rc__} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         return ${__rc__} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env1=$1'
LINE:     local env1=$1
+ [[     local env1=$1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local env1=$1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1=$1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env1=$1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env1=$1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env2=$2'
LINE:     local env2=$2
+ [[     local env2=$2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1=$1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env1=$1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2=$2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env2=$2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env2=$2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2=$2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env2=$2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Activate the first environment and get the list of packages'
LINE:     # Activate the first environment and get the list of packages
+ [[     # Activate the first environment and get the list of packages =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Activate the first environment and get the list of packages =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate the first environment and get the list of packages =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Activate the first environment and get the list of packages =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Activate the first environment and get the list of packages'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     cact $env1 > /dev/null'
LINE:     cact $env1 > /dev/null
+ [[     cact $env1 > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Activate the first environment and get the list of packages =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Activate the first environment and get the list of packages =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env1 > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact $env1 > /dev/null =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    cact $env1 > /dev/null'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env1_packages=$(pip list | tail -n +1)'
LINE:     local env1_packages=$(pip list | tail -n +1)
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env1 > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact $env1 > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env1_packages=$(pip list | tail -n +1) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env1_packages=$(pip list | tail -n +1)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     dact > /dev/null'
LINE:     dact > /dev/null
+ [[     dact > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env1_packages=$(pip list | tail -n +1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     dact > /dev/null =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    dact > /dev/null'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     dact > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     cact $env2 > /dev/null'
LINE:     cact $env2 > /dev/null
+ [[     cact $env2 > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     cact $env2 > /dev/null =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env2 > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     cact $env2 > /dev/null =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    cact $env2 > /dev/null'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env2_packages=$(pip list | tail -n +1)'
LINE:     local env2_packages=$(pip list | tail -n +1)
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     cact $env2 > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     cact $env2 > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env2_packages=$(pip list | tail -n +1) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env2_packages=$(pip list | tail -n +1)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     dact > /dev/null'
LINE:     dact > /dev/null
+ [[     dact > /dev/null =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env2_packages=$(pip list | tail -n +1) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     dact > /dev/null =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    dact > /dev/null'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     dact > /dev/null =~ ^}$ ]]
+ [[ false == false ]]
+ [[     dact > /dev/null =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     echo "Comparing packages in $env1 and $env2:"'
LINE:     echo "Comparing packages in $env1 and $env2:"
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     echo "Comparing packages in $env1 and $env2:" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    echo "Comparing packages in $env1 and $env2:"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     diff -y <(echo "$env1_packages") <(echo "$env2_packages")'
LINE:     diff -y <(echo "$env1_packages") <(echo "$env2_packages")
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     echo "Comparing packages in $env1 and $env2:" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    diff -y <(echo "$env1_packages") <(echo "$env2_packages")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     diff -y <(echo "$env1_packages") <(echo "$env2_packages") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ set +x
********************** Processing script name: /Users/mps/projects/AI-PROJECTS/venv-build-checker/bin/shinclude/wrapper_funcs.sh
********************** Processing script markdown file: docs/shdoc/bin/shinclude/scripts/wrapper_funcs.sh.md
Generating markdown for script: wrapper_funcs.sh
+ IFS=
+ read -r line
+ echo 'LINE: #!/bin/bash'
LINE: #!/bin/bash
+ [[ #!/bin/bash =~ ^#! ]]
+ echo '**************************  Found shebang line'
**************************  Found shebang line
+ script_entry=true
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Found blank or single comment line at beginning of script'
**************************  Found blank or single comment line at beginning of script
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## wrapper_funcs.sh - Python Package Manager Wrapper Functions'
LINE: # ## wrapper_funcs.sh - Python Package Manager Wrapper Functions
+ [[ # ## wrapper_funcs.sh - Python Package Manager Wrapper Functions =~ ^#! ]]
+ [[ true == true ]]
+ [[ # ## wrapper_funcs.sh - Python Package Manager Wrapper Functions =~ ^[[:space:]]*$ ]]
+ [[ # ## wrapper_funcs.sh - Python Package Manager Wrapper Functions =~ ^#[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # ## wrapper_funcs.sh - Python Package Manager Wrapper Functions =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='## wrapper_funcs.sh - Python Package Manager Wrapper Functions\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='#\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Purpose**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.'
LINE: #   - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.
+ [[ #   - Provides enhanced functionality for managing Python package commands by wrapping pip and conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Provides enhanced functionality for managing Python package commands by wrapping pip and conda. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.'
LINE: #   - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.
+ [[ #   - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Usage**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Source this script in your command line environment to import the wrapper functions.'
LINE: #   - Source this script in your command line environment to import the wrapper functions.
+ [[ #   - Source this script in your command line environment to import the wrapper functions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Source this script in your command line environment to import the wrapper functions. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Source this script in your command line environment to import the wrapper functions.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - For example, in another script: `source wrapper_funcs.sh`.'
LINE: #   - For example, in another script: `source wrapper_funcs.sh`.
+ [[ #   - For example, in another script: `source wrapper_funcs.sh`. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - For example, in another script: `source wrapper_funcs.sh`. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - For example, in another script: `source wrapper_funcs.sh`.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Features**:'
LINE: # - **Features**:
+ [[ # - **Features**: =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Features**: =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Features**:\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.'
LINE: #   - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.
+ [[ #   - Saves a `pip freeze` before any potentially destructive changes to a virtual environment. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Saves a `pip freeze` before any potentially destructive changes to a virtual environment. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Logs the complete command line to a log file for both conda and pip.'
LINE: #   - Logs the complete command line to a log file for both conda and pip.
+ [[ #   - Logs the complete command line to a log file for both conda and pip. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Logs the complete command line to a log file for both conda and pip. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Logs the complete command line to a log file for both conda and pip.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.'
LINE: #   - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.
+ [[ #   - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Dependencies**: '
LINE: # - **Dependencies**: 
+ [[ # - **Dependencies**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Dependencies**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Dependencies**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Requires Bash and the Python package managers pip and conda.'
LINE: #   - Requires Bash and the Python package managers pip and conda.
+ [[ #   - Requires Bash and the Python package managers pip and conda. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Requires Bash and the Python package managers pip and conda. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Requires Bash and the Python package managers pip and conda.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Some functions may return specific error codes or print error messages to STDERR.'
LINE: #   - Some functions may return specific error codes or print error messages to STDERR.
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Some functions may return specific error codes or print error messages to STDERR. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Some functions may return specific error codes or print error messages to STDERR.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Refer to individual function documentation for details.'
LINE: #   - Refer to individual function documentation for details.
+ [[ #   - Refer to individual function documentation for details. =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ #   - Refer to individual function documentation for details. =~ ^#+ ]]
+ echo '**************************  Inside script documentation'
**************************  Inside script documentation
+ extracted_markdown+='  - Refer to individual function documentation for details.\n'
+ script_entry=false
+ in_script_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ true == true ]]
+ [[ '' =~ ^#+ ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  End of script documentation'
**************************  End of script documentation
+ echo -e '# wrapper_funcs.sh\n## Description\n## wrapper_funcs.sh - Python Package Manager Wrapper Functions\n#\n- **Purpose**: \n  - Provides enhanced functionality for managing Python package commands by wrapping pip and conda.\n  - Intercepts and logs changes to virtual environments for rollback, auditing, and future use in venvdiff or vdiff.\n- **Usage**: \n  - Source this script in your command line environment to import the wrapper functions.\n  - For example, in another script: `source wrapper_funcs.sh`.\n- **Features**:\n  - Saves a `pip freeze` before any potentially destructive changes to a virtual environment.\n  - Logs the complete command line to a log file for both conda and pip.\n  - Persists logs in the `$HOME/.venvutil` directory, even after virtual environments are deleted.\n- **Dependencies**: \n  - Requires Bash and the Python package managers pip and conda.\n- **Exceptions**: \n  - Some functions may return specific error codes or print error messages to STDERR.\n  - Refer to individual function documentation for details.\n'
+ extracted_markdown=
+ previous_line=
+ in_script_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Declare and assign separately to avoid masking return values. shellcheck SC2155'
LINE: # Declare and assign separately to avoid masking return values. shellcheck SC2155
+ [[ # Declare and assign separately to avoid masking return values. shellcheck SC2155 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Declare and assign separately to avoid masking return values. shellcheck SC2155 =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Declare and assign separately to avoid masking return values. shellcheck SC2155\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # shellcheck disable=SC2155'
LINE: # shellcheck disable=SC2155
+ [[ # shellcheck disable=SC2155 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2155 =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2155 =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # shellcheck disable=SC2155 =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='shellcheck disable=SC2155\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Determine the real path of the script'
LINE: # Determine the real path of the script
+ [[ # Determine the real path of the script =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Determine the real path of the script =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Determine the real path of the script\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")'
LINE: THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^#+ ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^[a-zA-Z_#] ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")'
venv_funcs.sh WARNING(30): Invalid line type found: THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")
+ previous_line='THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")'
+ IFS=
+ read -r line
+ echo 'LINE: # Don'\''t source this script if it'\''s already been sourced.'
LINE: # Don't source this script if it's already been sourced.
+ [[ # Don't source this script if it's already been sourced. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Don't source this script if it's already been sourced. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Don'\''t source this script if it'\''s already been sourced.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
LINE: [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}") =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: echo "Sourcing: ${THIS_SCRIPT}"'
LINE: echo "Sourcing: ${THIS_SCRIPT}"
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ "${__VENV_SOURCED_LIST}" =~ "${THIS_SCRIPT}" ]] && return || __VENV_SOURCED_LIST="${__VENV_SOURCED_LIST} ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^#+ ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! echo "Sourcing: ${THIS_SCRIPT}" =~ ^[a-zA-Z_#] ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"'
venv_funcs.sh WARNING(30): Invalid line type found: echo "Sourcing: ${THIS_SCRIPT}"
+ previous_line='echo "Sourcing: ${THIS_SCRIPT}"'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ echo "Sourcing: ${THIS_SCRIPT}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Define an array of internal functions to exclude from help and documentation'
LINE: # Define an array of internal functions to exclude from help and documentation
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Define an array of internal functions to exclude from help and documentation =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Define an array of internal functions to exclude from help and documentation\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __VENV_INTERNAL_FUNCTIONS=('
LINE: __VENV_INTERNAL_FUNCTIONS=(
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^#+ ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __VENV_INTERNAL_FUNCTIONS=( =~ ^[a-zA-Z_#] ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=('
venv_funcs.sh WARNING(30): Invalid line type found: __VENV_INTERNAL_FUNCTIONS=(
+ previous_line='__VENV_INTERNAL_FUNCTIONS=('
+ IFS=
+ read -r line
+ echo 'LINE:     "${__VENV_INTERNAL_FUNCTIONS[@]}"'
LINE:     "${__VENV_INTERNAL_FUNCTIONS[@]}"
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __VENV_INTERNAL_FUNCTIONS=( =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^#+ ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "${__VENV_INTERNAL_FUNCTIONS[@]}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "pip"'
LINE:     "pip"
+ [[     "pip" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "${__VENV_INTERNAL_FUNCTIONS[@]}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "pip" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "pip" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "pip" =~ ^#+ ]]
+ [[     "pip" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "pip" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "pip"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "conda"'
LINE:     "conda"
+ [[     "conda" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "pip" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "conda" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "conda" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "conda" =~ ^#+ ]]
+ [[     "conda" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "conda" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "conda"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "get_function_hash"'
LINE:     "get_function_hash"
+ [[     "get_function_hash" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "conda" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "get_function_hash" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "get_function_hash" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "get_function_hash" =~ ^#+ ]]
+ [[     "get_function_hash" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "get_function_hash" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "get_function_hash"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     "__venv_conda_check"'
LINE:     "__venv_conda_check"
+ [[     "__venv_conda_check" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "get_function_hash" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[     "__venv_conda_check" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "__venv_conda_check" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[     "__venv_conda_check" =~ ^#+ ]]
+ [[     "__venv_conda_check" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     "__venv_conda_check" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    "__venv_conda_check"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: )'
LINE: )
+ [[ ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     "__venv_conda_check" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ ) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ ) =~ ^#+ ]]
+ [[ ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ ) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: get_function_hash'
LINE: # # Function: get_function_hash
+ [[ # # Function: get_function_hash =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: get_function_hash =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: get_function_hash\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `get_function_hash` - Get the hash of a function'\''s definition.'
LINE: # `get_function_hash` - Get the hash of a function's definition.
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `get_function_hash` - Get the hash of a function's definition. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`get_function_hash` - Get the hash of a function'\''s definition.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Computes the hash of a function'\''s definition for integrity checks.'
LINE: #   - Computes the hash of a function's definition for integrity checks.
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Computes the hash of a function's definition for integrity checks. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Computes the hash of a function'\''s definition for integrity checks.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `get_function_hash [function_name]`'
LINE: #   - `get_function_hash [function_name]`
+ [[ #   - `get_function_hash [function_name]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `get_function_hash [function_name]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_function_hash [function_name]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `get_function_hash [function_name]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `get_function_hash [function_name]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `function_name` (string) - The name of the function to hash.'
LINE: #   - `function_name` (string) - The name of the function to hash.
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `function_name` (string) - The name of the function to hash. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `function_name` (string) - The name of the function to hash.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - The hash of the function'\''s definition.'
LINE: #   - The hash of the function's definition.
+ [[ #   - The hash of the function's definition. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - The hash of the function's definition. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The hash of the function's definition. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - The hash of the function's definition. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - The hash of the function'\''s definition.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: get_function_hash() {'
LINE: get_function_hash() {
+ [[ get_function_hash() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ get_function_hash() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_function_hash() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ get_function_hash() { =~ ^#+ ]]
+ [[ get_function_hash() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=get_function_hash
+ current_function_name=get_function_hash
+ extracted_markdown='## get_function_hash\n# Function: get_function_hash\n`get_function_hash` - Get the hash of a function'\''s definition.\n## Description\n- **Purpose**: \n  - Computes the hash of a function'\''s definition for integrity checks.\n- **Usage**: \n  - `get_function_hash [function_name]`\n- **Input Parameters**: \n  - `function_name` (string) - The name of the function to hash.\n- **Output**: \n  - The hash of the function'\''s definition.\n- **Exceptions**: \n  - None\n'
+ echo -e '## get_function_hash\n# Function: get_function_hash\n`get_function_hash` - Get the hash of a function'\''s definition.\n## Description\n- **Purpose**: \n  - Computes the hash of a function'\''s definition for integrity checks.\n- **Usage**: \n  - `get_function_hash [function_name]`\n- **Input Parameters**: \n  - `function_name` (string) - The name of the function to hash.\n- **Output**: \n  - The hash of the function'\''s definition.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     declare -f "$1" | md5 | cut -d'\'' '\'' -f1'
LINE:     declare -f "$1" | md5 | cut -d' ' -f1
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    declare -f "$1" | md5 | cut -d'\'' '\'' -f1'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^}$ ]]
+ [[ false == false ]]
+ [[     declare -f "$1" | md5 | cut -d' ' -f1 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Define the location of the venvutil config directory'
LINE: # Define the location of the venvutil config directory
+ [[ # Define the location of the venvutil config directory =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Define the location of the venvutil config directory =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Define the location of the venvutil config directory\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"'
LINE: export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^#+ ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^[a-zA-Z_#] ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"'
venv_funcs.sh WARNING(30): Invalid line type found: export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"
+ previous_line='export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}"'
+ IFS=
+ read -r line
+ echo 'LINE: # Create the directory recursively for the frozen VENV'\''s for recovery.'
LINE: # Create the directory recursively for the frozen VENV's for recovery.
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # Create the directory recursively for the frozen VENV's for recovery. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='Create the directory recursively for the frozen VENV'\''s for recovery.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze"'
LINE: [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze"
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ export VENVUTIL_CONFIG="${VENVUTIL_CONFIG:-${HOME}/.venvutil}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^#+ ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log"'
LINE: [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log"
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/freeze ]] || mkdir -p "${VENVUTIL_CONFIG}/freeze" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^#+ ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='[[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ [[ -d ${VENVUTIL_CONFIG}/log ]] || mkdir -p "${VENVUTIL_CONFIG}/log" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: do_wrapper'
LINE: # # Function: do_wrapper
+ [[ # # Function: do_wrapper =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: do_wrapper =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: do_wrapper\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `do_wrapper` - General wrapper function for logging specific command actions.'
LINE: # `do_wrapper` - General wrapper function for logging specific command actions.
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `do_wrapper` - General wrapper function for logging specific command actions. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`do_wrapper` - General wrapper function for logging specific command actions.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Executes a Python package manager command with optional logging based on the specified action.'
LINE: #   - Executes a Python package manager command with optional logging based on the specified action.
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes a Python package manager command with optional logging based on the specified action. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Executes a Python package manager command with optional logging based on the specified action.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `do_wrapper <cmd> <additional parameters>`'
LINE: #   - `do_wrapper <cmd> <additional parameters>`
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `do_wrapper <cmd> <additional parameters>` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `do_wrapper <cmd> <additional parameters>`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `cmd` (string) - The command to be executed.'
LINE: #   - `cmd` (string) - The command to be executed.
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `cmd` (string) - The command to be executed. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `cmd` (string) - The command to be executed.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `additional parameters` (string) - Any additional parameters to be passed to the command.'
LINE: #   - `additional parameters` (string) - Any additional parameters to be passed to the command.
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `additional parameters` (string) - Any additional parameters to be passed to the command. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `additional parameters` (string) - Any additional parameters to be passed to the command.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: do_wrapper() {'
LINE: do_wrapper() {
+ [[ do_wrapper() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ do_wrapper() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ do_wrapper() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ do_wrapper() { =~ ^#+ ]]
+ [[ do_wrapper() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=do_wrapper
+ current_function_name=do_wrapper
+ extracted_markdown='## do_wrapper\n# Function: do_wrapper\n`do_wrapper` - General wrapper function for logging specific command actions.\n## Description\n- **Purpose**: \n  - Executes a Python package manager command with optional logging based on the specified action.\n- **Usage**: \n  - `do_wrapper <cmd> <additional parameters>`\n- **Input Parameters**: \n  - `cmd` (string) - The command to be executed.\n  - `additional parameters` (string) - Any additional parameters to be passed to the command.\n- **Output**: \n  - None\n- **Exceptions**: \n  - None\n'
+ echo -e '## do_wrapper\n# Function: do_wrapper\n`do_wrapper` - General wrapper function for logging specific command actions.\n## Description\n- **Purpose**: \n  - Executes a Python package manager command with optional logging based on the specified action.\n- **Usage**: \n  - `do_wrapper <cmd> <additional parameters>`\n- **Input Parameters**: \n  - `cmd` (string) - The command to be executed.\n  - `additional parameters` (string) - Any additional parameters to be passed to the command.\n- **Output**: \n  - None\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local cmd="$1"; shift'
LINE:     local cmd="$1"; shift
+ [[     local cmd="$1"; shift =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     local cmd="$1"; shift =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd="$1"; shift =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local cmd="$1"; shift =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local cmd="$1"; shift'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local action="$1"'
LINE:     local action="$1"
+ [[     local action="$1" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd="$1"; shift =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local cmd="$1"; shift =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local action="$1" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local action="$1"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone")'
LINE:     local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone")
+ [[     local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local action="$1" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local action="$1" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local actions_to_exclude=("--help" "-h" "--dry-run")'
LINE:     local actions_to_exclude=("--help" "-h" "--dry-run")
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local actions_to_log=("install" "uninstall" "remove" "rename" "update" "upgrade" "create" "clean" "config" "clone") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local actions_to_exclude=("--help" "-h" "--dry-run")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local cmd_args="$*"'
LINE:     local cmd_args="$*"
+ [[     local cmd_args="$*" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local actions_to_exclude=("--help" "-h" "--dry-run") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd_args="$*" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local cmd_args="$*" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local cmd_args="$*"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local env_vars'
LINE:     local env_vars
+ [[     local env_vars =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local cmd_args="$*" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local cmd_args="$*" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_vars =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local env_vars =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local env_vars'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     env_vars=$( env | sed -E '\''/^SHELL=/,$d'\'' | sed -E '\''s/^([A-Za-z_]+)=(.*)$/\1="\2"/'\'' | tr '\''\n'\'' '\'' '\'' )'
LINE:     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' )
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local env_vars =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local env_vars =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    env_vars=$( env | sed -E '\''/^SHELL=/,$d'\'' | sed -E '\''s/^([A-Za-z_]+)=(.*)$/\1="\2"/'\'' | tr '\''\n'\'' '\'' '\'' )'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     env_vars=$( env | sed -E '/^SHELL=/,$d' | sed -E 's/^([A-Za-z_]+)=(.*)$/\1="\2"/' | tr '\n' ' ' ) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command'
LINE:     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     eval "conda() $(declare -f __venv_conda| sed '\''1d'\'')"'
LINE:     eval "conda() $(declare -f __venv_conda| sed '1d')"
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Put the function back to "conda" our PROMPT_COMMAND will put it back after the command =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    eval "conda() $(declare -f __venv_conda| sed '\''1d'\'')"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     eval "conda() $(declare -f __venv_conda| sed '1d')" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Make the command be how the user invoked it rather than with the wrappers.'
LINE:     # Make the command be how the user invoked it rather than with the wrappers.
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Make the command be how the user invoked it rather than with the wrappers. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Make the command be how the user invoked it rather than with the wrappers.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed '\''s/__venv_//g'\'')'
LINE:     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g')
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Make the command be how the user invoked it rather than with the wrappers. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed '\''s/__venv_//g'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local user_cmd=$(echo "${cmd}" "${cmd_args}" | sed 's/__venv_//g') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Check if the command ${cmd} is a file or a function/alias. If it'\''s not a function,'
LINE:     # Check if the command ${cmd} is a file or a function/alias. If it's not a function,
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Check if the command ${cmd} is a file or a function/alias. If it'\''s not a function,'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # we want to run it with the "command" builtin to bypass shell functions or aliases.'
LINE:     # we want to run it with the "command" builtin to bypass shell functions or aliases.
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the command ${cmd} is a file or a function/alias. If it's not a function, =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # we want to run it with the "command" builtin to bypass shell functions or aliases.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if type -P "${cmd}" &>/dev/null; then'
LINE:     if type -P "${cmd}" &>/dev/null; then
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # we want to run it with the "command" builtin to bypass shell functions or aliases. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if type -P "${cmd}" &>/dev/null; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if type -P "${cmd}" &>/dev/null; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         cmd="command ${cmd}"'
LINE:         cmd="command ${cmd}"
+ [[         cmd="command ${cmd}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if type -P "${cmd}" &>/dev/null; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cmd="command ${cmd}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         cmd="command ${cmd}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        cmd="command ${cmd}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         cmd="command ${cmd}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         cmd="command ${cmd}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # local cmd_line="${env_vars} ${cmd} ${cmd_args}"'
LINE:     # local cmd_line="${env_vars} ${cmd} ${cmd_args}"
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # local cmd_line="${env_vars} ${cmd} ${cmd_args}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     local user_line="${env_vars} ${user_cmd}"'
LINE:     local user_line="${env_vars} ${user_cmd}"
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # local cmd_line="${env_vars} ${cmd} ${cmd_args}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     local user_line="${env_vars} ${user_cmd}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    local user_line="${env_vars} ${user_cmd}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     local user_line="${env_vars} ${user_cmd}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     # Check if the action is potentially destructive and should be logged.'
LINE:     # Check if the action is potentially destructive and should be logged.
+ [[     # Check if the action is potentially destructive and should be logged. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     # Check if the action is potentially destructive and should be logged. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the action is potentially destructive and should be logged. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     # Check if the action is potentially destructive and should be logged. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    # Check if the action is potentially destructive and should be logged.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then'
LINE:     if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     # Check if the action is potentially destructive and should be logged. =~ ^}$ ]]
+ [[ false == false ]]
+ [[     # Check if the action is potentially destructive and should be logged. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local freeze_date=$(date "+%Y%m%d%H%M%S")'
LINE:         local freeze_date=$(date "+%Y%m%d%H%M%S")
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ " ${actions_to_log[*]} " =~ ${action} ]] && ! [[ "$*" =~ $(IFS="|"; echo "${actions_to_exclude[*]}") ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local freeze_date=$(date "+%Y%m%d%H%M%S")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local cmd_date=$(date '\''+%Y-%m-%d %H:%M:%S'\'')'
LINE:         local cmd_date=$(date '+%Y-%m-%d %H:%M:%S')
+ [[         local cmd_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local cmd_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local cmd_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local cmd_date=$(date '\''+%Y-%m-%d %H:%M:%S'\'')'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local freeze_dir="${VENVUTIL_CONFIG}/freeze"'
LINE:         local freeze_dir="${VENVUTIL_CONFIG}/freeze"
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local cmd_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local cmd_date=$(date '+%Y-%m-%d %H:%M:%S') =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local freeze_dir="${VENVUTIL_CONFIG}/freeze"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"'
LINE:         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local freeze_dir="${VENVUTIL_CONFIG}/freeze" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         local log_dir="${VENVUTIL_CONFIG}/log"'
LINE:         local log_dir="${VENVUTIL_CONFIG}/log"
+ [[         local log_dir="${VENVUTIL_CONFIG}/log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local log_dir="${VENVUTIL_CONFIG}/log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         local log_dir="${VENVUTIL_CONFIG}/log" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        local log_dir="${VENVUTIL_CONFIG}/log"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Freeze the state of the environment before a potentially destructive command is executed.'
LINE:         # Freeze the state of the environment before a potentially destructive command is executed.
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         local log_dir="${VENVUTIL_CONFIG}/log" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         local log_dir="${VENVUTIL_CONFIG}/log" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Freeze the state of the environment before a potentially destructive command is executed.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         command pip freeze > "${freeze_state}"'
LINE:         command pip freeze > "${freeze_state}"
+ [[         command pip freeze > "${freeze_state}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Freeze the state of the environment before a potentially destructive command is executed. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         command pip freeze > "${freeze_state}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         command pip freeze > "${freeze_state}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        command pip freeze > "${freeze_state}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         if eval " ${env_vars} ${cmd} ${cmd_args} "; then'
LINE:         if eval " ${env_vars} ${cmd} ${cmd_args} "; then
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         command pip freeze > "${freeze_state}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         command pip freeze > "${freeze_state}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        if eval " ${env_vars} ${cmd} ${cmd_args} "; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             # Logging the command invocation if it completed successfully.'
LINE:             # Logging the command invocation if it completed successfully.
+ [[             # Logging the command invocation if it completed successfully. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[         if eval " ${env_vars} ${cmd} ${cmd_args} "; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Logging the command invocation if it completed successfully. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Logging the command invocation if it completed successfully. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            # Logging the command invocation if it completed successfully.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log"'
LINE:             local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log"
+ [[             local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Logging the command invocation if it completed successfully. =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Logging the command invocation if it completed successfully. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log"'
LINE:             local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log"
+ [[             local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local hist_log="${log_dir}/${CONDA_DEFAULT_ENV}.log" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             {'
LINE:             {
+ [[             { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             local venvutil_log="${VENVUTIL_CONFIG}/venvutil.log" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             { =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            {'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 echo "# ${cmd_date}: ${user_line}"'
LINE:                 echo "# ${cmd_date}: ${user_line}"
+ [[                 echo "# ${cmd_date}: ${user_line}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             { =~ ^}$ ]]
+ [[ false == false ]]
+ [[             { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${cmd_date}: ${user_line}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${cmd_date}: ${user_line}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                echo "# ${cmd_date}: ${user_line}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 echo "# ${cmd_date}: Current working directory: ${PWD}"'
LINE:                 echo "# ${cmd_date}: Current working directory: ${PWD}"
+ [[                 echo "# ${cmd_date}: Current working directory: ${PWD}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${cmd_date}: ${user_line}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${cmd_date}: ${user_line}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${cmd_date}: Current working directory: ${PWD}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${cmd_date}: Current working directory: ${PWD}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                echo "# ${cmd_date}: Current working directory: ${PWD}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:                 echo "# ${cmd_date}: $(${cmd} --version)"'
LINE:                 echo "# ${cmd_date}: $(${cmd} --version)"
+ [[                 echo "# ${cmd_date}: $(${cmd} --version)" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${cmd_date}: Current working directory: ${PWD}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${cmd_date}: Current working directory: ${PWD}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${cmd_date}: $(${cmd} --version)" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !                 echo "# ${cmd_date}: $(${cmd} --version)" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='                echo "# ${cmd_date}: $(${cmd} --version)"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             } >> "${hist_log}"'
LINE:             } >> "${hist_log}"
+ [[             } >> "${hist_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[                 echo "# ${cmd_date}: $(${cmd} --version)" =~ ^}$ ]]
+ [[ false == false ]]
+ [[                 echo "# ${cmd_date}: $(${cmd} --version)" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             } >> "${hist_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             } >> "${hist_log}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            } >> "${hist_log}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}"'
LINE:             echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}"
+ [[             echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             } >> "${hist_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             } >> "${hist_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             # Freeze it again to get the current state, after any potentially destructive command is executed.'
LINE:             # Freeze it again to get the current state, after any potentially destructive command is executed.
+ [[             # Freeze it again to get the current state, after any potentially destructive command is executed. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             echo "# ${cmd_date} - ${CONDA_DEFAULT_ENV}: ${user_line}" >> "${venvutil_log}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Freeze it again to get the current state, after any potentially destructive command is executed. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Freeze it again to get the current state, after any potentially destructive command is executed. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            # Freeze it again to get the current state, after any potentially destructive command is executed.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             # Update the new date and time sleep 2 second to ensure the filename is unique.'
LINE:             # Update the new date and time sleep 2 second to ensure the filename is unique.
+ [[             # Update the new date and time sleep 2 second to ensure the filename is unique. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Freeze it again to get the current state, after any potentially destructive command is executed. =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Freeze it again to get the current state, after any potentially destructive command is executed. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Update the new date and time sleep 2 second to ensure the filename is unique. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Update the new date and time sleep 2 second to ensure the filename is unique. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            # Update the new date and time sleep 2 second to ensure the filename is unique.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             sleep 2'
LINE:             sleep 2
+ [[             sleep 2 =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Update the new date and time sleep 2 second to ensure the filename is unique. =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Update the new date and time sleep 2 second to ensure the filename is unique. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sleep 2 =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             sleep 2 =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            sleep 2'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             freeze_date=$(date "+%Y%m%d%H%M%S")'
LINE:             freeze_date=$(date "+%Y%m%d%H%M%S")
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             sleep 2 =~ ^}$ ]]
+ [[ false == false ]]
+ [[             sleep 2 =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            freeze_date=$(date "+%Y%m%d%H%M%S")'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"'
LINE:             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^}$ ]]
+ [[ false == false ]]
+ [[             freeze_date=$(date "+%Y%m%d%H%M%S") =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             command pip freeze > "${freeze_state}"'
LINE:             command pip freeze > "${freeze_state}"
+ [[             command pip freeze > "${freeze_state}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             freeze_state="${freeze_dir}/${CONDA_DEFAULT_ENV}.${freeze_date}.txt" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             command pip freeze > "${freeze_state}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             command pip freeze > "${freeze_state}" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            command pip freeze > "${freeze_state}"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             # Make a symlink so the currecnt state is allways up-to-date.'
LINE:             # Make a symlink so the currecnt state is allways up-to-date.
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             command pip freeze > "${freeze_state}" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             command pip freeze > "${freeze_state}" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             # Make a symlink so the currecnt state is allways up-to-date. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            # Make a symlink so the currecnt state is allways up-to-date.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt"'
LINE:             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt"
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^}$ ]]
+ [[ false == false ]]
+ [[             # Make a symlink so the currecnt state is allways up-to-date. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         fi'
LINE:         fi
+ [[         fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             ln -sf "${freeze_state}" "${freeze_dir}/${CONDA_DEFAULT_ENV}.current.txt" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     else'
LINE:     else
+ [[     else =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[         fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     else =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    else'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Execute the command without logging.'
LINE:         # Execute the command without logging.
+ [[         # Execute the command without logging. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     else =~ ^}$ ]]
+ [[ false == false ]]
+ [[     else =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Execute the command without logging. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Execute the command without logging. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Execute the command without logging.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         ${cmd} ${cmd_args}'
LINE:         ${cmd} ${cmd_args}
+ [[         ${cmd} ${cmd_args} =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Execute the command without logging. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Execute the command without logging. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ${cmd} ${cmd_args} =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         ${cmd} ${cmd_args} =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        ${cmd} ${cmd_args}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         ${cmd} ${cmd_args} =~ ^}$ ]]
+ [[ false == false ]]
+ [[         ${cmd} ${cmd_args} =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: pip'
LINE: # # Function: pip
+ [[ # # Function: pip =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: pip =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: pip\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `pip` - Wrapper function for pip commands.'
LINE: # `pip` - Wrapper function for pip commands.
+ [[ # `pip` - Wrapper function for pip commands. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `pip` - Wrapper function for pip commands. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pip` - Wrapper function for pip commands. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `pip` - Wrapper function for pip commands. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`pip` - Wrapper function for pip commands.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Wraps pip commands to ensure environment variables are preserved.'
LINE: #   - Wraps pip commands to ensure environment variables are preserved.
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Wraps pip commands to ensure environment variables are preserved. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Wraps pip commands to ensure environment variables are preserved.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `pip [arguments]`'
LINE: #   - `pip [arguments]`
+ [[ #   - `pip [arguments]` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `pip [arguments]` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pip [arguments]` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `pip [arguments]` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `pip [arguments]`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `arguments` (string) - Arguments to pass to pip.'
LINE: #   - `arguments` (string) - Arguments to pass to pip.
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `arguments` (string) - Arguments to pass to pip. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `arguments` (string) - Arguments to pass to pip.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Executes the pip command with the provided arguments.'
LINE: #   - Executes the pip command with the provided arguments.
+ [[ #   - Executes the pip command with the provided arguments. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Executes the pip command with the provided arguments. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the pip command with the provided arguments. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Executes the pip command with the provided arguments. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Executes the pip command with the provided arguments.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: pip() {'
LINE: pip() {
+ [[ pip() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ pip() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pip() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ pip() { =~ ^#+ ]]
+ [[ pip() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=pip
+ current_function_name=pip
+ extracted_markdown='## pip\n# Function: pip\n`pip` - Wrapper function for pip commands.\n## Description\n- **Purpose**: \n  - Wraps pip commands to ensure environment variables are preserved.\n- **Usage**: \n  - `pip [arguments]`\n- **Input Parameters**: \n  - `arguments` (string) - Arguments to pass to pip.\n- **Output**: \n  - Executes the pip command with the provided arguments.\n- **Exceptions**: \n  - None\n'
+ echo -e '## pip\n# Function: pip\n`pip` - Wrapper function for pip commands.\n## Description\n- **Purpose**: \n  - Wraps pip commands to ensure environment variables are preserved.\n- **Usage**: \n  - `pip [arguments]`\n- **Input Parameters**: \n  - `arguments` (string) - Arguments to pass to pip.\n- **Output**: \n  - Executes the pip command with the provided arguments.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     do_wrapper pip "$@"'
LINE:     do_wrapper pip "$@"
+ [[     do_wrapper pip "$@" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     do_wrapper pip "$@" =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     do_wrapper pip "$@" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     do_wrapper pip "$@" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    do_wrapper pip "$@"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     do_wrapper pip "$@" =~ ^}$ ]]
+ [[ false == false ]]
+ [[     do_wrapper pip "$@" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # # Function: __venv_conda_check'
LINE: # # Function: __venv_conda_check
+ [[ # # Function: __venv_conda_check =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # # Function: __venv_conda_check =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='# Function: __venv_conda_check\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.'
LINE: # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # `__venv_conda_check` - Ensure conda function is wrapped and check for definition changes. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # ## Description'
LINE: # ## Description
+ [[ # ## Description =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # ## Description =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='## Description\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Purpose**: '
LINE: # - **Purpose**: 
+ [[ # - **Purpose**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Purpose**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Purpose**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Checks if the conda function definition has changed and re-hooks if necessary.'
LINE: #   - Checks if the conda function definition has changed and re-hooks if necessary.
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Checks if the conda function definition has changed and re-hooks if necessary. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Checks if the conda function definition has changed and re-hooks if necessary.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Usage**: '
LINE: # - **Usage**: 
+ [[ # - **Usage**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Usage**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Usage**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - `__venv_conda_check`'
LINE: #   - `__venv_conda_check`
+ [[ #   - `__venv_conda_check` =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - `__venv_conda_check` =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__venv_conda_check` =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - `__venv_conda_check` =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - `__venv_conda_check`\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Input Parameters**: '
LINE: # - **Input Parameters**: 
+ [[ # - **Input Parameters**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Input Parameters**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Input Parameters**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Output**: '
LINE: # - **Output**: 
+ [[ # - **Output**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Output**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Output**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - Ensures the conda function is wrapped correctly.'
LINE: #   - Ensures the conda function is wrapped correctly.
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - Ensures the conda function is wrapped correctly. =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - Ensures the conda function is wrapped correctly.\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # - **Exceptions**: '
LINE: # - **Exceptions**: 
+ [[ # - **Exceptions**:  =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # - **Exceptions**:  =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='- **Exceptions**: \n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #   - None'
LINE: #   - None
+ [[ #   - None =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ #   - None =~ ^#+ ]]
+ echo '**************************  Inside function documentation'
**************************  Inside function documentation
+ extracted_markdown+='  - None\n'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: #'
LINE: #
+ [[ # =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ # =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ # =~ ^#[[:space:]]*$ ]]
+ echo '**************************  Found empty #'
**************************  Found empty #
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __venv_conda_check() {'
LINE: __venv_conda_check() {
+ [[ __venv_conda_check() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_conda_check() { =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check() { =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check() { =~ ^#+ ]]
+ [[ __venv_conda_check() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ echo '**************************  Beginning of function code'
**************************  Beginning of function code
+ current_function_name=__venv_conda_check
+ current_function_name=__venv_conda_check
+ extracted_markdown='## __venv_conda_check\n# Function: __venv_conda_check\n`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.\n## Description\n- **Purpose**: \n  - Checks if the conda function definition has changed and re-hooks if necessary.\n- **Usage**: \n  - `__venv_conda_check`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Ensures the conda function is wrapped correctly.\n- **Exceptions**: \n  - None\n'
+ echo -e '## __venv_conda_check\n# Function: __venv_conda_check\n`__venv_conda_check` - Ensure conda function is wrapped and check for definition changes.\n## Description\n- **Purpose**: \n  - Checks if the conda function definition has changed and re-hooks if necessary.\n- **Usage**: \n  - `__venv_conda_check`\n- **Input Parameters**: \n  - None\n- **Output**: \n  - Ensures the conda function is wrapped correctly.\n- **Exceptions**: \n  - None\n'
+ extracted_markdown=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     current_hash=$(get_function_hash conda)'
LINE:     current_hash=$(get_function_hash conda)
+ [[     current_hash=$(get_function_hash conda) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     current_hash=$(get_function_hash conda) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    current_hash=$(get_function_hash conda)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then'
LINE:     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^}$ ]]
+ [[ false == false ]]
+ [[     current_hash=$(get_function_hash conda) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Capture the current conda function definition and assign it to __venv_conda'
LINE:         # Capture the current conda function definition and assign it to __venv_conda
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^}$ ]]
+ [[ false == false ]]
+ [[     if [[ "${current_hash}" != "${__venv_conda_hash}" ]]; then =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Capture the current conda function definition and assign it to __venv_conda =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Capture the current conda function definition and assign it to __venv_conda'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         eval "__venv_conda() $(declare -f conda | sed '\''1d'\'')"'
LINE:         eval "__venv_conda() $(declare -f conda | sed '1d')"
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Capture the current conda function definition and assign it to __venv_conda =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        eval "__venv_conda() $(declare -f conda | sed '\''1d'\'')"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^}$ ]]
+ [[ false == false ]]
+ [[         eval "__venv_conda() $(declare -f conda | sed '1d')" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Redefine the conda function to include the wrapper'
LINE:         # Redefine the conda function to include the wrapper
+ [[         # Redefine the conda function to include the wrapper =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Redefine the conda function to include the wrapper =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Redefine the conda function to include the wrapper'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         conda() {'
LINE:         conda() {
+ [[         conda() { =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Redefine the conda function to include the wrapper =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         conda() { =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         conda() { =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        conda() {'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:             do_wrapper "__venv_conda" "$@"'
LINE:             do_wrapper "__venv_conda" "$@"
+ [[             do_wrapper "__venv_conda" "$@" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         conda() { =~ ^}$ ]]
+ [[ false == false ]]
+ [[         conda() { =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             do_wrapper "__venv_conda" "$@" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !             do_wrapper "__venv_conda" "$@" =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='            do_wrapper "__venv_conda" "$@"'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         }'
LINE:         }
+ [[         } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[             do_wrapper "__venv_conda" "$@" =~ ^}$ ]]
+ [[ false == false ]]
+ [[             do_wrapper "__venv_conda" "$@" =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        }'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         } =~ ^}$ ]]
+ [[ false == false ]]
+ [[         } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         # Set the hash to be the new conda function.'
LINE:         # Set the hash to be the new conda function.
+ [[         # Set the hash to be the new conda function. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[         # Set the hash to be the new conda function. =~ ^#.* ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Set the hash to be the new conda function. =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         # Set the hash to be the new conda function. =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        # Set the hash to be the new conda function.'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:         __venv_conda_hash=$(get_function_hash conda)'
LINE:         __venv_conda_hash=$(get_function_hash conda)
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         # Set the hash to be the new conda function. =~ ^}$ ]]
+ [[ false == false ]]
+ [[         # Set the hash to be the new conda function. =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !         __venv_conda_hash=$(get_function_hash conda) =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='        __venv_conda_hash=$(get_function_hash conda)'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE:     fi'
LINE:     fi
+ [[     fi =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^}$ ]]
+ [[ false == false ]]
+ [[         __venv_conda_hash=$(get_function_hash conda) =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ !     fi =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='    fi'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: }'
LINE: }
+ [[ } =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[     fi =~ ^}$ ]]
+ [[ false == false ]]
+ [[     fi =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! } =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line='}'
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ } =~ ^}$ ]]
+ [[ '' =~ ^[[:space]]*$ ]]
+ [[ false == false ]]
+ [[ } =~ ^[[:space:]]*$ ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! '' =~ ^[a-zA-Z_#] ]]
+ echo '************************** Skipping line'
************************** Skipping line
+ previous_line=
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Run through the conda check function to ensure the conda function is wrapped'
LINE: # Run through the conda check function to ensure the conda function is wrapped
+ [[ # Run through the conda check function to ensure the conda function is wrapped =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Run through the conda check function to ensure the conda function is wrapped =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Run through the conda check function to ensure the conda function is wrapped\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __venv_conda_check'
LINE: __venv_conda_check
+ [[ __venv_conda_check =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_conda_check =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_check =~ ^#+ ]]
+ [[ __venv_conda_check =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __venv_conda_check =~ ^[a-zA-Z_#] ]]
+ [[ __venv_conda_check =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __venv_conda_check'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __venv_conda_check'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __venv_conda_check'
venv_funcs.sh WARNING(30): Invalid line type found: __venv_conda_check
+ previous_line=__venv_conda_check
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __venv_conda_check =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Initial hash of the Conda function. Must always update with new hash after defining.'
LINE: # Initial hash of the Conda function. Must always update with new hash after defining.
+ [[ # Initial hash of the Conda function. Must always update with new hash after defining. =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Initial hash of the Conda function. Must always update with new hash after defining. =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Initial hash of the Conda function. Must always update with new hash after defining.\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __venv_conda_hash=$(get_function_hash conda)'
LINE: __venv_conda_hash=$(get_function_hash conda)
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^#+ ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __venv_conda_hash=$(get_function_hash conda) =~ ^[a-zA-Z_#] ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __venv_conda_hash=$(get_function_hash conda)'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __venv_conda_hash=$(get_function_hash conda)'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __venv_conda_hash=$(get_function_hash conda)'
venv_funcs.sh WARNING(30): Invalid line type found: __venv_conda_hash=$(get_function_hash conda)
+ previous_line='__venv_conda_hash=$(get_function_hash conda)'
+ IFS=
+ read -r line
+ echo 'LINE: '
LINE: 
+ [[ '' =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __venv_conda_hash=$(get_function_hash conda) =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ echo '**************************  Resetting function documentation'
**************************  Resetting function documentation
+ extracted_markdown=
+ previous_line=
+ in_function_doc=false
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: # Modify the PROMPT_COMMAND to continuously check for function `conda` changes'
LINE: # Modify the PROMPT_COMMAND to continuously check for function `conda` changes
+ [[ # Modify the PROMPT_COMMAND to continuously check for function `conda` changes =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ false == false ]]
+ [[ '' =~ ^[[:space:]]*$ ]]
+ [[ # Modify the PROMPT_COMMAND to continuously check for function `conda` changes =~ ^#.* ]]
+ echo '**************************  Found function documentation'
**************************  Found function documentation
+ extracted_markdown+='Modify the PROMPT_COMMAND to continuously check for function `conda` changes\n'
+ in_function_doc=true
+ continue
+ IFS=
+ read -r line
+ echo 'LINE: __venv_prompt_command="${PROMPT_COMMAND}"'
LINE: __venv_prompt_command="${PROMPT_COMMAND}"
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ '' =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^#+ ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! __venv_prompt_command="${PROMPT_COMMAND}" =~ ^[a-zA-Z_#] ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: __venv_prompt_command="${PROMPT_COMMAND}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: __venv_prompt_command="${PROMPT_COMMAND}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: __venv_prompt_command="${PROMPT_COMMAND}"'
venv_funcs.sh WARNING(30): Invalid line type found: __venv_prompt_command="${PROMPT_COMMAND}"
+ previous_line='__venv_prompt_command="${PROMPT_COMMAND}"'
+ IFS=
+ read -r line
+ echo 'LINE: PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"'
LINE: PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^#! ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ false == true ]]
+ [[ __venv_prompt_command="${PROMPT_COMMAND}" =~ ^}$ ]]
+ [[ true == false ]]
+ [[ true == true ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^#[[:space:]]*$ ]]
+ [[ true == true ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^#+ ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^(function[[:space:]]+)?[a-zA-Z_][a-zA-Z0-9_]*\(\)[[:space:]]*\{ ]]
+ [[ ! PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^[a-zA-Z_#] ]]
+ [[ PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}" =~ ^[[:space:]]*$ ]]
+ log_message WARNING 'Invalid line type found: PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"'
+ local message_level=WARNING
+ shift
+ local 'message_out=Invalid line type found: PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"'
+ message_class=(['DEBUG9']='1' ['DEBUG8']='2' ['DEBUG7']='3' ['DEBUG6']='4' ['DEBUG5']='5' ['DEBUG4']='6' ['DEBUG3']='7' ['DEBUG2']='8' ['DEBUG1']='9' ['DEBUG0']='10' ['DEBUG']='10' ['INFO']='20' ['WARNING']='30' ['WARN']='30' ['ERROR']='40' ['CRITICAL']='50' ['SILENT']='99')
+ declare -A message_class
+ [[ -z _ ]]
+ '[' 30 -le 30 ']'
+ echo 'venv_funcs.sh WARNING(30): Invalid line type found: PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"'
venv_funcs.sh WARNING(30): Invalid line type found: PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"
+ previous_line='PROMPT_COMMAND="__venv_conda_check; ${PROMPT_COMMAND}"'
+ IFS=
+ read -r line
+ [[ -n '' ]]
+ set +x
Markdown generation complete.
